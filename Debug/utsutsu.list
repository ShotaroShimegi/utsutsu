
utsutsu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b47c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800b610  0800b610  0001b610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba90  0800ba90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba98  0800ba98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba9c  0800ba9c  0001ba9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800baa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  200001e0  0800bc7c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  0800bc7c  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001daaa  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6f  00000000  00000000  0003dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  00041728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  000429d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023aa2  00000000  00000000  00043aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126c2  00000000  00000000  00067542  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c65b2  00000000  00000000  00079c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001401b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005940  00000000  00000000  00140234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5f4 	.word	0x0800b5f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b5f4 	.word	0x0800b5f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d04:	f1a2 0201 	sub.w	r2, r2, #1
 8000d08:	d1ed      	bne.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295
 8000e78:	f000 b972 	b.w	8001160 <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9e08      	ldr	r6, [sp, #32]
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4688      	mov	r8, r1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d14b      	bne.n	8000f3a <__udivmoddi4+0xa6>
 8000ea2:	428a      	cmp	r2, r1
 8000ea4:	4615      	mov	r5, r2
 8000ea6:	d967      	bls.n	8000f78 <__udivmoddi4+0xe4>
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	b14a      	cbz	r2, 8000ec2 <__udivmoddi4+0x2e>
 8000eae:	f1c2 0720 	rsb	r7, r2, #32
 8000eb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000eb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000eba:	4095      	lsls	r5, r2
 8000ebc:	ea47 0803 	orr.w	r8, r7, r3
 8000ec0:	4094      	lsls	r4, r2
 8000ec2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ec6:	0c23      	lsrs	r3, r4, #16
 8000ec8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ecc:	fa1f fc85 	uxth.w	ip, r5
 8000ed0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ed4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed8:	fb07 f10c 	mul.w	r1, r7, ip
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x60>
 8000ee0:	18eb      	adds	r3, r5, r3
 8000ee2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ee6:	f080 811b 	bcs.w	8001120 <__udivmoddi4+0x28c>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 8118 	bls.w	8001120 <__udivmoddi4+0x28c>
 8000ef0:	3f02      	subs	r7, #2
 8000ef2:	442b      	add	r3, r5
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f08:	45a4      	cmp	ip, r4
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x8c>
 8000f0c:	192c      	adds	r4, r5, r4
 8000f0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f12:	f080 8107 	bcs.w	8001124 <__udivmoddi4+0x290>
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	f240 8104 	bls.w	8001124 <__udivmoddi4+0x290>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	442c      	add	r4, r5
 8000f20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f24:	eba4 040c 	sub.w	r4, r4, ip
 8000f28:	2700      	movs	r7, #0
 8000f2a:	b11e      	cbz	r6, 8000f34 <__udivmoddi4+0xa0>
 8000f2c:	40d4      	lsrs	r4, r2
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e9c6 4300 	strd	r4, r3, [r6]
 8000f34:	4639      	mov	r1, r7
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d909      	bls.n	8000f52 <__udivmoddi4+0xbe>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	f000 80eb 	beq.w	800111a <__udivmoddi4+0x286>
 8000f44:	2700      	movs	r7, #0
 8000f46:	e9c6 0100 	strd	r0, r1, [r6]
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	fab3 f783 	clz	r7, r3
 8000f56:	2f00      	cmp	r7, #0
 8000f58:	d147      	bne.n	8000fea <__udivmoddi4+0x156>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d302      	bcc.n	8000f64 <__udivmoddi4+0xd0>
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	f200 80fa 	bhi.w	8001158 <__udivmoddi4+0x2c4>
 8000f64:	1a84      	subs	r4, r0, r2
 8000f66:	eb61 0303 	sbc.w	r3, r1, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	4698      	mov	r8, r3
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d0e0      	beq.n	8000f34 <__udivmoddi4+0xa0>
 8000f72:	e9c6 4800 	strd	r4, r8, [r6]
 8000f76:	e7dd      	b.n	8000f34 <__udivmoddi4+0xa0>
 8000f78:	b902      	cbnz	r2, 8000f7c <__udivmoddi4+0xe8>
 8000f7a:	deff      	udf	#255	; 0xff
 8000f7c:	fab2 f282 	clz	r2, r2
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	f040 808f 	bne.w	80010a4 <__udivmoddi4+0x210>
 8000f86:	1b49      	subs	r1, r1, r5
 8000f88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f8c:	fa1f f885 	uxth.w	r8, r5
 8000f90:	2701      	movs	r7, #1
 8000f92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000f96:	0c23      	lsrs	r3, r4, #16
 8000f98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000f9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa0:	fb08 f10c 	mul.w	r1, r8, ip
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0x124>
 8000fa8:	18eb      	adds	r3, r5, r3
 8000faa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x122>
 8000fb0:	4299      	cmp	r1, r3
 8000fb2:	f200 80cd 	bhi.w	8001150 <__udivmoddi4+0x2bc>
 8000fb6:	4684      	mov	ip, r0
 8000fb8:	1a59      	subs	r1, r3, r1
 8000fba:	b2a3      	uxth	r3, r4
 8000fbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000fc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fc8:	fb08 f800 	mul.w	r8, r8, r0
 8000fcc:	45a0      	cmp	r8, r4
 8000fce:	d907      	bls.n	8000fe0 <__udivmoddi4+0x14c>
 8000fd0:	192c      	adds	r4, r5, r4
 8000fd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fd6:	d202      	bcs.n	8000fde <__udivmoddi4+0x14a>
 8000fd8:	45a0      	cmp	r8, r4
 8000fda:	f200 80b6 	bhi.w	800114a <__udivmoddi4+0x2b6>
 8000fde:	4618      	mov	r0, r3
 8000fe0:	eba4 0408 	sub.w	r4, r4, r8
 8000fe4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fe8:	e79f      	b.n	8000f2a <__udivmoddi4+0x96>
 8000fea:	f1c7 0c20 	rsb	ip, r7, #32
 8000fee:	40bb      	lsls	r3, r7
 8000ff0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ff4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ff8:	fa01 f407 	lsl.w	r4, r1, r7
 8000ffc:	fa20 f50c 	lsr.w	r5, r0, ip
 8001000:	fa21 f30c 	lsr.w	r3, r1, ip
 8001004:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001008:	4325      	orrs	r5, r4
 800100a:	fbb3 f9f8 	udiv	r9, r3, r8
 800100e:	0c2c      	lsrs	r4, r5, #16
 8001010:	fb08 3319 	mls	r3, r8, r9, r3
 8001014:	fa1f fa8e 	uxth.w	sl, lr
 8001018:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800101c:	fb09 f40a 	mul.w	r4, r9, sl
 8001020:	429c      	cmp	r4, r3
 8001022:	fa02 f207 	lsl.w	r2, r2, r7
 8001026:	fa00 f107 	lsl.w	r1, r0, r7
 800102a:	d90b      	bls.n	8001044 <__udivmoddi4+0x1b0>
 800102c:	eb1e 0303 	adds.w	r3, lr, r3
 8001030:	f109 30ff 	add.w	r0, r9, #4294967295
 8001034:	f080 8087 	bcs.w	8001146 <__udivmoddi4+0x2b2>
 8001038:	429c      	cmp	r4, r3
 800103a:	f240 8084 	bls.w	8001146 <__udivmoddi4+0x2b2>
 800103e:	f1a9 0902 	sub.w	r9, r9, #2
 8001042:	4473      	add	r3, lr
 8001044:	1b1b      	subs	r3, r3, r4
 8001046:	b2ad      	uxth	r5, r5
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001054:	fb00 fa0a 	mul.w	sl, r0, sl
 8001058:	45a2      	cmp	sl, r4
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x1da>
 800105c:	eb1e 0404 	adds.w	r4, lr, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	d26b      	bcs.n	800113e <__udivmoddi4+0x2aa>
 8001066:	45a2      	cmp	sl, r4
 8001068:	d969      	bls.n	800113e <__udivmoddi4+0x2aa>
 800106a:	3802      	subs	r0, #2
 800106c:	4474      	add	r4, lr
 800106e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001072:	fba0 8902 	umull	r8, r9, r0, r2
 8001076:	eba4 040a 	sub.w	r4, r4, sl
 800107a:	454c      	cmp	r4, r9
 800107c:	46c2      	mov	sl, r8
 800107e:	464b      	mov	r3, r9
 8001080:	d354      	bcc.n	800112c <__udivmoddi4+0x298>
 8001082:	d051      	beq.n	8001128 <__udivmoddi4+0x294>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d069      	beq.n	800115c <__udivmoddi4+0x2c8>
 8001088:	ebb1 050a 	subs.w	r5, r1, sl
 800108c:	eb64 0403 	sbc.w	r4, r4, r3
 8001090:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001094:	40fd      	lsrs	r5, r7
 8001096:	40fc      	lsrs	r4, r7
 8001098:	ea4c 0505 	orr.w	r5, ip, r5
 800109c:	e9c6 5400 	strd	r5, r4, [r6]
 80010a0:	2700      	movs	r7, #0
 80010a2:	e747      	b.n	8000f34 <__udivmoddi4+0xa0>
 80010a4:	f1c2 0320 	rsb	r3, r2, #32
 80010a8:	fa20 f703 	lsr.w	r7, r0, r3
 80010ac:	4095      	lsls	r5, r2
 80010ae:	fa01 f002 	lsl.w	r0, r1, r2
 80010b2:	fa21 f303 	lsr.w	r3, r1, r3
 80010b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010ba:	4338      	orrs	r0, r7
 80010bc:	0c01      	lsrs	r1, r0, #16
 80010be:	fbb3 f7fe 	udiv	r7, r3, lr
 80010c2:	fa1f f885 	uxth.w	r8, r5
 80010c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80010ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010ce:	fb07 f308 	mul.w	r3, r7, r8
 80010d2:	428b      	cmp	r3, r1
 80010d4:	fa04 f402 	lsl.w	r4, r4, r2
 80010d8:	d907      	bls.n	80010ea <__udivmoddi4+0x256>
 80010da:	1869      	adds	r1, r5, r1
 80010dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80010e0:	d22f      	bcs.n	8001142 <__udivmoddi4+0x2ae>
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d92d      	bls.n	8001142 <__udivmoddi4+0x2ae>
 80010e6:	3f02      	subs	r7, #2
 80010e8:	4429      	add	r1, r5
 80010ea:	1acb      	subs	r3, r1, r3
 80010ec:	b281      	uxth	r1, r0
 80010ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80010f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fa:	fb00 f308 	mul.w	r3, r0, r8
 80010fe:	428b      	cmp	r3, r1
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x27e>
 8001102:	1869      	adds	r1, r5, r1
 8001104:	f100 3cff 	add.w	ip, r0, #4294967295
 8001108:	d217      	bcs.n	800113a <__udivmoddi4+0x2a6>
 800110a:	428b      	cmp	r3, r1
 800110c:	d915      	bls.n	800113a <__udivmoddi4+0x2a6>
 800110e:	3802      	subs	r0, #2
 8001110:	4429      	add	r1, r5
 8001112:	1ac9      	subs	r1, r1, r3
 8001114:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001118:	e73b      	b.n	8000f92 <__udivmoddi4+0xfe>
 800111a:	4637      	mov	r7, r6
 800111c:	4630      	mov	r0, r6
 800111e:	e709      	b.n	8000f34 <__udivmoddi4+0xa0>
 8001120:	4607      	mov	r7, r0
 8001122:	e6e7      	b.n	8000ef4 <__udivmoddi4+0x60>
 8001124:	4618      	mov	r0, r3
 8001126:	e6fb      	b.n	8000f20 <__udivmoddi4+0x8c>
 8001128:	4541      	cmp	r1, r8
 800112a:	d2ab      	bcs.n	8001084 <__udivmoddi4+0x1f0>
 800112c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001130:	eb69 020e 	sbc.w	r2, r9, lr
 8001134:	3801      	subs	r0, #1
 8001136:	4613      	mov	r3, r2
 8001138:	e7a4      	b.n	8001084 <__udivmoddi4+0x1f0>
 800113a:	4660      	mov	r0, ip
 800113c:	e7e9      	b.n	8001112 <__udivmoddi4+0x27e>
 800113e:	4618      	mov	r0, r3
 8001140:	e795      	b.n	800106e <__udivmoddi4+0x1da>
 8001142:	4667      	mov	r7, ip
 8001144:	e7d1      	b.n	80010ea <__udivmoddi4+0x256>
 8001146:	4681      	mov	r9, r0
 8001148:	e77c      	b.n	8001044 <__udivmoddi4+0x1b0>
 800114a:	3802      	subs	r0, #2
 800114c:	442c      	add	r4, r5
 800114e:	e747      	b.n	8000fe0 <__udivmoddi4+0x14c>
 8001150:	f1ac 0c02 	sub.w	ip, ip, #2
 8001154:	442b      	add	r3, r5
 8001156:	e72f      	b.n	8000fb8 <__udivmoddi4+0x124>
 8001158:	4638      	mov	r0, r7
 800115a:	e708      	b.n	8000f6e <__udivmoddi4+0xda>
 800115c:	4637      	mov	r7, r6
 800115e:	e6e9      	b.n	8000f34 <__udivmoddi4+0xa0>

08001160 <__aeabi_idiv0>:
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 fd07 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f006 ff4a 	bl	8008030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fd1f 	bl	8001c0a <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 fce7 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004
 8001204:	20000000 	.word	0x20000000

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000004 	.word	0x20000004
 800122c:	20000208 	.word	0x20000208

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000208 	.word	0x20000208

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_Delay+0x40>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e033      	b.n	800130a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f006 fc3c 	bl	8007b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d118      	bne.n	80012fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012d2:	f023 0302 	bic.w	r3, r3, #2
 80012d6:	f043 0202 	orr.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fa92 	bl	8001808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f023 0303 	bic.w	r3, r3, #3
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
 80012fa:	e001      	b.n	8001300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_ADC_Start+0x1a>
 800132a:	2302      	movs	r3, #2
 800132c:	e0a5      	b.n	800147a <HAL_ADC_Start+0x166>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d018      	beq.n	8001376 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001354:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <HAL_ADC_Start+0x174>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a4c      	ldr	r2, [pc, #304]	; (800148c <HAL_ADC_Start+0x178>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9a      	lsrs	r2, r3, #18
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001368:	e002      	b.n	8001370 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3b01      	subs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d179      	bne.n	8001478 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c2:	d106      	bne.n	80013d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f023 0206 	bic.w	r2, r3, #6
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
 80013d0:	e002      	b.n	80013d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_ADC_Start+0x17c>)
 80013e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d12a      	bne.n	8001450 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a25      	ldr	r2, [pc, #148]	; (8001494 <HAL_ADC_Start+0x180>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d015      	beq.n	8001430 <HAL_ADC_Start+0x11c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_ADC_Start+0x184>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d105      	bne.n	800141a <HAL_ADC_Start+0x106>
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_ADC_Start+0x17c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_ADC_Start+0x188>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d129      	bne.n	8001478 <HAL_ADC_Start+0x164>
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_ADC_Start+0x17c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d823      	bhi.n	8001478 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d11c      	bne.n	8001478 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	e013      	b.n	8001478 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_ADC_Start+0x180>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10e      	bne.n	8001478 <HAL_ADC_Start+0x164>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d107      	bne.n	8001478 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001476:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	431bde83 	.word	0x431bde83
 8001490:	40012300 	.word	0x40012300
 8001494:	40012000 	.word	0x40012000
 8001498:	40012100 	.word	0x40012100
 800149c:	40012200 	.word	0x40012200

080014a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014bc:	d113      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014cc:	d10b      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e05c      	b.n	80015a0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014e6:	f7ff fea3 	bl	8001230 <HAL_GetTick>
 80014ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ec:	e01a      	b.n	8001524 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d016      	beq.n	8001524 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <HAL_ADC_PollForConversion+0x6c>
 80014fc:	f7ff fe98 	bl	8001230 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d20b      	bcs.n	8001524 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03d      	b.n	80015a0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d1dd      	bne.n	80014ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f06f 0212 	mvn.w	r2, #18
 800153a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d123      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11f      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001576:	2b00      	cmp	r3, #0
 8001578:	d111      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1c>
 80015dc:	2302      	movs	r3, #2
 80015de:	e105      	b.n	80017ec <HAL_ADC_ConfigChannel+0x228>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d925      	bls.n	800163c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	3b1e      	subs	r3, #30
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68d9      	ldr	r1, [r3, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4403      	add	r3, r0
 800162e:	3b1e      	subs	r3, #30
 8001630:	409a      	lsls	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	e022      	b.n	8001682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	2207      	movs	r2, #7
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6919      	ldr	r1, [r3, #16]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	4603      	mov	r3, r0
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4403      	add	r3, r0
 8001678:	409a      	lsls	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d824      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b05      	subs	r3, #5
 800169c:	221f      	movs	r2, #31
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b05      	subs	r3, #5
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
 80016d2:	e04c      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d824      	bhi.n	8001726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b23      	subs	r3, #35	; 0x23
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b23      	subs	r3, #35	; 0x23
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
 8001724:	e023      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b41      	subs	r3, #65	; 0x41
 8001738:	221f      	movs	r2, #31
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	; 0x41
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_ADC_ConfigChannel+0x234>)
 8001770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d109      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d123      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_ConfigChannel+0x1e6>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b11      	cmp	r3, #17
 80017a8:	d11b      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d111      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_ADC_ConfigChannel+0x23c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_ADC_ConfigChannel+0x240>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	40012000 	.word	0x40012000
 8001800:	20000008 	.word	0x20000008
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff29 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff3e 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff8e 	bl	8001af4 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5d 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff31 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e16b      	b.n	8001f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 815a 	bne.w	8001f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x4a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d123      	bne.n	8001cb6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	69b9      	ldr	r1, [r7, #24]
 8001cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0203 	and.w	r2, r3, #3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00b      	beq.n	8001d0a <HAL_GPIO_Init+0xe6>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cfe:	2b11      	cmp	r3, #17
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80b4 	beq.w	8001f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x310>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x216>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x212>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x20e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x20a>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e00e      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e2e:	2308      	movs	r3, #8
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4934      	ldr	r1, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae90 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3724      	adds	r7, #36	; 0x24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40021c00 	.word	0x40021c00
 8001f54:	40013c00 	.word	0x40013c00

08001f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa4:	e003      	b.n	8001fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e22d      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fda:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b99      	ldr	r3, [pc, #612]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e208      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a90      	ldr	r2, [pc, #576]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b84      	ldr	r3, [pc, #528]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f8dc 	bl	8001230 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f8d8 	bl	8001230 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1cd      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f8c8 	bl	8001230 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f8c4 	bl	8001230 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1b9      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e18d      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4952      	ldr	r1, [pc, #328]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f87d 	bl	8001230 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f879 	bl	8001230 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e16e      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4940      	ldr	r1, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f85c 	bl	8001230 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff f858 	bl	8001230 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e14d      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff f83c 	bl	8001230 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f838 	bl	8001230 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e12d      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e015      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff f825 	bl	8001230 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff f821 	bl	8001230 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e116      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a0 	beq.w	8002356 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d121      	bne.n	8002296 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe ffe7 	bl	8001230 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e011      	b.n	800228a <HAL_RCC_OscConfig+0x2ce>
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
 8002274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe ffda 	bl	8001230 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0cf      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x2f0>
 800229e:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a65      	ldr	r2, [pc, #404]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x312>
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a5f      	ldr	r2, [pc, #380]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a59      	ldr	r2, [pc, #356]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe ff9f 	bl	8001230 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe ff9b 	bl	8001230 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e08e      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x33a>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe ff89 	bl	8001230 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe ff85 	bl	8001230 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e078      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d064      	beq.n	8002428 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d05c      	beq.n	8002424 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d141      	bne.n	80023f6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCC_OscConfig+0x480>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe ff5a 	bl	8001230 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe ff56 	bl	8001230 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e04b      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	3b01      	subs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	491d      	ldr	r1, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_OscConfig+0x480>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe ff2f 	bl	8001230 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe ff2b 	bl	8001230 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e020      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x41a>
 80023f4:	e018      	b.n	8002428 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_RCC_OscConfig+0x480>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff18 	bl	8001230 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe ff14 	bl	8001230 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e009      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_OscConfig+0x47c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x448>
 8002422:	e001      	b.n	8002428 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000
 8002438:	40023800 	.word	0x40023800
 800243c:	42470060 	.word	0x42470060

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0ca      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d90c      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b62      	ldr	r3, [pc, #392]	; (80025f4 <HAL_RCC_ClockConfig+0x1b4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b6      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b4f      	ldr	r3, [pc, #316]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494c      	ldr	r1, [pc, #304]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d044      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07d      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06d      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e065      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4933      	ldr	r1, [pc, #204]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fe7e 	bl	8001230 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fe7a 	bl	8001230 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04d      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d20c      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e030      	b.n	80025ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4915      	ldr	r1, [pc, #84]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490d      	ldr	r1, [pc, #52]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f81d 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025ca:	4601      	mov	r1, r0
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	fa21 f303 	lsr.w	r3, r1, r3
 80025de:	4a08      	ldr	r2, [pc, #32]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fde0 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	0800b7b8 	.word	0x0800b7b8
 8002600:	20000008 	.word	0x20000008

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_GetSysClockFreq+0x158>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d007      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x32>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d008      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x38>
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 808d 	bne.w	800274a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002632:	60bb      	str	r3, [r7, #8]
       break;
 8002634:	e08c      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002636:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_RCC_GetSysClockFreq+0x160>)
 8002638:	60bb      	str	r3, [r7, #8]
      break;
 800263a:	e089      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_GetSysClockFreq+0x158>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002644:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002646:	4b45      	ldr	r3, [pc, #276]	; (800275c <HAL_RCC_GetSysClockFreq+0x158>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d023      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <HAL_RCC_GetSysClockFreq+0x158>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	099b      	lsrs	r3, r3, #6
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	ea03 0501 	and.w	r5, r3, r1
 8002668:	ea04 0602 	and.w	r6, r4, r2
 800266c:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <HAL_RCC_GetSysClockFreq+0x160>)
 800266e:	fb02 f106 	mul.w	r1, r2, r6
 8002672:	2200      	movs	r2, #0
 8002674:	fb02 f205 	mul.w	r2, r2, r5
 8002678:	440a      	add	r2, r1
 800267a:	493a      	ldr	r1, [pc, #232]	; (8002764 <HAL_RCC_GetSysClockFreq+0x160>)
 800267c:	fba5 0101 	umull	r0, r1, r5, r1
 8002680:	1853      	adds	r3, r2, r1
 8002682:	4619      	mov	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	461a      	mov	r2, r3
 800268c:	4623      	mov	r3, r4
 800268e:	f7fe fbe9 	bl	8000e64 <__aeabi_uldivmod>
 8002692:	4603      	mov	r3, r0
 8002694:	460c      	mov	r4, r1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e049      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_GetSysClockFreq+0x158>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	f04f 0400 	mov.w	r4, #0
 80026a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	ea03 0501 	and.w	r5, r3, r1
 80026b0:	ea04 0602 	and.w	r6, r4, r2
 80026b4:	4629      	mov	r1, r5
 80026b6:	4632      	mov	r2, r6
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	0154      	lsls	r4, r2, #5
 80026c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026c6:	014b      	lsls	r3, r1, #5
 80026c8:	4619      	mov	r1, r3
 80026ca:	4622      	mov	r2, r4
 80026cc:	1b49      	subs	r1, r1, r5
 80026ce:	eb62 0206 	sbc.w	r2, r2, r6
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	f04f 0400 	mov.w	r4, #0
 80026da:	0194      	lsls	r4, r2, #6
 80026dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026e0:	018b      	lsls	r3, r1, #6
 80026e2:	1a5b      	subs	r3, r3, r1
 80026e4:	eb64 0402 	sbc.w	r4, r4, r2
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	00e2      	lsls	r2, r4, #3
 80026f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026f6:	00d9      	lsls	r1, r3, #3
 80026f8:	460b      	mov	r3, r1
 80026fa:	4614      	mov	r4, r2
 80026fc:	195b      	adds	r3, r3, r5
 80026fe:	eb44 0406 	adc.w	r4, r4, r6
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	02a2      	lsls	r2, r4, #10
 800270c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002710:	0299      	lsls	r1, r3, #10
 8002712:	460b      	mov	r3, r1
 8002714:	4614      	mov	r4, r2
 8002716:	4618      	mov	r0, r3
 8002718:	4621      	mov	r1, r4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f04f 0400 	mov.w	r4, #0
 8002720:	461a      	mov	r2, r3
 8002722:	4623      	mov	r3, r4
 8002724:	f7fe fb9e 	bl	8000e64 <__aeabi_uldivmod>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x158>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	3301      	adds	r3, #1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	60bb      	str	r3, [r7, #8]
      break;
 8002748:	e002      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x15c>)
 800274c:	60bb      	str	r3, [r7, #8]
      break;
 800274e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002750:	68bb      	ldr	r3, [r7, #8]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	017d7840 	.word	0x017d7840

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000008 	.word	0x20000008

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4601      	mov	r1, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	0800b7c8 	.word	0x0800b7c8

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4601      	mov	r1, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800b7c8 	.word	0x0800b7c8

080027d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e056      	b.n	8002890 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f005 fb79 	bl	8007ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002818:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	ea42 0103 	orr.w	r1, r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	f003 0104 	and.w	r1, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028a6:	2301      	movs	r3, #1
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_SPI_TransmitReceive+0x26>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e18a      	b.n	8002bd4 <HAL_SPI_TransmitReceive+0x33c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028c6:	f7fe fcb3 	bl	8001230 <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00f      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x70>
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ee:	d107      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x68>
 80028f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d003      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002900:	2302      	movs	r3, #2
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002906:	e15b      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_SPI_TransmitReceive+0x82>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_SPI_TransmitReceive+0x82>
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002920:	e14e      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b04      	cmp	r3, #4
 800292c:	d003      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2205      	movs	r2, #5
 8002932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	887a      	ldrh	r2, [r7, #2]
 800295e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d007      	beq.n	800298a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002992:	d178      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0x10a>
 800299c:	8b7b      	ldrh	r3, [r7, #26]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d166      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c6:	e053      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d11b      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x176>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x176>
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d113      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d119      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x1b8>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d014      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	b292      	uxth	r2, r2
 8002a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a50:	f7fe fbee 	bl	8001230 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d807      	bhi.n	8002a70 <HAL_SPI_TransmitReceive+0x1d8>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d003      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a6e:	e0a7      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1a6      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x130>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1a1      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x130>
 8002a84:	e07c      	b.n	8002b80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x1fc>
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d16b      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aba:	e057      	b.n	8002b6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d11c      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x26c>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_SPI_TransmitReceive+0x26c>
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d114      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d119      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x2ae>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d014      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b42:	2301      	movs	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b46:	f7fe fb73 	bl	8001230 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d803      	bhi.n	8002b5e <HAL_SPI_TransmitReceive+0x2c6>
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d102      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x2cc>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b6a:	e029      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1a2      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x224>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d19d      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f893 	bl	8002cb0 <SPI_EndRxTxTransaction>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b9c:	e010      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	e000      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002bbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bec:	e04c      	b.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d048      	beq.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bf6:	f7fe fb1b 	bl	8001230 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d902      	bls.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d13d      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c24:	d111      	bne.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2e:	d004      	beq.n	8002c3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c38:	d107      	bne.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	d10f      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e00f      	b.n	8002ca8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d1a3      	bne.n	8002bee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <SPI_EndRxTxTransaction+0x7c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <SPI_EndRxTxTransaction+0x80>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0d5b      	lsrs	r3, r3, #21
 8002cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cda:	d112      	bne.n	8002d02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff ff78 	bl	8002bdc <SPI_WaitFlagStateUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00f      	b.n	8002d22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d0f2      	beq.n	8002d02 <SPI_EndRxTxTransaction+0x52>
 8002d1c:	e000      	b.n	8002d20 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d1e:	bf00      	nop
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	165e9f81 	.word	0x165e9f81

08002d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e01d      	b.n	8002d82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f005 fd72 	bl	8008844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f000 fcd8 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d007      	beq.n	8002dbc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_TIM_Base_Stop+0x40>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	f240 4344 	movw	r3, #1092	; 0x444
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_TIM_Base_Stop+0x40>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e01d      	b.n	8002e76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f005 fdee 	bl	8008a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fc5e 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 ff32 	bl	8003cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_TIM_PWM_Start+0x74>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_TIM_PWM_Start+0x2c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIM_PWM_Start+0x78>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x30>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d007      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fef4 	bl	8003cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_TIM_PWM_Stop+0xa8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_TIM_PWM_Stop+0x2c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_TIM_PWM_Stop+0xac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_PWM_Stop+0x30>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_TIM_PWM_Stop+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_TIM_PWM_Stop+0x66>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	f240 4344 	movw	r3, #1092	; 0x444
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_TIM_PWM_Stop+0x66>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_TIM_PWM_Stop+0x96>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	f240 4344 	movw	r3, #1092	; 0x444
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_TIM_PWM_Stop+0x96>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e083      	b.n	80030c8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f005 fcad 	bl	8008934 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ff0:	f023 0307 	bic.w	r3, r3, #7
 8002ff4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f000 fb91 	bl	8003728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	4313      	orrs	r3, r2
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800304c:	f023 030c 	bic.w	r3, r3, #12
 8003050:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4313      	orrs	r3, r2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	011a      	lsls	r2, r3, #4
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	031b      	lsls	r3, r3, #12
 800307c:	4313      	orrs	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003092:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4313      	orrs	r3, r2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_TIM_Encoder_Start+0x16>
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d008      	beq.n	80030f6 <HAL_TIM_Encoder_Start+0x26>
 80030e4:	e00f      	b.n	8003106 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fe04 	bl	8003cfc <TIM_CCxChannelCmd>
      break;
 80030f4:	e016      	b.n	8003124 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	2104      	movs	r1, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fdfc 	bl	8003cfc <TIM_CCxChannelCmd>
      break;
 8003104:	e00e      	b.n	8003124 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fdf4 	bl	8003cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	2104      	movs	r1, #4
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fded 	bl	8003cfc <TIM_CCxChannelCmd>
      break;
 8003122:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_TIM_Encoder_Stop+0x16>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d008      	beq.n	8003164 <HAL_TIM_Encoder_Stop+0x26>
 8003152:	e00f      	b.n	8003174 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2200      	movs	r2, #0
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fdcd 	bl	8003cfc <TIM_CCxChannelCmd>
      break;
 8003162:	e016      	b.n	8003192 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	2104      	movs	r1, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fdc5 	bl	8003cfc <TIM_CCxChannelCmd>
      break;
 8003172:	e00e      	b.n	8003192 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2200      	movs	r2, #0
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fdbd 	bl	8003cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	2104      	movs	r1, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fdb6 	bl	8003cfc <TIM_CCxChannelCmd>
      break;
 8003190:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	f241 1311 	movw	r3, #4369	; 0x1111
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_TIM_Encoder_Stop+0x84>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	f240 4344 	movw	r3, #1092	; 0x444
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_Encoder_Stop+0x84>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0202 	mvn.w	r2, #2
 80031f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa6b 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa5d 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fa6e 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0204 	mvn.w	r2, #4
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa41 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa33 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa44 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0208 	mvn.w	r2, #8
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa17 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa09 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa1a 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0210 	mvn.w	r2, #16
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2208      	movs	r2, #8
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9ed 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f9df 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f9f0 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10e      	bne.n	8003350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0201 	mvn.w	r2, #1
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f002 fc0a 	bl	8005b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d10e      	bne.n	800337c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d107      	bne.n	800337c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fd86 	bl	8003e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d107      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f9b5 	bl	8003712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d10e      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d107      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0220 	mvn.w	r2, #32
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fd50 	bl	8003e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0b4      	b.n	8003560 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	f200 809f 	bhi.w	800354c <HAL_TIM_PWM_ConfigChannel+0x170>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003449 	.word	0x08003449
 8003418:	0800354d 	.word	0x0800354d
 800341c:	0800354d 	.word	0x0800354d
 8003420:	0800354d 	.word	0x0800354d
 8003424:	08003489 	.word	0x08003489
 8003428:	0800354d 	.word	0x0800354d
 800342c:	0800354d 	.word	0x0800354d
 8003430:	0800354d 	.word	0x0800354d
 8003434:	080034cb 	.word	0x080034cb
 8003438:	0800354d 	.word	0x0800354d
 800343c:	0800354d 	.word	0x0800354d
 8003440:	0800354d 	.word	0x0800354d
 8003444:	0800350b 	.word	0x0800350b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa0a 	bl	8003868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0208 	orr.w	r2, r2, #8
 8003462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0204 	bic.w	r2, r2, #4
 8003472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6999      	ldr	r1, [r3, #24]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	619a      	str	r2, [r3, #24]
      break;
 8003486:	e062      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa5a 	bl	8003948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6999      	ldr	r1, [r3, #24]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]
      break;
 80034c8:	e041      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 faaf 	bl	8003a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0208 	orr.w	r2, r2, #8
 80034e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0204 	bic.w	r2, r2, #4
 80034f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69d9      	ldr	r1, [r3, #28]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	61da      	str	r2, [r3, #28]
      break;
 8003508:	e021      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fb03 	bl	8003b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69d9      	ldr	r1, [r3, #28]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	61da      	str	r2, [r3, #28]
      break;
 800354a:	e000      	b.n	800354e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800354c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIM_ConfigClockSource+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e0a6      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x166>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800359e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d067      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x120>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d80b      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x6c>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d073      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x140>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d802      	bhi.n	80035ca <HAL_TIM_ConfigClockSource+0x62>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d06f      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035c8:	e078      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d06c      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x140>
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d06a      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035d2:	e073      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035d4:	2b70      	cmp	r3, #112	; 0x70
 80035d6:	d00d      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0x8c>
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d804      	bhi.n	80035e6 <HAL_TIM_ConfigClockSource+0x7e>
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d033      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0xe0>
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d041      	beq.n	8003668 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035e4:	e06a      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d066      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x152>
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f0:	d017      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035f2:	e063      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 fb5a 	bl	8003cbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003616:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	609a      	str	r2, [r3, #8]
      break;
 8003620:	e04c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f000 fb43 	bl	8003cbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003644:	609a      	str	r2, [r3, #8]
      break;
 8003646:	e039      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	461a      	mov	r2, r3
 8003656:	f000 fab7 	bl	8003bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2150      	movs	r1, #80	; 0x50
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fb10 	bl	8003c86 <TIM_ITRx_SetConfig>
      break;
 8003666:	e029      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	461a      	mov	r2, r3
 8003676:	f000 fad6 	bl	8003c26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2160      	movs	r1, #96	; 0x60
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fb00 	bl	8003c86 <TIM_ITRx_SetConfig>
      break;
 8003686:	e019      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	461a      	mov	r2, r3
 8003696:	f000 fa97 	bl	8003bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 faf0 	bl	8003c86 <TIM_ITRx_SetConfig>
      break;
 80036a6:	e009      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fae7 	bl	8003c86 <TIM_ITRx_SetConfig>
      break;
 80036b8:	e000      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a40      	ldr	r2, [pc, #256]	; (800383c <TIM_Base_SetConfig+0x114>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d00f      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <TIM_Base_SetConfig+0x118>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <TIM_Base_SetConfig+0x11c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <TIM_Base_SetConfig+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3a      	ldr	r2, [pc, #232]	; (800384c <TIM_Base_SetConfig+0x124>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2f      	ldr	r2, [pc, #188]	; (800383c <TIM_Base_SetConfig+0x114>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d02b      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d027      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <TIM_Base_SetConfig+0x118>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d023      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <TIM_Base_SetConfig+0x11c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <TIM_Base_SetConfig+0x120>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01b      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <TIM_Base_SetConfig+0x124>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d017      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <TIM_Base_SetConfig+0x128>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <TIM_Base_SetConfig+0x12c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00f      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <TIM_Base_SetConfig+0x130>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <TIM_Base_SetConfig+0x134>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a24      	ldr	r2, [pc, #144]	; (8003860 <TIM_Base_SetConfig+0x138>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <TIM_Base_SetConfig+0x13c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <TIM_Base_SetConfig+0x114>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0xf8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <TIM_Base_SetConfig+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40010400 	.word	0x40010400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800
 800385c:	40001800 	.word	0x40001800
 8003860:	40001c00 	.word	0x40001c00
 8003864:	40002000 	.word	0x40002000

08003868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 0302 	bic.w	r3, r3, #2
 80038b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a20      	ldr	r2, [pc, #128]	; (8003940 <TIM_OC1_SetConfig+0xd8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_OC1_SetConfig+0x64>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <TIM_OC1_SetConfig+0xdc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10c      	bne.n	80038e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0308 	bic.w	r3, r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a15      	ldr	r2, [pc, #84]	; (8003940 <TIM_OC1_SetConfig+0xd8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_OC1_SetConfig+0x8e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <TIM_OC1_SetConfig+0xdc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d111      	bne.n	800391a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40010000 	.word	0x40010000
 8003944:	40010400 	.word	0x40010400

08003948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0210 	bic.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <TIM_OC2_SetConfig+0xe4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_OC2_SetConfig+0x68>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <TIM_OC2_SetConfig+0xe8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10d      	bne.n	80039cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <TIM_OC2_SetConfig+0xe4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_OC2_SetConfig+0x94>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <TIM_OC2_SetConfig+0xe8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40010400 	.word	0x40010400

08003a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <TIM_OC3_SetConfig+0xe0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_OC3_SetConfig+0x66>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <TIM_OC3_SetConfig+0xe4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10d      	bne.n	8003ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <TIM_OC3_SetConfig+0xe0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_OC3_SetConfig+0x92>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <TIM_OC3_SetConfig+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d113      	bne.n	8003aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40010400 	.word	0x40010400

08003b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <TIM_OC4_SetConfig+0xa4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_OC4_SetConfig+0x68>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <TIM_OC4_SetConfig+0xa8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d109      	bne.n	8003b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	019b      	lsls	r3, r3, #6
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0201 	bic.w	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 030a 	bic.w	r3, r3, #10
 8003c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b087      	sub	sp, #28
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0210 	bic.w	r2, r3, #16
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	031b      	lsls	r3, r3, #12
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f043 0307 	orr.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	021a      	lsls	r2, r3, #8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2201      	movs	r2, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	401a      	ands	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e032      	b.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d96:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e03d      	b.n	8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e03f      	b.n	8003f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f004 feb0 	bl	8008c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f90b 	bl	80040fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b088      	sub	sp, #32
 8003f3a:	af02      	add	r7, sp, #8
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 8083 	bne.w	800405e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Transmit+0x2e>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e07b      	b.n	8004060 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Transmit+0x40>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e074      	b.n	8004060 <HAL_UART_Transmit+0x12a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2221      	movs	r2, #33	; 0x21
 8003f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd f950 	bl	8001230 <HAL_GetTick>
 8003f90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f9e:	e042      	b.n	8004026 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d122      	bne.n	8003ffe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f850 	bl	8004068 <UART_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e046      	b.n	8004060 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	e017      	b.n	8004026 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	e013      	b.n	8004026 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f82d 	bl	8004068 <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e023      	b.n	8004060 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	60ba      	str	r2, [r7, #8]
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1b7      	bne.n	8003fa0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2200      	movs	r2, #0
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f814 	bl	8004068 <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00a      	b.n	8004060 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004078:	e02c      	b.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d028      	beq.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <UART_WaitOnFlagUntilTimeout+0x30>
 8004088:	f7fd f8d2 	bl	8001230 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	429a      	cmp	r2, r3
 8004096:	d21d      	bcs.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e00f      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d0c3      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040fc:	b5b0      	push	{r4, r5, r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800413c:	f023 030c 	bic.w	r3, r3, #12
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	430b      	orrs	r3, r1
 8004148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	f040 80e4 	bne.w	8004334 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4aab      	ldr	r2, [pc, #684]	; (8004420 <UART_SetConfig+0x324>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <UART_SetConfig+0x84>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4aaa      	ldr	r2, [pc, #680]	; (8004424 <UART_SetConfig+0x328>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d16c      	bne.n	800425a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004180:	f7fe fb12 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8004184:	4602      	mov	r2, r0
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009a      	lsls	r2, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	4aa3      	ldr	r2, [pc, #652]	; (8004428 <UART_SetConfig+0x32c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	011c      	lsls	r4, r3, #4
 80041a4:	f7fe fb00 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80041be:	f7fe faf3 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	4a93      	ldr	r2, [pc, #588]	; (8004428 <UART_SetConfig+0x32c>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2264      	movs	r2, #100	; 0x64
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	1aeb      	subs	r3, r5, r3
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a8e      	ldr	r2, [pc, #568]	; (8004428 <UART_SetConfig+0x32c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041fa:	441c      	add	r4, r3
 80041fc:	f7fe fad4 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8004200:	4602      	mov	r2, r0
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009a      	lsls	r2, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fbb2 f5f3 	udiv	r5, r2, r3
 8004216:	f7fe fac7 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 800421a:	4602      	mov	r2, r0
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009a      	lsls	r2, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	4a7d      	ldr	r2, [pc, #500]	; (8004428 <UART_SetConfig+0x32c>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2264      	movs	r2, #100	; 0x64
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	1aeb      	subs	r3, r5, r3
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a78      	ldr	r2, [pc, #480]	; (8004428 <UART_SetConfig+0x32c>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 0207 	and.w	r2, r3, #7
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4422      	add	r2, r4
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	e154      	b.n	8004504 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800425a:	f7fe fa91 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800425e:	4602      	mov	r2, r0
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	4a6c      	ldr	r2, [pc, #432]	; (8004428 <UART_SetConfig+0x32c>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011c      	lsls	r4, r3, #4
 800427e:	f7fe fa7f 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004282:	4602      	mov	r2, r0
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	fbb2 f5f3 	udiv	r5, r2, r3
 8004298:	f7fe fa72 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800429c:	4602      	mov	r2, r0
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009a      	lsls	r2, r3, #2
 80042a6:	441a      	add	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	4a5d      	ldr	r2, [pc, #372]	; (8004428 <UART_SetConfig+0x32c>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2264      	movs	r2, #100	; 0x64
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	1aeb      	subs	r3, r5, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a58      	ldr	r2, [pc, #352]	; (8004428 <UART_SetConfig+0x32c>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d4:	441c      	add	r4, r3
 80042d6:	f7fe fa53 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80042f0:	f7fe fa46 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009a      	lsls	r2, r3, #2
 80042fe:	441a      	add	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	4a47      	ldr	r2, [pc, #284]	; (8004428 <UART_SetConfig+0x32c>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	2264      	movs	r2, #100	; 0x64
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	1aeb      	subs	r3, r5, r3
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	3332      	adds	r3, #50	; 0x32
 800431e:	4a42      	ldr	r2, [pc, #264]	; (8004428 <UART_SetConfig+0x32c>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	f003 0207 	and.w	r2, r3, #7
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4422      	add	r2, r4
 8004330:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004332:	e0e7      	b.n	8004504 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a39      	ldr	r2, [pc, #228]	; (8004420 <UART_SetConfig+0x324>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <UART_SetConfig+0x24c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a38      	ldr	r2, [pc, #224]	; (8004424 <UART_SetConfig+0x328>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d171      	bne.n	800442c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004348:	f7fe fa2e 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 800434c:	4602      	mov	r2, r0
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009a      	lsls	r2, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	4a31      	ldr	r2, [pc, #196]	; (8004428 <UART_SetConfig+0x32c>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	011c      	lsls	r4, r3, #4
 800436c:	f7fe fa1c 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8004370:	4602      	mov	r2, r0
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009a      	lsls	r2, r3, #2
 800437a:	441a      	add	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	fbb2 f5f3 	udiv	r5, r2, r3
 8004386:	f7fe fa0f 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 800438a:	4602      	mov	r2, r0
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	4a21      	ldr	r2, [pc, #132]	; (8004428 <UART_SetConfig+0x32c>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2264      	movs	r2, #100	; 0x64
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	1aeb      	subs	r3, r5, r3
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	3332      	adds	r3, #50	; 0x32
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <UART_SetConfig+0x32c>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c0:	441c      	add	r4, r3
 80043c2:	f7fe f9f1 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009a      	lsls	r2, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80043dc:	f7fe f9e4 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009a      	lsls	r2, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <UART_SetConfig+0x32c>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	2264      	movs	r2, #100	; 0x64
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	1aeb      	subs	r3, r5, r3
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	3332      	adds	r3, #50	; 0x32
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <UART_SetConfig+0x32c>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4422      	add	r2, r4
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	e071      	b.n	8004504 <UART_SetConfig+0x408>
 8004420:	40011000 	.word	0x40011000
 8004424:	40011400 	.word	0x40011400
 8004428:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800442c:	f7fe f9a8 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004430:	4602      	mov	r2, r0
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009a      	lsls	r2, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	4a31      	ldr	r2, [pc, #196]	; (800450c <UART_SetConfig+0x410>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	011c      	lsls	r4, r3, #4
 8004450:	f7fe f996 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004454:	4602      	mov	r2, r0
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009a      	lsls	r2, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	fbb2 f5f3 	udiv	r5, r2, r3
 800446a:	f7fe f989 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800446e:	4602      	mov	r2, r0
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	4a21      	ldr	r2, [pc, #132]	; (800450c <UART_SetConfig+0x410>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2264      	movs	r2, #100	; 0x64
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	1aeb      	subs	r3, r5, r3
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	3332      	adds	r3, #50	; 0x32
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <UART_SetConfig+0x410>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a4:	441c      	add	r4, r3
 80044a6:	f7fe f96b 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80044aa:	4602      	mov	r2, r0
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80044c0:	f7fe f95e 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009a      	lsls	r2, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	4a0c      	ldr	r2, [pc, #48]	; (800450c <UART_SetConfig+0x410>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2264      	movs	r2, #100	; 0x64
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	1aeb      	subs	r3, r5, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a07      	ldr	r2, [pc, #28]	; (800450c <UART_SetConfig+0x410>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4422      	add	r2, r4
 8004500:	609a      	str	r2, [r3, #8]
}
 8004502:	e7ff      	b.n	8004504 <UART_SetConfig+0x408>
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bdb0      	pop	{r4, r5, r7, pc}
 800450c:	51eb851f 	.word	0x51eb851f

08004510 <ms_wait>:
//	ミリ秒待機する
// 引数1：ms・・・待機時間[ミリ秒]
// 戻り値：無し
//+++++++++++++++++++++++++++++++++++++++++++++++
void ms_wait(unsigned int ms)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7fc fe95 	bl	8001248 <HAL_Delay>
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <ModeSelect>:
//	モードセレクトを行う
// 引数1：mode・・・モード番号を格納する変数のアドレス
// 戻り値：無し
//+++++++++++++++++++++++++++++++++++++++++++++++
void ModeSelect(uint8_t *mode)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	uint16_t encR,encL;
	uint16_t nowR = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	82fb      	strh	r3, [r7, #22]
	uint16_t nowL = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	82bb      	strh	r3, [r7, #20]
	uint16_t preR;

	*mode = 0x00;									//変数の初期化
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
	TIM3->CNT = 0;
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <ModeSelect+0xf0>)
 8004540:	2200      	movs	r2, #0
 8004542:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8004544:	4b35      	ldr	r3, [pc, #212]	; (800461c <ModeSelect+0xf4>)
 8004546:	2200      	movs	r2, #0
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

	//====Show Mode====
	printf(" mode: 0\r");						//モードをUARTで送信
 800454a:	4835      	ldr	r0, [pc, #212]	; (8004620 <ModeSelect+0xf8>)
 800454c:	f005 f86c 	bl	8009628 <iprintf>

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8004550:	213c      	movs	r1, #60	; 0x3c
 8004552:	4834      	ldr	r0, [pc, #208]	; (8004624 <ModeSelect+0xfc>)
 8004554:	f7fe fdbc 	bl	80030d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8004558:	213c      	movs	r1, #60	; 0x3c
 800455a:	4833      	ldr	r0, [pc, #204]	; (8004628 <ModeSelect+0x100>)
 800455c:	f7fe fdb8 	bl	80030d0 <HAL_TIM_Encoder_Start>

	//====Mode Select do====
	do{
		preR = nowR;
 8004560:	8afb      	ldrh	r3, [r7, #22]
 8004562:	827b      	strh	r3, [r7, #18]
		//preL = nowL;

		encL = TIM3->CNT;
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <ModeSelect+0xf0>)
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	823b      	strh	r3, [r7, #16]
		encR = TIM4->CNT;
 800456a:	4b2c      	ldr	r3, [pc, #176]	; (800461c <ModeSelect+0xf4>)
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	81fb      	strh	r3, [r7, #14]

		nowR = (uint16_t)(encR / 4300);
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <ModeSelect+0x104>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	0b1b      	lsrs	r3, r3, #12
 800457a:	82fb      	strh	r3, [r7, #22]
		nowL = (uint16_t)(encL / 30000);
 800457c:	8a3b      	ldrh	r3, [r7, #16]
 800457e:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <ModeSelect+0x108>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	0b5b      	lsrs	r3, r3, #13
 8004586:	82bb      	strh	r3, [r7, #20]

		//ms_wait(50);
		 *mode = nowR;
 8004588:	8afb      	ldrh	r3, [r7, #22]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	701a      	strb	r2, [r3, #0]
		//LEDで現在の値を表示
		LedDisplay(mode);			//LEDがActiveLowの場合
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 fb99 	bl	8005cc8 <LedDisplay>
		if(nowR - preR != 0){
 8004596:	8afa      	ldrh	r2, [r7, #22]
 8004598:	8a7b      	ldrh	r3, [r7, #18]
 800459a:	429a      	cmp	r2, r3
 800459c:	d012      	beq.n	80045c4 <ModeSelect+0x9c>
			printf(" mode:%2d\r\n", *mode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	4823      	ldr	r0, [pc, #140]	; (8004634 <ModeSelect+0x10c>)
 80045a6:	f005 f83f 	bl	8009628 <iprintf>
			Melody(c6 + (60 * *mode),100);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	f203 4316 	addw	r3, r3, #1046	; 0x416
 80045bc:	2164      	movs	r1, #100	; 0x64
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f8c2 	bl	8004748 <Melody>
		}
	}while(nowL != 1);
 80045c4:	8abb      	ldrh	r3, [r7, #20]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d1ca      	bne.n	8004560 <ModeSelect+0x38>

	printf("Finish :  This is mode %2d\r\n", *mode);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	4619      	mov	r1, r3
 80045d0:	4819      	ldr	r0, [pc, #100]	; (8004638 <ModeSelect+0x110>)
 80045d2:	f005 f829 	bl	8009628 <iprintf>
	Melody(c6 + + (60 * *mode),500);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	f203 4316 	addw	r3, r3, #1046	; 0x416
 80045e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f8ab 	bl	8004748 <Melody>

	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 80045f2:	213c      	movs	r1, #60	; 0x3c
 80045f4:	480b      	ldr	r0, [pc, #44]	; (8004624 <ModeSelect+0xfc>)
 80045f6:	f7fe fda2 	bl	800313e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 80045fa:	213c      	movs	r1, #60	; 0x3c
 80045fc:	480a      	ldr	r0, [pc, #40]	; (8004628 <ModeSelect+0x100>)
 80045fe:	f7fe fd9e 	bl	800313e <HAL_TIM_Encoder_Stop>

	TIM3->CNT = 0;
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <ModeSelect+0xf0>)
 8004604:	2200      	movs	r2, #0
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8004608:	4b04      	ldr	r3, [pc, #16]	; (800461c <ModeSelect+0xf4>)
 800460a:	2200      	movs	r2, #0
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	0800b610 	.word	0x0800b610
 8004624:	200007f4 	.word	0x200007f4
 8004628:	200007b4 	.word	0x200007b4
 800462c:	f3dad9a9 	.word	0xf3dad9a9
 8004630:	45e7b273 	.word	0x45e7b273
 8004634:	0800b61c 	.word	0x0800b61c
 8004638:	0800b628 	.word	0x0800b628

0800463c <MelodySummer>:

void MelodySummer(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
	Melody(g6,100);
 8004640:	2164      	movs	r1, #100	; 0x64
 8004642:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8004646:	f000 f87f 	bl	8004748 <Melody>
	Melody(c7,100);
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	f640 002d 	movw	r0, #2093	; 0x82d
 8004650:	f000 f87a 	bl	8004748 <Melody>
	Melody(d7,100);
 8004654:	2164      	movs	r1, #100	; 0x64
 8004656:	f640 102d 	movw	r0, #2349	; 0x92d
 800465a:	f000 f875 	bl	8004748 <Melody>
	Melody(e7,100);
 800465e:	2164      	movs	r1, #100	; 0x64
 8004660:	f640 204d 	movw	r0, #2637	; 0xa4d
 8004664:	f000 f870 	bl	8004748 <Melody>
	Melody(d7,100);
 8004668:	2164      	movs	r1, #100	; 0x64
 800466a:	f640 102d 	movw	r0, #2349	; 0x92d
 800466e:	f000 f86b 	bl	8004748 <Melody>
	HAL_Delay(50);
 8004672:	2032      	movs	r0, #50	; 0x32
 8004674:	f7fc fde8 	bl	8001248 <HAL_Delay>
	Melody(c7,50);
 8004678:	2132      	movs	r1, #50	; 0x32
 800467a:	f640 002d 	movw	r0, #2093	; 0x82d
 800467e:	f000 f863 	bl	8004748 <Melody>
	HAL_Delay(50);
 8004682:	2032      	movs	r0, #50	; 0x32
 8004684:	f7fc fde0 	bl	8001248 <HAL_Delay>
	Melody(c7,200);
 8004688:	21c8      	movs	r1, #200	; 0xc8
 800468a:	f640 002d 	movw	r0, #2093	; 0x82d
 800468e:	f000 f85b 	bl	8004748 <Melody>
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}

08004696 <MelodyMrLawrence>:

void MelodyMrLawrence()
{
 8004696:	b580      	push	{r7, lr}
 8004698:	af00      	add	r7, sp, #0
	Melody(d7,100);
 800469a:	2164      	movs	r1, #100	; 0x64
 800469c:	f640 102d 	movw	r0, #2349	; 0x92d
 80046a0:	f000 f852 	bl	8004748 <Melody>
	Melody(e7,100);
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	f640 204d 	movw	r0, #2637	; 0xa4d
 80046aa:	f000 f84d 	bl	8004748 <Melody>
	Melody(d7,100);
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	f640 102d 	movw	r0, #2349	; 0x92d
 80046b4:	f000 f848 	bl	8004748 <Melody>
	Melody(a6,100);
 80046b8:	2164      	movs	r1, #100	; 0x64
 80046ba:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80046be:	f000 f843 	bl	8004748 <Melody>
	Melody(d7,100);
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	f640 102d 	movw	r0, #2349	; 0x92d
 80046c8:	f000 f83e 	bl	8004748 <Melody>

	HAL_Delay(400);
 80046cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80046d0:	f7fc fdba 	bl	8001248 <HAL_Delay>

	Melody(d7,100);
 80046d4:	2164      	movs	r1, #100	; 0x64
 80046d6:	f640 102d 	movw	r0, #2349	; 0x92d
 80046da:	f000 f835 	bl	8004748 <Melody>
	Melody(e7,100);
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	f640 204d 	movw	r0, #2637	; 0xa4d
 80046e4:	f000 f830 	bl	8004748 <Melody>
	Melody(d7,100);
 80046e8:	2164      	movs	r1, #100	; 0x64
 80046ea:	f640 102d 	movw	r0, #2349	; 0x92d
 80046ee:	f000 f82b 	bl	8004748 <Melody>
	Melody(e6,100);
 80046f2:	2164      	movs	r1, #100	; 0x64
 80046f4:	f240 5026 	movw	r0, #1318	; 0x526
 80046f8:	f000 f826 	bl	8004748 <Melody>
	Melody(g7,100);
 80046fc:	2164      	movs	r1, #100	; 0x64
 80046fe:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8004702:	f000 f821 	bl	8004748 <Melody>
	Melody(e6,100);
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	f240 5026 	movw	r0, #1318	; 0x526
 800470c:	f000 f81c 	bl	8004748 <Melody>
	Melody(d7,100);
 8004710:	2164      	movs	r1, #100	; 0x64
 8004712:	f640 102d 	movw	r0, #2349	; 0x92d
 8004716:	f000 f817 	bl	8004748 <Melody>
	Melody(e7,100);
 800471a:	2164      	movs	r1, #100	; 0x64
 800471c:	f640 204d 	movw	r0, #2637	; 0xa4d
 8004720:	f000 f812 	bl	8004748 <Melody>
	Melody(d7,100);
 8004724:	2164      	movs	r1, #100	; 0x64
 8004726:	f640 102d 	movw	r0, #2349	; 0x92d
 800472a:	f000 f80d 	bl	8004748 <Melody>
	Melody(c7,100);
 800472e:	2164      	movs	r1, #100	; 0x64
 8004730:	f640 002d 	movw	r0, #2093	; 0x82d
 8004734:	f000 f808 	bl	8004748 <Melody>
	Melody(a6,100);
 8004738:	2164      	movs	r1, #100	; 0x64
 800473a:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 800473e:	f000 f803 	bl	8004748 <Melody>

}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <Melody>:
	R_PG_Timer_StartCount_CMT_U1_C2();
*/
}

void Melody(uint32_t hz, uint32_t ms)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC;
//TIM8 Setting
	htim8.Instance = TIM8;
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <Melody+0xac>)
 8004754:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <Melody+0xb0>)
 8004756:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 840-1;
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <Melody+0xac>)
 800475a:	f240 3247 	movw	r2, #839	; 0x347
 800475e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <Melody+0xac>)
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 100000 / hz;
 8004766:	4a25      	ldr	r2, [pc, #148]	; (80047fc <Melody+0xb4>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <Melody+0xac>)
 8004770:	60d3      	str	r3, [r2, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <Melody+0xac>)
 8004774:	2200      	movs	r2, #0
 8004776:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <Melody+0xac>)
 800477a:	2200      	movs	r2, #0
 800477c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <Melody+0xac>)
 8004780:	2200      	movs	r2, #0
 8004782:	619a      	str	r2, [r3, #24]
//Config Setting
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004784:	2360      	movs	r3, #96	; 0x60
 8004786:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse =  95000 / hz ;
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <Melody+0xb8>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
//TIM8 OUTPUT
	if(HAL_TIM_PWM_Init(&htim8) != HAL_OK){
 800479a:	4816      	ldr	r0, [pc, #88]	; (80047f4 <Melody+0xac>)
 800479c:	f7fe fb44 	bl	8002e28 <HAL_TIM_PWM_Init>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <Melody+0x62>
		Error_Handler();
 80047a6:	f003 fb67 	bl	8007e78 <Error_Handler>
	}
	if(HAL_TIM_PWM_ConfigChannel(&htim8,&sConfigOC,TIM_CHANNEL_4) != HAL_OK){
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	220c      	movs	r2, #12
 80047b0:	4619      	mov	r1, r3
 80047b2:	4810      	ldr	r0, [pc, #64]	; (80047f4 <Melody+0xac>)
 80047b4:	f7fe fe12 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <Melody+0x7a>
		Error_Handler();
 80047be:	f003 fb5b 	bl	8007e78 <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4) != HAL_OK){
 80047c2:	210c      	movs	r1, #12
 80047c4:	480b      	ldr	r0, [pc, #44]	; (80047f4 <Melody+0xac>)
 80047c6:	f7fe fb5b 	bl	8002e80 <HAL_TIM_PWM_Start>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <Melody+0x8c>
		Error_Handler();
 80047d0:	f003 fb52 	bl	8007e78 <Error_Handler>
	}
	HAL_Delay(ms);
 80047d4:	6838      	ldr	r0, [r7, #0]
 80047d6:	f7fc fd37 	bl	8001248 <HAL_Delay>

	if(HAL_TIM_PWM_Stop(&htim8,TIM_CHANNEL_4) != HAL_OK){
 80047da:	210c      	movs	r1, #12
 80047dc:	4805      	ldr	r0, [pc, #20]	; (80047f4 <Melody+0xac>)
 80047de:	f7fe fb8d 	bl	8002efc <HAL_TIM_PWM_Stop>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <Melody+0xa4>
		Error_Handler();
 80047e8:	f003 fb46 	bl	8007e78 <Error_Handler>
	}
}
 80047ec:	bf00      	nop
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000774 	.word	0x20000774
 80047f8:	40010400 	.word	0x40010400
 80047fc:	000186a0 	.word	0x000186a0
 8004800:	00017318 	.word	0x00017318

08004804 <StartWaiting>:

void StartWaiting(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8004808:	4b18      	ldr	r3, [pc, #96]	; (800486c <StartWaiting+0x68>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0201 	mvn.w	r2, #1
 8004810:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <StartWaiting+0x68>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <StartWaiting+0x68>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim6);
 8004822:	4812      	ldr	r0, [pc, #72]	; (800486c <StartWaiting+0x68>)
 8004824:	f7fe fab1 	bl	8002d8a <HAL_TIM_Base_Start>

	printf("Ready???\r\n");
 8004828:	4811      	ldr	r0, [pc, #68]	; (8004870 <StartWaiting+0x6c>)
 800482a:	f004 ff71 	bl	8009710 <puts>

	while(1){
//		printf("ad_l: %4d ad_fl:%4d ad_ff:%4d  ad_fr:%4d ad_r:%4d\n ", wall_l.val,wall_fl.val, wall_ff.val, wall_fr.val, wall_r.val);
		if(wall_ff.val > WALL_START){
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <StartWaiting+0x70>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004836:	d9fa      	bls.n	800482e <StartWaiting+0x2a>
			Melody(e6,300);
 8004838:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800483c:	f240 5026 	movw	r0, #1318	; 0x526
 8004840:	f7ff ff82 	bl	8004748 <Melody>
			Melody(f6,300);
 8004844:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004848:	f240 5075 	movw	r0, #1397	; 0x575
 800484c:	f7ff ff7c 	bl	8004748 <Melody>
			Melody(g6,300);
 8004850:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004854:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8004858:	f7ff ff76 	bl	8004748 <Melody>
			ms_wait(1000);
 800485c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004860:	f7ff fe56 	bl	8004510 <ms_wait>
			break;
 8004864:	bf00      	nop
		}
	}
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000874 	.word	0x20000874
 8004870:	0800b648 	.word	0x0800b648
 8004874:	200005bc 	.word	0x200005bc

08004878 <start_ready>:

void start_ready(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
	sensor_start();
 800487c:	f002 fd82 	bl	8007384 <sensor_start>

	MF.FLAG.CTRL = 0;								//制御を無効にする
 8004880:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <start_ready+0x48>)
 8004882:	7813      	ldrb	r3, [r2, #0]
 8004884:	f36f 03c3 	bfc	r3, #3, #1
 8004888:	7013      	strb	r3, [r2, #0]
	get_base();
 800488a:	f002 fc9d 	bl	80071c8 <get_base>
	set_dir(FORWARD);								//前進するようにモータの回転方向を設定
 800488e:	2000      	movs	r0, #0
 8004890:	f000 ff30 	bl	80056f4 <set_dir>

	Melody(c6,1000);
 8004894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004898:	f240 4016 	movw	r0, #1046	; 0x416
 800489c:	f7ff ff54 	bl	8004748 <Melody>
	auto_Calibration(0.30,0.60);
 80048a0:	eddf 0a08 	vldr	s1, [pc, #32]	; 80048c4 <start_ready+0x4c>
 80048a4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80048c8 <start_ready+0x50>
 80048a8:	f000 f85c 	bl	8004964 <auto_Calibration>
	time2 = 0;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <start_ready+0x54>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	801a      	strh	r2, [r3, #0]
	driveA(SET_MM);
 80048b2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80048d0 <start_ready+0x58>
 80048b6:	f000 fab5 	bl	8004e24 <driveA>
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	200006e8 	.word	0x200006e8
 80048c4:	3f19999a 	.word	0x3f19999a
 80048c8:	3e99999a 	.word	0x3e99999a
 80048cc:	200006ea 	.word	0x200006ea
 80048d0:	42580000 	.word	0x42580000

080048d4 <setting_params>:

void setting_params(params *instance)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	params_now.vel_max = instance->vel_max;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <setting_params+0x34>)
 80048e2:	6013      	str	r3, [r2, #0]
	params_now.accel = instance->accel;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4a07      	ldr	r2, [pc, #28]	; (8004908 <setting_params+0x34>)
 80048ea:	6053      	str	r3, [r2, #4]
	params_now.omega_max = instance->omega_max;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <setting_params+0x34>)
 80048f2:	6093      	str	r3, [r2, #8]
	params_now.omega_accel = instance->omega_accel;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <setting_params+0x34>)
 80048fa:	60d3      	str	r3, [r2, #12]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000458 	.word	0x20000458

0800490c <setting_gain>:

void setting_gain(gain *instance)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	gain_now.vel_kpR = instance->vel_kpR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <setting_gain+0x54>)
 800491a:	6013      	str	r3, [r2, #0]
	gain_now.vel_kiR = instance->vel_kiR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <setting_gain+0x54>)
 8004922:	6093      	str	r3, [r2, #8]
	gain_now.vel_kpL = instance->vel_kpL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <setting_gain+0x54>)
 800492a:	6053      	str	r3, [r2, #4]
	gain_now.vel_kiL = instance->vel_kiL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <setting_gain+0x54>)
 8004932:	60d3      	str	r3, [r2, #12]
	gain_now.omega_kp = instance->omega_kp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	4a09      	ldr	r2, [pc, #36]	; (8004960 <setting_gain+0x54>)
 800493a:	6113      	str	r3, [r2, #16]
	gain_now.omega_ki = instance->omega_ki;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4a07      	ldr	r2, [pc, #28]	; (8004960 <setting_gain+0x54>)
 8004942:	6153      	str	r3, [r2, #20]
	gain_now.wall_kp = instance->wall_kp;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	4a05      	ldr	r2, [pc, #20]	; (8004960 <setting_gain+0x54>)
 800494a:	6193      	str	r3, [r2, #24]
	gain_now.wall_kd = instance->wall_kd;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	4a03      	ldr	r2, [pc, #12]	; (8004960 <setting_gain+0x54>)
 8004952:	61d3      	str	r3, [r2, #28]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	20000398 	.word	0x20000398

08004964 <auto_Calibration>:

void auto_Calibration(float constant_l, float constant_r)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af02      	add	r7, sp, #8
 800496a:	ed87 0a01 	vstr	s0, [r7, #4]
 800496e:	edc7 0a00 	vstr	s1, [r7]
	wall_l.threshold = (uint16_t)(wall_l.dif * constant_l);
 8004972:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <auto_Calibration+0x8c>)
 8004974:	88db      	ldrh	r3, [r3, #6]
 8004976:	b21b      	sxth	r3, r3
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004980:	edd7 7a01 	vldr	s15, [r7, #4]
 8004984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498c:	ee17 3a90 	vmov	r3, s15
 8004990:	b29a      	uxth	r2, r3
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <auto_Calibration+0x8c>)
 8004994:	819a      	strh	r2, [r3, #12]
	wall_ff.threshold = WALL_BASE_F;
 8004996:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <auto_Calibration+0x90>)
 8004998:	2264      	movs	r2, #100	; 0x64
 800499a:	819a      	strh	r2, [r3, #12]
	wall_r.threshold = (uint16_t)(wall_r.dif * constant_r);
 800499c:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <auto_Calibration+0x94>)
 800499e:	88db      	ldrh	r3, [r3, #6]
 80049a0:	b21b      	sxth	r3, r3
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049aa:	edd7 7a00 	vldr	s15, [r7]
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b6:	ee17 3a90 	vmov	r3, s15
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <auto_Calibration+0x94>)
 80049be:	819a      	strh	r2, [r3, #12]
	printf("threshold %d, %d :: dif %d, %d\r\n",wall_l.threshold, wall_r.threshold, wall_l.dif, wall_r.dif);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <auto_Calibration+0x8c>)
 80049c2:	899b      	ldrh	r3, [r3, #12]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <auto_Calibration+0x94>)
 80049ca:	899b      	ldrh	r3, [r3, #12]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <auto_Calibration+0x8c>)
 80049d2:	88db      	ldrh	r3, [r3, #6]
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	4618      	mov	r0, r3
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <auto_Calibration+0x94>)
 80049da:	88db      	ldrh	r3, [r3, #6]
 80049dc:	b21b      	sxth	r3, r3
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4603      	mov	r3, r0
 80049e2:	4806      	ldr	r0, [pc, #24]	; (80049fc <auto_Calibration+0x98>)
 80049e4:	f004 fe20 	bl	8009628 <iprintf>

}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000438 	.word	0x20000438
 80049f4:	200005bc 	.word	0x200005bc
 80049f8:	200003d8 	.word	0x200003d8
 80049fc:	0800b654 	.word	0x0800b654

08004a00 <reset_distance>:
	sen_ctrl = 0;
	pre_dif_total = 0;
}

void reset_distance()
{
 8004a00:	b490      	push	{r4, r7}
 8004a02:	af00      	add	r7, sp, #0
	/* 物理量初期化 */
	encoder_r.distance = 0;
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <reset_distance+0x40>)
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]
	encoder_l.distance = 0;
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <reset_distance+0x44>)
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	611a      	str	r2, [r3, #16]
	centor.distance = 0;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <reset_distance+0x48>)
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	619a      	str	r2, [r3, #24]

	/* エンコーダカウント値初期化 */
	encoder_r.sum = 0;
 8004a1c:	4a08      	ldr	r2, [pc, #32]	; (8004a40 <reset_distance+0x40>)
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f04f 0400 	mov.w	r4, #0
 8004a26:	e9c2 3402 	strd	r3, r4, [r2, #8]
	encoder_l.sum = 0;
 8004a2a:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <reset_distance+0x44>)
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc90      	pop	{r4, r7}
 8004a3e:	4770      	bx	lr
 8004a40:	200006d0 	.word	0x200006d0
 8004a44:	20000418 	.word	0x20000418
 8004a48:	200006fc 	.word	0x200006fc

08004a4c <CheckBattery>:

void CheckBattery(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BATTERY_GPIO_Port,BATTERY_Pin) == 0)
 8004a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a54:	4810      	ldr	r0, [pc, #64]	; (8004a98 <CheckBattery+0x4c>)
 8004a56:	f7fd fa7f 	bl	8001f58 <HAL_GPIO_ReadPin>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <CheckBattery+0x3e>
	{
		HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8004a60:	2100      	movs	r1, #0
 8004a62:	480e      	ldr	r0, [pc, #56]	; (8004a9c <CheckBattery+0x50>)
 8004a64:	f7fe fa4a 	bl	8002efc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);
 8004a68:	2104      	movs	r1, #4
 8004a6a:	480d      	ldr	r0, [pc, #52]	; (8004aa0 <CheckBattery+0x54>)
 8004a6c:	f7fe fa46 	bl	8002efc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim11,TIM_CHANNEL_1);
 8004a70:	2100      	movs	r1, #0
 8004a72:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <CheckBattery+0x58>)
 8004a74:	f7fe fa42 	bl	8002efc <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 8004a78:	480b      	ldr	r0, [pc, #44]	; (8004aa8 <CheckBattery+0x5c>)
 8004a7a:	f7fe f9aa 	bl	8002dd2 <HAL_TIM_Base_Stop>

//		R_PG_Timer_StopModule_CMT_U0();
		printf("Voltage Out!\n");
 8004a7e:	480b      	ldr	r0, [pc, #44]	; (8004aac <CheckBattery+0x60>)
 8004a80:	f004 fe46 	bl	8009710 <puts>
		MelodyMrLawrence();
 8004a84:	f7ff fe07 	bl	8004696 <MelodyMrLawrence>
		while(1){
 8004a88:	e7fe      	b.n	8004a88 <CheckBattery+0x3c>
		}
	}

	printf("Voltage ALL GREEN\n");
 8004a8a:	4809      	ldr	r0, [pc, #36]	; (8004ab0 <CheckBattery+0x64>)
 8004a8c:	f004 fe40 	bl	8009710 <puts>
	MelodyMrLawrence();
 8004a90:	f7ff fe01 	bl	8004696 <MelodyMrLawrence>
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	200008b4 	.word	0x200008b4
 8004aa0:	200008f4 	.word	0x200008f4
 8004aa4:	20000834 	.word	0x20000834
 8004aa8:	20000874 	.word	0x20000874
 8004aac:	0800b678 	.word	0x0800b678
 8004ab0:	0800b688 	.word	0x0800b688

08004ab4 <GyroInit>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//GyroInit
//	Gyroの初期設定を行う
//+++++++++++++++++++++++++++++++++++++++++++++++
void GyroInit()
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
	uint8_t who_am_i = ReadByte(WHO_AM_I);
 8004aba:	2075      	movs	r0, #117	; 0x75
 8004abc:	f003 fa62 	bl	8007f84 <ReadByte>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	71fb      	strb	r3, [r7, #7]
	printf("Who am I ? -> 0x%x\n", who_am_i);
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4816      	ldr	r0, [pc, #88]	; (8004b24 <GyroInit+0x70>)
 8004aca:	f004 fdad 	bl	8009628 <iprintf>

	if(who_am_i != GYRO_CORREST_REACTION){
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b98      	cmp	r3, #152	; 0x98
 8004ad2:	d00e      	beq.n	8004af2 <GyroInit+0x3e>
		who_am_i = ReadByte(WHO_AM_I);
 8004ad4:	2075      	movs	r0, #117	; 0x75
 8004ad6:	f003 fa55 	bl	8007f84 <ReadByte>
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
		while(who_am_i != GYRO_CORREST_REACTION){
 8004ade:	e005      	b.n	8004aec <GyroInit+0x38>
			printf("Gyro Error\n");
 8004ae0:	4811      	ldr	r0, [pc, #68]	; (8004b28 <GyroInit+0x74>)
 8004ae2:	f004 fe15 	bl	8009710 <puts>
			HAL_Delay(100);
 8004ae6:	2064      	movs	r0, #100	; 0x64
 8004ae8:	f7fc fbae 	bl	8001248 <HAL_Delay>
		while(who_am_i != GYRO_CORREST_REACTION){
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b98      	cmp	r3, #152	; 0x98
 8004af0:	d1f6      	bne.n	8004ae0 <GyroInit+0x2c>
		}
	}

	printf("Gyro OK\n");
 8004af2:	480e      	ldr	r0, [pc, #56]	; (8004b2c <GyroInit+0x78>)
 8004af4:	f004 fe0c 	bl	8009710 <puts>

	WriteByte(PWR_MGMT_1,0x00);
 8004af8:	2100      	movs	r1, #0
 8004afa:	206b      	movs	r0, #107	; 0x6b
 8004afc:	f003 fa6c 	bl	8007fd8 <WriteByte>
	HAL_Delay(10);
 8004b00:	200a      	movs	r0, #10
 8004b02:	f7fc fba1 	bl	8001248 <HAL_Delay>
	WriteByte(CONFIG,0x00);
 8004b06:	2100      	movs	r1, #0
 8004b08:	201a      	movs	r0, #26
 8004b0a:	f003 fa65 	bl	8007fd8 <WriteByte>
	HAL_Delay(10);
 8004b0e:	200a      	movs	r0, #10
 8004b10:	f7fc fb9a 	bl	8001248 <HAL_Delay>
	WriteByte(GYRO_CONFIG,0x18);
 8004b14:	2118      	movs	r1, #24
 8004b16:	201b      	movs	r0, #27
 8004b18:	f003 fa5e 	bl	8007fd8 <WriteByte>

}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	0800b69c 	.word	0x0800b69c
 8004b28:	0800b6b0 	.word	0x0800b6b0
 8004b2c:	0800b6bc 	.word	0x0800b6bc

08004b30 <GyroRead>:

float GyroRead(void){
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
	int16_t omega_raw_z;
	float omega;
	omega_raw_z = (int16_t)(ReadByte(GYRO_ZOUT_H) << 8 | ReadByte(GYRO_ZOUT_L));	//0x47が上位，0x48が下位の16bitデータでジャイロ値を取得
 8004b36:	2047      	movs	r0, #71	; 0x47
 8004b38:	f003 fa24 	bl	8007f84 <ReadByte>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	b21c      	sxth	r4, r3
 8004b42:	2048      	movs	r0, #72	; 0x48
 8004b44:	f003 fa1e 	bl	8007f84 <ReadByte>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	b21b      	sxth	r3, r3
 8004b4c:	4323      	orrs	r3, r4
 8004b4e:	80fb      	strh	r3, [r7, #6]
	omega = (float)(omega_raw_z / GYRO_FIX);
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb fce5 	bl	8000524 <__aeabi_i2d>
 8004b5a:	a30b      	add	r3, pc, #44	; (adr r3, 8004b88 <GyroRead+0x58>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fe74 	bl	800084c <__aeabi_ddiv>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	f7fc f81c 	bl	8000ba8 <__aeabi_d2f>
 8004b70:	4603      	mov	r3, r0
 8004b72:	603b      	str	r3, [r7, #0]
	return omega;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	ee07 3a90 	vmov	s15, r3
}
 8004b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}
 8004b84:	f3af 8000 	nop.w
 8004b88:	66666666 	.word	0x66666666
 8004b8c:	40306666 	.word	0x40306666

08004b90 <half_sectionA>:
//	半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA()
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 1;
 8004b94:	4a06      	ldr	r2, [pc, #24]	; (8004bb0 <half_sectionA+0x20>)
 8004b96:	7813      	ldrb	r3, [r2, #0]
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	7013      	strb	r3, [r2, #0]
	driveA(HALF_MM);									//半区画のパルス分加速しながら走行。走行後は停止しない
 8004b9e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004bb4 <half_sectionA+0x24>
 8004ba2:	f000 f93f 	bl	8004e24 <driveA>
	get_wall_info();										//壁情報を取得
 8004ba6:	f002 fb45 	bl	8007234 <get_wall_info>
}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200006e8 	.word	0x200006e8
 8004bb4:	42b40000 	.word	0x42b40000

08004bb8 <half_sectionA2>:

void half_sectionA2()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 1;										//制御を有効にする
 8004bbc:	4a05      	ldr	r2, [pc, #20]	; (8004bd4 <half_sectionA2+0x1c>)
 8004bbe:	7813      	ldrb	r3, [r2, #0]
 8004bc0:	f043 0308 	orr.w	r3, r3, #8
 8004bc4:	7013      	strb	r3, [r2, #0]
	driveA(HALF_MM);									//半区画のパルス分加速しながら走行。走行後は停止しない
 8004bc6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004bd8 <half_sectionA2+0x20>
 8004bca:	f000 f92b 	bl	8004e24 <driveA>
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200006e8 	.word	0x200006e8
 8004bd8:	42b40000 	.word	0x42b40000

08004bdc <half_sectionD>:
//	半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD()
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 0;
 8004be0:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <half_sectionD+0x1c>)
 8004be2:	7813      	ldrb	r3, [r2, #0]
 8004be4:	f36f 03c3 	bfc	r3, #3, #1
 8004be8:	7013      	strb	r3, [r2, #0]
	driveD(HALF_MM,1);									//
 8004bea:	2101      	movs	r1, #1
 8004bec:	205a      	movs	r0, #90	; 0x5a
 8004bee:	f000 f9bb 	bl	8004f68 <driveD>
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200006e8 	.word	0x200006e8

08004bfc <a_section>:
//	1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void a_section()
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
	half_sectionA();			//半区画分加速走行
 8004c00:	f7ff ffc6 	bl	8004b90 <half_sectionA>
	half_sectionD();
 8004c04:	f7ff ffea 	bl	8004bdc <half_sectionD>
}
 8004c08:	bf00      	nop
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <s_section>:

void s_section(){
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	half_sectionA2();			//半区画分加速走行
 8004c10:	f7ff ffd2 	bl	8004bb8 <half_sectionA2>
	half_sectionA();
 8004c14:	f7ff ffbc 	bl	8004b90 <half_sectionA>

}
 8004c18:	bf00      	nop
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <turn_R90>:
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
//DC用に改造

void turn_R90(){
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 0;								//制御を無効にする
 8004c20:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <turn_R90+0x28>)
 8004c22:	7813      	ldrb	r3, [r2, #0]
 8004c24:	f36f 03c3 	bfc	r3, #3, #1
 8004c28:	7013      	strb	r3, [r2, #0]
	set_dir(TURN_R);								//右に回転するようモータの回転方向を設定
 8004c2a:	2010      	movs	r0, #16
 8004c2c:	f000 fd62 	bl	80056f4 <set_dir>
	driveAD(ROT_ANGLE_R90);								//超信地するわよぉ！
 8004c30:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004c48 <turn_R90+0x2c>
 8004c34:	f000 fa74 	bl	8005120 <driveAD>
	set_dir(FORWARD);								//前進するようにモータの回転方向を設定
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f000 fd5b 	bl	80056f4 <set_dir>
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200006e8 	.word	0x200006e8
 8004c48:	c2b40000 	.word	0xc2b40000

08004c4c <turn_SLA_R90>:

void turn_SLA_R90(){
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 0;
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <turn_SLA_R90+0x70>)
 8004c52:	7813      	ldrb	r3, [r2, #0]
 8004c54:	f36f 03c3 	bfc	r3, #3, #1
 8004c58:	7013      	strb	r3, [r2, #0]
	set_dir(FORWARD);								//右に回転するようモータの回転方向を設定
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f000 fd4a 	bl	80056f4 <set_dir>
	driveA(params_search1.R90_before);
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <turn_SLA_R90+0x74>)
 8004c62:	7c1b      	ldrb	r3, [r3, #16]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c72:	f000 f8d7 	bl	8004e24 <driveA>

	time = 0;
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <turn_SLA_R90+0x78>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	801a      	strh	r2, [r3, #0]
	time2 = 0;
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <turn_SLA_R90+0x7c>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	801a      	strh	r2, [r3, #0]
	MF.FLAG.CTRL = 0;
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <turn_SLA_R90+0x70>)
 8004c84:	7813      	ldrb	r3, [r2, #0]
 8004c86:	f36f 03c3 	bfc	r3, #3, #1
 8004c8a:	7013      	strb	r3, [r2, #0]
	driveW(-90);								//低速で指定パルス分回転。回転後に停止する
 8004c8c:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8004c90:	f000 fc0a 	bl	80054a8 <driveW>

	MF.FLAG.CTRL = 0;
 8004c94:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <turn_SLA_R90+0x70>)
 8004c96:	7813      	ldrb	r3, [r2, #0]
 8004c98:	f36f 03c3 	bfc	r3, #3, #1
 8004c9c:	7013      	strb	r3, [r2, #0]
	driveA(params_search1.R90_after);
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <turn_SLA_R90+0x74>)
 8004ca0:	7c5b      	ldrb	r3, [r3, #17]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cac:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb0:	f000 f8b8 	bl	8004e24 <driveA>

	get_wall_info();
 8004cb4:	f002 fabe 	bl	8007234 <get_wall_info>

}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	200006e8 	.word	0x200006e8
 8004cc0:	20000400 	.word	0x20000400
 8004cc4:	20000450 	.word	0x20000450
 8004cc8:	200006ea 	.word	0x200006ea

08004ccc <turn_L90>:
//	左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_L90()
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 0;
 8004cd0:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <turn_L90+0x28>)
 8004cd2:	7813      	ldrb	r3, [r2, #0]
 8004cd4:	f36f 03c3 	bfc	r3, #3, #1
 8004cd8:	7013      	strb	r3, [r2, #0]
	set_dir(TURN_L);									//左に超信地旋回する向きに設定
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f000 fd0a 	bl	80056f4 <set_dir>
	driveAD(ROT_ANGLE_L90);									//超信地面するわよぉ！
 8004ce0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004cf8 <turn_L90+0x2c>
 8004ce4:	f000 fa1c 	bl	8005120 <driveAD>
	set_dir(FORWARD);									//前進するようにモータの回転方向を設定
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f000 fd03 	bl	80056f4 <set_dir>
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200006e8 	.word	0x200006e8
 8004cf8:	42b40000 	.word	0x42b40000

08004cfc <turn_SLA_L90>:
//turn_SLA_L90	試作中
//	左にslalomで90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_SLA_L90(){
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0

	//time2 = 0;

	MF.FLAG.CTRL = 0;
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <turn_SLA_L90+0x74>)
 8004d02:	7813      	ldrb	r3, [r2, #0]
 8004d04:	f36f 03c3 	bfc	r3, #3, #1
 8004d08:	7013      	strb	r3, [r2, #0]
	set_dir(FORWARD);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f000 fcf2 	bl	80056f4 <set_dir>
	driveA(params_search1.L90_before);							//offset　before区間走行
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <turn_SLA_L90+0x78>)
 8004d12:	7c9b      	ldrb	r3, [r3, #18]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d22:	f000 f87f 	bl	8004e24 <driveA>
	//time2 = 0;

	MF.FLAG.CTRL = 0;
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <turn_SLA_L90+0x74>)
 8004d28:	7813      	ldrb	r3, [r2, #0]
 8004d2a:	f36f 03c3 	bfc	r3, #3, #1
 8004d2e:	7013      	strb	r3, [r2, #0]
	driveW(90);								//90までスラローム旋回
 8004d30:	205a      	movs	r0, #90	; 0x5a
 8004d32:	f000 fbb9 	bl	80054a8 <driveW>

	MF.FLAG.CTRL = 0;
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <turn_SLA_L90+0x74>)
 8004d38:	7813      	ldrb	r3, [r2, #0]
 8004d3a:	f36f 03c3 	bfc	r3, #3, #1
 8004d3e:	7013      	strb	r3, [r2, #0]
	driveA(params_search1.L90_after);							//offset　after区間
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <turn_SLA_L90+0x78>)
 8004d42:	7cdb      	ldrb	r3, [r3, #19]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d52:	f000 f867 	bl	8004e24 <driveA>
	omega.p_out= 0;
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <turn_SLA_L90+0x7c>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
	omega.i_out = 0;
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <turn_SLA_L90+0x7c>)
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	60da      	str	r2, [r3, #12]

	get_wall_info();
 8004d66:	f002 fa65 	bl	8007234 <get_wall_info>

}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	200006e8 	.word	0x200006e8
 8004d74:	20000400 	.word	0x20000400
 8004d78:	20000480 	.word	0x20000480

08004d7c <turn_180>:
//	180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_180()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
	MF.FLAG.CTRL = 0;										//制御を無効にする
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <turn_180+0x30>)
 8004d82:	7813      	ldrb	r3, [r2, #0]
 8004d84:	f36f 03c3 	bfc	r3, #3, #1
 8004d88:	7013      	strb	r3, [r2, #0]
	sen_ctrl = 0;
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <turn_180+0x34>)
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

	set_dir(TURN_R);										//左に回転するようモータの回転方向を設定driveAD(ROT_ANGLE_R90);
 8004d92:	2010      	movs	r0, #16
 8004d94:	f000 fcae 	bl	80056f4 <set_dir>
	driveAD(-180);
 8004d98:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004db4 <turn_180+0x38>
 8004d9c:	f000 f9c0 	bl	8005120 <driveAD>
	set_dir(FORWARD);										//前進するようにモータの回転方向を設定
 8004da0:	2000      	movs	r0, #0
 8004da2:	f000 fca7 	bl	80056f4 <set_dir>
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200006e8 	.word	0x200006e8
 8004db0:	200003f8 	.word	0x200003f8
 8004db4:	c3340000 	.word	0xc3340000

08004db8 <set_position>:
//	機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(uint8_t flag)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
	MF.FLAG.CTRL = 0;
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <set_position+0x64>)
 8004dc4:	7813      	ldrb	r3, [r2, #0]
 8004dc6:	f36f 03c3 	bfc	r3, #3, #1
 8004dca:	7013      	strb	r3, [r2, #0]
	//制御を無効にする
	set_dir(BACK);											//後退するようモータの回転方向を設定
 8004dcc:	2011      	movs	r0, #17
 8004dce:	f000 fc91 	bl	80056f4 <set_dir>
	ms_wait(200);
 8004dd2:	20c8      	movs	r0, #200	; 0xc8
 8004dd4:	f7ff fb9c 	bl	8004510 <ms_wait>
	driveC(500,0);								//尻を当てる程度に後退。回転後に停止する
 8004dd8:	2100      	movs	r1, #0
 8004dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004dde:	f000 facb 	bl	8005378 <driveC>
	set_dir(FORWARD);										//前進するようにモータの回転方向を設定
 8004de2:	2000      	movs	r0, #0
 8004de4:	f000 fc86 	bl	80056f4 <set_dir>

	MF.FLAG.CTRL =1;
 8004de8:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <set_position+0x64>)
 8004dea:	7813      	ldrb	r3, [r2, #0]
 8004dec:	f043 0308 	orr.w	r3, r3, #8
 8004df0:	7013      	strb	r3, [r2, #0]
	if(flag == 0){			//スラローム
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <set_position+0x4a>
		driveA(SET_MM);
 8004df8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004e20 <set_position+0x68>
 8004dfc:	f000 f812 	bl	8004e24 <driveA>
		driveA(SET_MM * 0.5);
		driveD(SET_MM * 0.5,1);

	}

}
 8004e00:	e007      	b.n	8004e12 <set_position+0x5a>
		driveA(SET_MM * 0.5);
 8004e02:	eeb3 0a0b 	vmov.f32	s0, #59	; 0x41d80000  27.0
 8004e06:	f000 f80d 	bl	8004e24 <driveA>
		driveD(SET_MM * 0.5,1);
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	201b      	movs	r0, #27
 8004e0e:	f000 f8ab 	bl	8004f68 <driveD>
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200006e8 	.word	0x200006e8
 8004e20:	42580000 	.word	0x42580000

08004e24 <driveA>:
//	指定距離分加速走行する
// 引数1：dist・・・走行する距離mm
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
//DC用に改造しているdriveA,距離はオッケー
void driveA(float dist) {					//引数　走行距離　停止の有無（1で停止，０で継続走行）,vel0とtimeは触れていない
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	ed87 0a01 	vstr	s0, [r7, #4]

	float ics = centor.distance;
 8004e2e:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <driveA+0x124>)
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	60bb      	str	r3, [r7, #8]
	uint16_t flag = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	81fb      	strh	r3, [r7, #14]
	//====走行====
	//----走行開始----
	//MF.FLAGS = 0x00 | (MF.FLAGS & 0x0F);					//減速・定速・ストップフラグを0に、加速フラグを1にする
	MF.FLAG.ACTRL = 0;
 8004e38:	4a44      	ldr	r2, [pc, #272]	; (8004f4c <driveA+0x128>)
 8004e3a:	7853      	ldrb	r3, [r2, #1]
 8004e3c:	f36f 1345 	bfc	r3, #5, #1
 8004e40:	7053      	strb	r3, [r2, #1]
	MF.FLAG.VCTRL = 1;
 8004e42:	4a42      	ldr	r2, [pc, #264]	; (8004f4c <driveA+0x128>)
 8004e44:	7853      	ldrb	r3, [r2, #1]
 8004e46:	f043 0304 	orr.w	r3, r3, #4
 8004e4a:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WCTRL = 0;
 8004e4c:	4a3f      	ldr	r2, [pc, #252]	; (8004f4c <driveA+0x128>)
 8004e4e:	7853      	ldrb	r3, [r2, #1]
 8004e50:	f36f 1304 	bfc	r3, #4, #1
 8004e54:	7053      	strb	r3, [r2, #1]
	MF.FLAG.XCTRL = 0;
 8004e56:	4a3d      	ldr	r2, [pc, #244]	; (8004f4c <driveA+0x128>)
 8004e58:	7853      	ldrb	r3, [r2, #1]
 8004e5a:	f36f 03c3 	bfc	r3, #3, #1
 8004e5e:	7053      	strb	r3, [r2, #1]

	MF.FLAG.WDECL = 0;
 8004e60:	4a3a      	ldr	r2, [pc, #232]	; (8004f4c <driveA+0x128>)
 8004e62:	7853      	ldrb	r3, [r2, #1]
 8004e64:	f36f 13c7 	bfc	r3, #7, #1
 8004e68:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WACCL = 0;
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <driveA+0x128>)
 8004e6c:	7853      	ldrb	r3, [r2, #1]
 8004e6e:	f36f 1386 	bfc	r3, #6, #1
 8004e72:	7053      	strb	r3, [r2, #1]
	MF.FLAG.ACCL = 1;
 8004e74:	4a35      	ldr	r2, [pc, #212]	; (8004f4c <driveA+0x128>)
 8004e76:	7813      	ldrb	r3, [r2, #0]
 8004e78:	f043 0310 	orr.w	r3, r3, #16
 8004e7c:	7013      	strb	r3, [r2, #0]
	MF.FLAG.DECL = 0;
 8004e7e:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <driveA+0x128>)
 8004e80:	7813      	ldrb	r3, [r2, #0]
 8004e82:	f36f 1345 	bfc	r3, #5, #1
 8004e86:	7013      	strb	r3, [r2, #0]

	MF.FLAG.FFCTRL = 0;
 8004e88:	4a30      	ldr	r2, [pc, #192]	; (8004f4c <driveA+0x128>)
 8004e8a:	7813      	ldrb	r3, [r2, #0]
 8004e8c:	f36f 1386 	bfc	r3, #6, #1
 8004e90:	7013      	strb	r3, [r2, #0]

	//走行距離をリセット
	reset_distance();
 8004e92:	f7ff fdb5 	bl	8004a00 <reset_distance>

	omega.target = 0;
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <driveA+0x12c>)
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
//	kwiG = 0;
	drive_start();					//走行開始
 8004e9e:	f000 fc17 	bl	80056d0 <drive_start>

	time = 0;
 8004ea2:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <driveA+0x130>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	801a      	strh	r2, [r3, #0]
	//----走行----
	while(centor.distance < ics + dist){
 8004ea8:	e03a      	b.n	8004f20 <driveA+0xfc>
		if(time > 1000){
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <driveA+0x130>)
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb4:	d843      	bhi.n	8004f3e <driveA+0x11a>
			break;
		}
		if(MF.FLAG.WALL && flag == 0){
 8004eb6:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <driveA+0x128>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02d      	beq.n	8004f20 <driveA+0xfc>
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d12a      	bne.n	8004f20 <driveA+0xfc>
			encoder_r.distance = (dist + ics - 60) / Kxr;
 8004eca:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004f58 <driveA+0x134>
 8004eda:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004ede:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <driveA+0x138>)
 8004ee0:	ed93 7a00 	vldr	s14, [r3]
 8004ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <driveA+0x13c>)
 8004eea:	edc3 7a04 	vstr	s15, [r3, #16]
			encoder_l.distance = (dist + ics - 60) / Kxr;
 8004eee:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ef2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004f58 <driveA+0x134>
 8004efe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <driveA+0x138>)
 8004f04:	ed93 7a00 	vldr	s14, [r3]
 8004f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <driveA+0x140>)
 8004f0e:	edc3 7a04 	vstr	s15, [r3, #16]
			MF.FLAG.WALL = 0;
 8004f12:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <driveA+0x128>)
 8004f14:	7813      	ldrb	r3, [r2, #0]
 8004f16:	f36f 0382 	bfc	r3, #2, #1
 8004f1a:	7013      	strb	r3, [r2, #0]
			flag = 1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	81fb      	strh	r3, [r7, #14]
	while(centor.distance < ics + dist){
 8004f20:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <driveA+0x124>)
 8004f22:	ed93 7a06 	vldr	s14, [r3, #24]
 8004f26:	edd7 6a02 	vldr	s13, [r7, #8]
 8004f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	d4b6      	bmi.n	8004eaa <driveA+0x86>
		}
	}
}
 8004f3c:	e000      	b.n	8004f40 <driveA+0x11c>
			break;
 8004f3e:	bf00      	nop
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	200006fc 	.word	0x200006fc
 8004f4c:	200006e8 	.word	0x200006e8
 8004f50:	20000480 	.word	0x20000480
 8004f54:	20000450 	.word	0x20000450
 8004f58:	42700000 	.word	0x42700000
 8004f5c:	2000044c 	.word	0x2000044c
 8004f60:	200006d0 	.word	0x200006d0
 8004f64:	20000418 	.word	0x20000418

08004f68 <driveD>:
// 引数2：rs・・・走行後停止するか　1:する　それ以外:しない
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++


void driveD(uint16_t dist, unsigned char rs) {
 8004f68:	b5b0      	push	{r4, r5, r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	460a      	mov	r2, r1
 8004f72:	80fb      	strh	r3, [r7, #6]
 8004f74:	4613      	mov	r3, r2
 8004f76:	717b      	strb	r3, [r7, #5]
	float ics = centor.distance;
 8004f78:	4b62      	ldr	r3, [pc, #392]	; (8005104 <driveD+0x19c>)
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	60fb      	str	r3, [r7, #12]
	float offset;

	//====走行====
	MF.FLAG.CTRL = 0;
 8004f7e:	4a62      	ldr	r2, [pc, #392]	; (8005108 <driveD+0x1a0>)
 8004f80:	7813      	ldrb	r3, [r2, #0]
 8004f82:	f36f 03c3 	bfc	r3, #3, #1
 8004f86:	7013      	strb	r3, [r2, #0]

	//----走行開始----
	MF.FLAG.ACTRL = 0;
 8004f88:	4a5f      	ldr	r2, [pc, #380]	; (8005108 <driveD+0x1a0>)
 8004f8a:	7853      	ldrb	r3, [r2, #1]
 8004f8c:	f36f 1345 	bfc	r3, #5, #1
 8004f90:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WCTRL = 1;
 8004f92:	4a5d      	ldr	r2, [pc, #372]	; (8005108 <driveD+0x1a0>)
 8004f94:	7853      	ldrb	r3, [r2, #1]
 8004f96:	f043 0310 	orr.w	r3, r3, #16
 8004f9a:	7053      	strb	r3, [r2, #1]
	MF.FLAG.XCTRL = 0;
 8004f9c:	4a5a      	ldr	r2, [pc, #360]	; (8005108 <driveD+0x1a0>)
 8004f9e:	7853      	ldrb	r3, [r2, #1]
 8004fa0:	f36f 03c3 	bfc	r3, #3, #1
 8004fa4:	7053      	strb	r3, [r2, #1]
	MF.FLAG.VCTRL = 1;
 8004fa6:	4a58      	ldr	r2, [pc, #352]	; (8005108 <driveD+0x1a0>)
 8004fa8:	7853      	ldrb	r3, [r2, #1]
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	7053      	strb	r3, [r2, #1]

	MF.FLAG.WDECL = 0;
 8004fb0:	4a55      	ldr	r2, [pc, #340]	; (8005108 <driveD+0x1a0>)
 8004fb2:	7853      	ldrb	r3, [r2, #1]
 8004fb4:	f36f 13c7 	bfc	r3, #7, #1
 8004fb8:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WACCL = 0;
 8004fba:	4a53      	ldr	r2, [pc, #332]	; (8005108 <driveD+0x1a0>)
 8004fbc:	7853      	ldrb	r3, [r2, #1]
 8004fbe:	f36f 1386 	bfc	r3, #6, #1
 8004fc2:	7053      	strb	r3, [r2, #1]
	MF.FLAG.ACCL = 1;
 8004fc4:	4a50      	ldr	r2, [pc, #320]	; (8005108 <driveD+0x1a0>)
 8004fc6:	7813      	ldrb	r3, [r2, #0]
 8004fc8:	f043 0310 	orr.w	r3, r3, #16
 8004fcc:	7013      	strb	r3, [r2, #0]
	MF.FLAG.DECL = 0;
 8004fce:	4a4e      	ldr	r2, [pc, #312]	; (8005108 <driveD+0x1a0>)
 8004fd0:	7813      	ldrb	r3, [r2, #0]
 8004fd2:	f36f 1345 	bfc	r3, #5, #1
 8004fd6:	7013      	strb	r3, [r2, #0]

	drive_start();								//痩躯開始
 8004fd8:	f000 fb7a 	bl	80056d0 <drive_start>
	offset = rs * 0.5 * params_now.vel_max * maxindex * 1000;
 8004fdc:	797b      	ldrb	r3, [r7, #5]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb faa0 	bl	8000524 <__aeabi_i2d>
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <driveD+0x1a4>)
 8004fea:	f7fb fb05 	bl	80005f8 <__aeabi_dmul>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	4625      	mov	r5, r4
 8004ff4:	461c      	mov	r4, r3
 8004ff6:	4b46      	ldr	r3, [pc, #280]	; (8005110 <driveD+0x1a8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fb faa4 	bl	8000548 <__aeabi_f2d>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4620      	mov	r0, r4
 8005006:	4629      	mov	r1, r5
 8005008:	f7fb faf6 	bl	80005f8 <__aeabi_dmul>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	4625      	mov	r5, r4
 8005012:	461c      	mov	r4, r3
 8005014:	4b3f      	ldr	r3, [pc, #252]	; (8005114 <driveD+0x1ac>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb fa95 	bl	8000548 <__aeabi_f2d>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4620      	mov	r0, r4
 8005024:	4629      	mov	r1, r5
 8005026:	f7fb fae7 	bl	80005f8 <__aeabi_dmul>
 800502a:	4603      	mov	r3, r0
 800502c:	460c      	mov	r4, r1
 800502e:	4618      	mov	r0, r3
 8005030:	4621      	mov	r1, r4
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	4b38      	ldr	r3, [pc, #224]	; (8005118 <driveD+0x1b0>)
 8005038:	f7fb fade 	bl	80005f8 <__aeabi_dmul>
 800503c:	4603      	mov	r3, r0
 800503e:	460c      	mov	r4, r1
 8005040:	4618      	mov	r0, r3
 8005042:	4621      	mov	r1, r4
 8005044:	f7fb fdb0 	bl	8000ba8 <__aeabi_d2f>
 8005048:	4603      	mov	r3, r0
 800504a:	60bb      	str	r3, [r7, #8]
	//----走行----
	while((centor.distance + offset) < (dist + ics)){
 800504c:	e005      	b.n	800505a <driveD+0xf2>
		if(time > 1000){
 800504e:	4b33      	ldr	r3, [pc, #204]	; (800511c <driveD+0x1b4>)
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005058:	d815      	bhi.n	8005086 <driveD+0x11e>
	while((centor.distance + offset) < (dist + ics)){
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <driveD+0x19c>)
 800505c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005060:	edd7 7a02 	vldr	s15, [r7, #8]
 8005064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005072:	edd7 7a03 	vldr	s15, [r7, #12]
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	d4e4      	bmi.n	800504e <driveD+0xe6>
 8005084:	e000      	b.n	8005088 <driveD+0x120>
			break;
 8005086:	bf00      	nop
		}
	}

		if(rs){
 8005088:	797b      	ldrb	r3, [r7, #5]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d032      	beq.n	80050f4 <driveD+0x18c>
			MF.FLAG.ACCL = 0;
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <driveD+0x1a0>)
 8005090:	7813      	ldrb	r3, [r2, #0]
 8005092:	f36f 1304 	bfc	r3, #4, #1
 8005096:	7013      	strb	r3, [r2, #0]
			MF.FLAG.DECL = 1;
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <driveD+0x1a0>)
 800509a:	7813      	ldrb	r3, [r2, #0]
 800509c:	f043 0320 	orr.w	r3, r3, #32
 80050a0:	7013      	strb	r3, [r2, #0]

			while(centor.vel_target > 0.0f){
 80050a2:	e00b      	b.n	80050bc <driveD+0x154>
				if(centor.vel_target == 0.0f){
 80050a4:	4b17      	ldr	r3, [pc, #92]	; (8005104 <driveD+0x19c>)
 80050a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80050aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	d103      	bne.n	80050bc <driveD+0x154>
					ms_wait(100);
 80050b4:	2064      	movs	r0, #100	; 0x64
 80050b6:	f7ff fa2b 	bl	8004510 <ms_wait>
					break;
 80050ba:	e007      	b.n	80050cc <driveD+0x164>
			while(centor.vel_target > 0.0f){
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <driveD+0x19c>)
 80050be:	edd3 7a01 	vldr	s15, [r3, #4]
 80050c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	dceb      	bgt.n	80050a4 <driveD+0x13c>
				}
			}

			MF.FLAG.ACTRL = 0;
 80050cc:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <driveD+0x1a0>)
 80050ce:	7853      	ldrb	r3, [r2, #1]
 80050d0:	f36f 1345 	bfc	r3, #5, #1
 80050d4:	7053      	strb	r3, [r2, #1]
			MF.FLAG.WCTRL = 0;
 80050d6:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <driveD+0x1a0>)
 80050d8:	7853      	ldrb	r3, [r2, #1]
 80050da:	f36f 1304 	bfc	r3, #4, #1
 80050de:	7053      	strb	r3, [r2, #1]
			MF.FLAG.XCTRL = 0;
 80050e0:	4a09      	ldr	r2, [pc, #36]	; (8005108 <driveD+0x1a0>)
 80050e2:	7853      	ldrb	r3, [r2, #1]
 80050e4:	f36f 03c3 	bfc	r3, #3, #1
 80050e8:	7053      	strb	r3, [r2, #1]
			MF.FLAG.VCTRL = 0;
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <driveD+0x1a0>)
 80050ec:	7853      	ldrb	r3, [r2, #1]
 80050ee:	f36f 0382 	bfc	r3, #2, #1
 80050f2:	7053      	strb	r3, [r2, #1]
		}
	//----停止措置----
	drive_stop(rs);											//走行終了、停止許可があれば停止
 80050f4:	797b      	ldrb	r3, [r7, #5]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 faf1 	bl	80056de <drive_stop>

}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bdb0      	pop	{r4, r5, r7, pc}
 8005104:	200006fc 	.word	0x200006fc
 8005108:	200006e8 	.word	0x200006e8
 800510c:	3fe00000 	.word	0x3fe00000
 8005110:	20000458 	.word	0x20000458
 8005114:	200006f8 	.word	0x200006f8
 8005118:	408f4000 	.word	0x408f4000
 800511c:	20000450 	.word	0x20000450

08005120 <driveAD>:
// 引数2：rs・・・走行後停止するか　1:する　それ以外:しない
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
//DC用に改造，目的は超信地のみ 引数1:
void driveAD(float theta)
{
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	ed87 0a01 	vstr	s0, [r7, #4]
	float offset;

	if(theta > 0){				//左旋回
 800512a:	edd7 7a01 	vldr	s15, [r7, #4]
 800512e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	dd03      	ble.n	8005140 <driveAD+0x20>
		centor.omega_dir = 1;
 8005138:	4b87      	ldr	r3, [pc, #540]	; (8005358 <driveAD+0x238>)
 800513a:	2201      	movs	r2, #1
 800513c:	751a      	strb	r2, [r3, #20]
 800513e:	e009      	b.n	8005154 <driveAD+0x34>
	}else if(theta < 0){			//右旋回
 8005140:	edd7 7a01 	vldr	s15, [r7, #4]
 8005144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	d502      	bpl.n	8005154 <driveAD+0x34>
		centor.omega_dir = -1;
 800514e:	4b82      	ldr	r3, [pc, #520]	; (8005358 <driveAD+0x238>)
 8005150:	22ff      	movs	r2, #255	; 0xff
 8005152:	751a      	strb	r2, [r3, #20]
	}

	//====走行====
	//----走行設定----
	MF.FLAG.ACTRL = 0;
 8005154:	4a81      	ldr	r2, [pc, #516]	; (800535c <driveAD+0x23c>)
 8005156:	7853      	ldrb	r3, [r2, #1]
 8005158:	f36f 1345 	bfc	r3, #5, #1
 800515c:	7053      	strb	r3, [r2, #1]
	MF.FLAG.VCTRL = 1;
 800515e:	4a7f      	ldr	r2, [pc, #508]	; (800535c <driveAD+0x23c>)
 8005160:	7853      	ldrb	r3, [r2, #1]
 8005162:	f043 0304 	orr.w	r3, r3, #4
 8005166:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WCTRL = 1;
 8005168:	4a7c      	ldr	r2, [pc, #496]	; (800535c <driveAD+0x23c>)
 800516a:	7853      	ldrb	r3, [r2, #1]
 800516c:	f043 0310 	orr.w	r3, r3, #16
 8005170:	7053      	strb	r3, [r2, #1]
	MF.FLAG.XCTRL = 0;
 8005172:	4a7a      	ldr	r2, [pc, #488]	; (800535c <driveAD+0x23c>)
 8005174:	7853      	ldrb	r3, [r2, #1]
 8005176:	f36f 03c3 	bfc	r3, #3, #1
 800517a:	7053      	strb	r3, [r2, #1]

	MF.FLAG.WACCL = 1;
 800517c:	4a77      	ldr	r2, [pc, #476]	; (800535c <driveAD+0x23c>)
 800517e:	7853      	ldrb	r3, [r2, #1]
 8005180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005184:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WDECL = 0;
 8005186:	4a75      	ldr	r2, [pc, #468]	; (800535c <driveAD+0x23c>)
 8005188:	7853      	ldrb	r3, [r2, #1]
 800518a:	f36f 13c7 	bfc	r3, #7, #1
 800518e:	7053      	strb	r3, [r2, #1]
	MF.FLAG.ACCL = 0;
 8005190:	4a72      	ldr	r2, [pc, #456]	; (800535c <driveAD+0x23c>)
 8005192:	7813      	ldrb	r3, [r2, #0]
 8005194:	f36f 1304 	bfc	r3, #4, #1
 8005198:	7013      	strb	r3, [r2, #0]
	MF.FLAG.DECL = 0;
 800519a:	4a70      	ldr	r2, [pc, #448]	; (800535c <driveAD+0x23c>)
 800519c:	7813      	ldrb	r3, [r2, #0]
 800519e:	f36f 1345 	bfc	r3, #5, #1
 80051a2:	7013      	strb	r3, [r2, #0]

	MF.FLAG.REVOL = 1;
 80051a4:	4a6d      	ldr	r2, [pc, #436]	; (800535c <driveAD+0x23c>)
 80051a6:	7813      	ldrb	r3, [r2, #0]
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	7013      	strb	r3, [r2, #0]

	//走行距離をリセット
	reset_distance();
 80051ae:	f7ff fc27 	bl	8004a00 <reset_distance>

	offset = (0.5 * maxindex_w * params_now.omega_max) * KWP;	//減速に必要な角度の絶対値計算
 80051b2:	4b6b      	ldr	r3, [pc, #428]	; (8005360 <driveAD+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb f9c6 	bl	8000548 <__aeabi_f2d>
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	4b68      	ldr	r3, [pc, #416]	; (8005364 <driveAD+0x244>)
 80051c2:	f7fb fa19 	bl	80005f8 <__aeabi_dmul>
 80051c6:	4603      	mov	r3, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	4625      	mov	r5, r4
 80051cc:	461c      	mov	r4, r3
 80051ce:	4b66      	ldr	r3, [pc, #408]	; (8005368 <driveAD+0x248>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fb f9b8 	bl	8000548 <__aeabi_f2d>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb fa0a 	bl	80005f8 <__aeabi_dmul>
 80051e4:	4603      	mov	r3, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	4618      	mov	r0, r3
 80051ea:	4621      	mov	r1, r4
 80051ec:	a358      	add	r3, pc, #352	; (adr r3, 8005350 <driveAD+0x230>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb fa01 	bl	80005f8 <__aeabi_dmul>
 80051f6:	4603      	mov	r3, r0
 80051f8:	460c      	mov	r4, r1
 80051fa:	4618      	mov	r0, r3
 80051fc:	4621      	mov	r1, r4
 80051fe:	f7fb fcd3 	bl	8000ba8 <__aeabi_d2f>
 8005202:	4603      	mov	r3, r0
 8005204:	60fb      	str	r3, [r7, #12]
	centor.vel_target = 0;
 8005206:	4b54      	ldr	r3, [pc, #336]	; (8005358 <driveAD+0x238>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	605a      	str	r2, [r3, #4]
	omega.target = 0;
 800520e:	4b57      	ldr	r3, [pc, #348]	; (800536c <driveAD+0x24c>)
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

	drive_start();			//走行開始
 8005216:	f000 fa5b 	bl	80056d0 <drive_start>

	if(theta > 0){
 800521a:	edd7 7a01 	vldr	s15, [r7, #4]
 800521e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	dd3a      	ble.n	800529e <driveAD+0x17e>
		//----走行----
		while(centor.angle < theta - offset);				//w-tグラフにおける速度増加部の面積　⇒　現在の回転角度
 8005228:	bf00      	nop
 800522a:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <driveAD+0x238>)
 800522c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005230:	edd7 6a01 	vldr	s13, [r7, #4]
 8005234:	edd7 7a03 	vldr	s15, [r7, #12]
 8005238:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800523c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005244:	d4f1      	bmi.n	800522a <driveAD+0x10a>
		MF.FLAG.WACCL = 0;
 8005246:	4a45      	ldr	r2, [pc, #276]	; (800535c <driveAD+0x23c>)
 8005248:	7853      	ldrb	r3, [r2, #1]
 800524a:	f36f 1386 	bfc	r3, #6, #1
 800524e:	7053      	strb	r3, [r2, #1]
		MF.FLAG.WDECL = 1;
 8005250:	4a42      	ldr	r2, [pc, #264]	; (800535c <driveAD+0x23c>)
 8005252:	7853      	ldrb	r3, [r2, #1]
 8005254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005258:	7053      	strb	r3, [r2, #1]
		vel_ctrl_R.i_out = vel_ctrl_L.i_out = 0;
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	4a44      	ldr	r2, [pc, #272]	; (8005370 <driveAD+0x250>)
 8005260:	6113      	str	r3, [r2, #16]
 8005262:	4a44      	ldr	r2, [pc, #272]	; (8005374 <driveAD+0x254>)
 8005264:	6113      	str	r3, [r2, #16]
		omega.i_out = 0;
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <driveAD+0x24c>)
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	60da      	str	r2, [r3, #12]

		while(centor.angle < theta) {
 800526e:	e00b      	b.n	8005288 <driveAD+0x168>
			if(omega.target == 0){
 8005270:	4b3e      	ldr	r3, [pc, #248]	; (800536c <driveAD+0x24c>)
 8005272:	edd3 7a00 	vldr	s15, [r3]
 8005276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d103      	bne.n	8005288 <driveAD+0x168>
				ms_wait(100);
 8005280:	2064      	movs	r0, #100	; 0x64
 8005282:	f7ff f945 	bl	8004510 <ms_wait>
				break;
 8005286:	e04b      	b.n	8005320 <driveAD+0x200>
		while(centor.angle < theta) {
 8005288:	4b33      	ldr	r3, [pc, #204]	; (8005358 <driveAD+0x238>)
 800528a:	edd3 7a07 	vldr	s15, [r3, #28]
 800528e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	dce9      	bgt.n	8005270 <driveAD+0x150>
 800529c:	e040      	b.n	8005320 <driveAD+0x200>
			}
		}
	}else if (theta < 0){
 800529e:	edd7 7a01 	vldr	s15, [r7, #4]
 80052a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052aa:	d539      	bpl.n	8005320 <driveAD+0x200>
		while(centor.angle > theta + offset);
 80052ac:	bf00      	nop
 80052ae:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <driveAD+0x238>)
 80052b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80052b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80052b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80052bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c8:	dcf1      	bgt.n	80052ae <driveAD+0x18e>
		MF.FLAG.WACCL = 0;
 80052ca:	4a24      	ldr	r2, [pc, #144]	; (800535c <driveAD+0x23c>)
 80052cc:	7853      	ldrb	r3, [r2, #1]
 80052ce:	f36f 1386 	bfc	r3, #6, #1
 80052d2:	7053      	strb	r3, [r2, #1]
		MF.FLAG.WDECL = 1;
 80052d4:	4a21      	ldr	r2, [pc, #132]	; (800535c <driveAD+0x23c>)
 80052d6:	7853      	ldrb	r3, [r2, #1]
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	7053      	strb	r3, [r2, #1]
		vel_ctrl_R.i_out = vel_ctrl_L.i_out = 0;
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	4a23      	ldr	r2, [pc, #140]	; (8005370 <driveAD+0x250>)
 80052e4:	6113      	str	r3, [r2, #16]
 80052e6:	4a23      	ldr	r2, [pc, #140]	; (8005374 <driveAD+0x254>)
 80052e8:	6113      	str	r3, [r2, #16]
		omega.i_out = 0;
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <driveAD+0x24c>)
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	60da      	str	r2, [r3, #12]

		while(centor.angle > theta) {
 80052f2:	e00b      	b.n	800530c <driveAD+0x1ec>
			if(omega.target == 0){
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <driveAD+0x24c>)
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005302:	d103      	bne.n	800530c <driveAD+0x1ec>
				ms_wait(100);
 8005304:	2064      	movs	r0, #100	; 0x64
 8005306:	f7ff f903 	bl	8004510 <ms_wait>
				break;
 800530a:	e009      	b.n	8005320 <driveAD+0x200>
		while(centor.angle > theta) {
 800530c:	4b12      	ldr	r3, [pc, #72]	; (8005358 <driveAD+0x238>)
 800530e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005312:	ed97 7a01 	vldr	s14, [r7, #4]
 8005316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	d4e9      	bmi.n	80052f4 <driveAD+0x1d4>
		}
	}


	//----停止許可があれば停止----
	drive_stop(1);
 8005320:	2001      	movs	r0, #1
 8005322:	f000 f9dc 	bl	80056de <drive_stop>
	vel_ctrl_R.i_out = vel_ctrl_L.i_out = 0;
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	4a11      	ldr	r2, [pc, #68]	; (8005370 <driveAD+0x250>)
 800532c:	6113      	str	r3, [r2, #16]
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <driveAD+0x254>)
 8005330:	6113      	str	r3, [r2, #16]
	omega.i_out = 0;
 8005332:	4b0e      	ldr	r3, [pc, #56]	; (800536c <driveAD+0x24c>)
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
	MF.FLAG.REVOL = 0;
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <driveAD+0x23c>)
 800533c:	7813      	ldrb	r3, [r2, #0]
 800533e:	f36f 13c7 	bfc	r3, #7, #1
 8005342:	7013      	strb	r3, [r2, #0]

}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bdb0      	pop	{r4, r5, r7, pc}
 800534c:	f3af 8000 	nop.w
 8005350:	ba5e353f 	.word	0xba5e353f
 8005354:	404cbc49 	.word	0x404cbc49
 8005358:	200006fc 	.word	0x200006fc
 800535c:	200006e8 	.word	0x200006e8
 8005360:	200003c8 	.word	0x200003c8
 8005364:	3fe00000 	.word	0x3fe00000
 8005368:	20000458 	.word	0x20000458
 800536c:	20000480 	.word	0x20000480
 8005370:	20000378 	.word	0x20000378
 8005374:	20000258 	.word	0x20000258

08005378 <driveC>:
// 引数1：dist・・・走行するパルス
// 引数2：rs・・・走行後停止するか　1:する　それ以外:しない
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t count, unsigned char rs)			//引数　時間　停止許可　＊時間制限でモータ回せる関数
{
 8005378:	b5b0      	push	{r4, r5, r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	460a      	mov	r2, r1
 8005382:	80fb      	strh	r3, [r7, #6]
 8005384:	4613      	mov	r3, r2
 8005386:	717b      	strb	r3, [r7, #5]

	reset_distance();
 8005388:	f7ff fb3a 	bl	8004a00 <reset_distance>
	centor.vel_target = omega.target = 0;
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	4a3e      	ldr	r2, [pc, #248]	; (800548c <driveC+0x114>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4a3e      	ldr	r2, [pc, #248]	; (8005490 <driveC+0x118>)
 8005396:	6053      	str	r3, [r2, #4]

	//====回転開始====
	MF.FLAG.VCTRL = 1;
 8005398:	4a3e      	ldr	r2, [pc, #248]	; (8005494 <driveC+0x11c>)
 800539a:	7853      	ldrb	r3, [r2, #1]
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	7053      	strb	r3, [r2, #1]
	MF.FLAG.ACTRL = 0;
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <driveC+0x11c>)
 80053a4:	7853      	ldrb	r3, [r2, #1]
 80053a6:	f36f 1345 	bfc	r3, #5, #1
 80053aa:	7053      	strb	r3, [r2, #1]
	MF.FLAG.XCTRL = 0;
 80053ac:	4a39      	ldr	r2, [pc, #228]	; (8005494 <driveC+0x11c>)
 80053ae:	7853      	ldrb	r3, [r2, #1]
 80053b0:	f36f 03c3 	bfc	r3, #3, #1
 80053b4:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WCTRL = 1;
 80053b6:	4a37      	ldr	r2, [pc, #220]	; (8005494 <driveC+0x11c>)
 80053b8:	7853      	ldrb	r3, [r2, #1]
 80053ba:	f043 0310 	orr.w	r3, r3, #16
 80053be:	7053      	strb	r3, [r2, #1]

	MF.FLAG.ACCL = 1;
 80053c0:	4a34      	ldr	r2, [pc, #208]	; (8005494 <driveC+0x11c>)
 80053c2:	7813      	ldrb	r3, [r2, #0]
 80053c4:	f043 0310 	orr.w	r3, r3, #16
 80053c8:	7013      	strb	r3, [r2, #0]
	MF.FLAG.DECL = 0;
 80053ca:	4a32      	ldr	r2, [pc, #200]	; (8005494 <driveC+0x11c>)
 80053cc:	7813      	ldrb	r3, [r2, #0]
 80053ce:	f36f 1345 	bfc	r3, #5, #1
 80053d2:	7013      	strb	r3, [r2, #0]
	MF.FLAG.WACCL = 0;
 80053d4:	4a2f      	ldr	r2, [pc, #188]	; (8005494 <driveC+0x11c>)
 80053d6:	7853      	ldrb	r3, [r2, #1]
 80053d8:	f36f 1386 	bfc	r3, #6, #1
 80053dc:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WDECL = 0;
 80053de:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <driveC+0x11c>)
 80053e0:	7853      	ldrb	r3, [r2, #1]
 80053e2:	f36f 13c7 	bfc	r3, #7, #1
 80053e6:	7053      	strb	r3, [r2, #1]

	drive_start();											//走行開始
 80053e8:	f000 f972 	bl	80056d0 <drive_start>

	//====回転====
	while(time < count * 0.5);			//一定時間経過まで待機
 80053ec:	bf00      	nop
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <driveC+0x120>)
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fb f895 	bl	8000524 <__aeabi_i2d>
 80053fa:	4604      	mov	r4, r0
 80053fc:	460d      	mov	r5, r1
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	4618      	mov	r0, r3
 8005402:	f7fb f88f 	bl	8000524 <__aeabi_i2d>
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <driveC+0x124>)
 800540c:	f7fb f8f4 	bl	80005f8 <__aeabi_dmul>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4620      	mov	r0, r4
 8005416:	4629      	mov	r1, r5
 8005418:	f7fb fb60 	bl	8000adc <__aeabi_dcmplt>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <driveC+0x76>
	MF.FLAG.ACCL = 0;
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <driveC+0x11c>)
 8005424:	7813      	ldrb	r3, [r2, #0]
 8005426:	f36f 1304 	bfc	r3, #4, #1
 800542a:	7013      	strb	r3, [r2, #0]
	MF.FLAG.DECL = 1;
 800542c:	4a19      	ldr	r2, [pc, #100]	; (8005494 <driveC+0x11c>)
 800542e:	7813      	ldrb	r3, [r2, #0]
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	7013      	strb	r3, [r2, #0]
	while(time < count);
 8005436:	bf00      	nop
 8005438:	4b17      	ldr	r3, [pc, #92]	; (8005498 <driveC+0x120>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	429a      	cmp	r2, r3
 8005442:	d8f9      	bhi.n	8005438 <driveC+0xc0>

	if(rs){
 8005444:	797b      	ldrb	r3, [r7, #5]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <driveC+0xe6>
		vel_ctrl_R.dir = vel_ctrl_L.dir = 0;
 800544a:	2100      	movs	r1, #0
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <driveC+0x128>)
 800544e:	460a      	mov	r2, r1
 8005450:	751a      	strb	r2, [r3, #20]
 8005452:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <driveC+0x12c>)
 8005454:	460a      	mov	r2, r1
 8005456:	751a      	strb	r2, [r3, #20]
		ms_wait(100);			//速度がゼロに収束するまで待つ
 8005458:	2064      	movs	r0, #100	; 0x64
 800545a:	f7ff f859 	bl	8004510 <ms_wait>
	}
	//----停止許可があれば停止----
	drive_stop(rs);											//走行終了、停止許可があれば停止
 800545e:	797b      	ldrb	r3, [r7, #5]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f93c 	bl	80056de <drive_stop>

	centor.vel_target = 0;
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <driveC+0x118>)
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	605a      	str	r2, [r3, #4]

	vel_ctrl_R.i_out = vel_ctrl_L.i_out = 0;
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <driveC+0x128>)
 8005474:	6113      	str	r3, [r2, #16]
 8005476:	4a0b      	ldr	r2, [pc, #44]	; (80054a4 <driveC+0x12c>)
 8005478:	6113      	str	r3, [r2, #16]
	omega.i_out = 0;
 800547a:	4b04      	ldr	r3, [pc, #16]	; (800548c <driveC+0x114>)
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	60da      	str	r2, [r3, #12]
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bdb0      	pop	{r4, r5, r7, pc}
 800548a:	bf00      	nop
 800548c:	20000480 	.word	0x20000480
 8005490:	200006fc 	.word	0x200006fc
 8005494:	200006e8 	.word	0x200006e8
 8005498:	20000450 	.word	0x20000450
 800549c:	3fe00000 	.word	0x3fe00000
 80054a0:	20000378 	.word	0x20000378
 80054a4:	20000258 	.word	0x20000258

080054a8 <driveW>:
// 引数1：theta・・・目標角度
// 引数2：rs・・・走行後停止するか　1:する　それ以外:しない
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveW(int16_t theta)			//引数　時間　停止許可
{
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
	float offset = 0;
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
	reset_distance();
 80054b8:	f7ff faa2 	bl	8004a00 <reset_distance>

	centor.angle = 0;
 80054bc:	4b7c      	ldr	r3, [pc, #496]	; (80056b0 <driveW+0x208>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	61da      	str	r2, [r3, #28]
	omega.target = 0;
 80054c4:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <driveW+0x20c>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

	//====回転開始====
	MF.FLAG.VCTRL = 1;
 80054cc:	4a7a      	ldr	r2, [pc, #488]	; (80056b8 <driveW+0x210>)
 80054ce:	7853      	ldrb	r3, [r2, #1]
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	7053      	strb	r3, [r2, #1]
	MF.FLAG.ACTRL = 0;
 80054d6:	4a78      	ldr	r2, [pc, #480]	; (80056b8 <driveW+0x210>)
 80054d8:	7853      	ldrb	r3, [r2, #1]
 80054da:	f36f 1345 	bfc	r3, #5, #1
 80054de:	7053      	strb	r3, [r2, #1]
	MF.FLAG.XCTRL = 0;
 80054e0:	4a75      	ldr	r2, [pc, #468]	; (80056b8 <driveW+0x210>)
 80054e2:	7853      	ldrb	r3, [r2, #1]
 80054e4:	f36f 03c3 	bfc	r3, #3, #1
 80054e8:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WCTRL = 1;
 80054ea:	4a73      	ldr	r2, [pc, #460]	; (80056b8 <driveW+0x210>)
 80054ec:	7853      	ldrb	r3, [r2, #1]
 80054ee:	f043 0310 	orr.w	r3, r3, #16
 80054f2:	7053      	strb	r3, [r2, #1]

	if(theta > 0){				//左旋回
 80054f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dd03      	ble.n	8005504 <driveW+0x5c>
		centor.omega_dir = 1;
 80054fc:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <driveW+0x208>)
 80054fe:	2201      	movs	r2, #1
 8005500:	751a      	strb	r2, [r3, #20]
 8005502:	e006      	b.n	8005512 <driveW+0x6a>
	}else if(theta < 0){			//右旋回
 8005504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da02      	bge.n	8005512 <driveW+0x6a>
		centor.omega_dir = -1;
 800550c:	4b68      	ldr	r3, [pc, #416]	; (80056b0 <driveW+0x208>)
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	751a      	strb	r2, [r3, #20]
	}

	MF.FLAG.ACCL = 1;
 8005512:	4a69      	ldr	r2, [pc, #420]	; (80056b8 <driveW+0x210>)
 8005514:	7813      	ldrb	r3, [r2, #0]
 8005516:	f043 0310 	orr.w	r3, r3, #16
 800551a:	7013      	strb	r3, [r2, #0]
	MF.FLAG.DECL = 0;
 800551c:	4a66      	ldr	r2, [pc, #408]	; (80056b8 <driveW+0x210>)
 800551e:	7813      	ldrb	r3, [r2, #0]
 8005520:	f36f 1345 	bfc	r3, #5, #1
 8005524:	7013      	strb	r3, [r2, #0]
	MF.FLAG.WACCL = 1;
 8005526:	4a64      	ldr	r2, [pc, #400]	; (80056b8 <driveW+0x210>)
 8005528:	7853      	ldrb	r3, [r2, #1]
 800552a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552e:	7053      	strb	r3, [r2, #1]
	MF.FLAG.WDECL = 0;
 8005530:	4a61      	ldr	r2, [pc, #388]	; (80056b8 <driveW+0x210>)
 8005532:	7853      	ldrb	r3, [r2, #1]
 8005534:	f36f 13c7 	bfc	r3, #7, #1
 8005538:	7053      	strb	r3, [r2, #1]

	drive_start();
 800553a:	f000 f8c9 	bl	80056d0 <drive_start>

	offset = (0.5 * maxindex_w * params_now.omega_max) * KWP;
 800553e:	4b5f      	ldr	r3, [pc, #380]	; (80056bc <driveW+0x214>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb f800 	bl	8000548 <__aeabi_f2d>
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	4b5c      	ldr	r3, [pc, #368]	; (80056c0 <driveW+0x218>)
 800554e:	f7fb f853 	bl	80005f8 <__aeabi_dmul>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	4625      	mov	r5, r4
 8005558:	461c      	mov	r4, r3
 800555a:	4b5a      	ldr	r3, [pc, #360]	; (80056c4 <driveW+0x21c>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f7fa fff2 	bl	8000548 <__aeabi_f2d>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4620      	mov	r0, r4
 800556a:	4629      	mov	r1, r5
 800556c:	f7fb f844 	bl	80005f8 <__aeabi_dmul>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	4618      	mov	r0, r3
 8005576:	4621      	mov	r1, r4
 8005578:	a34b      	add	r3, pc, #300	; (adr r3, 80056a8 <driveW+0x200>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fb f83b 	bl	80005f8 <__aeabi_dmul>
 8005582:	4603      	mov	r3, r0
 8005584:	460c      	mov	r4, r1
 8005586:	4618      	mov	r0, r3
 8005588:	4621      	mov	r1, r4
 800558a:	f7fb fb0d 	bl	8000ba8 <__aeabi_d2f>
 800558e:	4603      	mov	r3, r0
 8005590:	60fb      	str	r3, [r7, #12]
	//====回転====
	if(centor.omega_dir == 1){				//左旋回
 8005592:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <driveW+0x208>)
 8005594:	7d1b      	ldrb	r3, [r3, #20]
 8005596:	b25b      	sxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d134      	bne.n	8005606 <driveW+0x15e>
		while(centor.angle + offset < theta);
 800559c:	bf00      	nop
 800559e:	4b44      	ldr	r3, [pc, #272]	; (80056b0 <driveW+0x208>)
 80055a0:	ed93 7a07 	vldr	s14, [r3, #28]
 80055a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80055a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c0:	d4ed      	bmi.n	800559e <driveW+0xf6>
		MF.FLAG.WACCL = 0;
 80055c2:	4a3d      	ldr	r2, [pc, #244]	; (80056b8 <driveW+0x210>)
 80055c4:	7853      	ldrb	r3, [r2, #1]
 80055c6:	f36f 1386 	bfc	r3, #6, #1
 80055ca:	7053      	strb	r3, [r2, #1]
		MF.FLAG.WDECL = 1;
 80055cc:	4a3a      	ldr	r2, [pc, #232]	; (80056b8 <driveW+0x210>)
 80055ce:	7853      	ldrb	r3, [r2, #1]
 80055d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d4:	7053      	strb	r3, [r2, #1]

		while(centor.angle  < theta){
 80055d6:	e007      	b.n	80055e8 <driveW+0x140>
			if(omega.target == 0){
 80055d8:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <driveW+0x20c>)
 80055da:	edd3 7a00 	vldr	s15, [r3]
 80055de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80055e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e6:	d049      	beq.n	800567c <driveW+0x1d4>
		while(centor.angle  < theta){
 80055e8:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <driveW+0x208>)
 80055ea:	ed93 7a07 	vldr	s14, [r3, #28]
 80055ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005602:	d4e9      	bmi.n	80055d8 <driveW+0x130>
 8005604:	e03d      	b.n	8005682 <driveW+0x1da>
				break;
			}
		}
	} else if(centor.omega_dir == -1){			//右旋回
 8005606:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <driveW+0x208>)
 8005608:	7d1b      	ldrb	r3, [r3, #20]
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d137      	bne.n	8005682 <driveW+0x1da>

		while(centor.angle - offset > theta);
 8005612:	bf00      	nop
 8005614:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <driveW+0x208>)
 8005616:	ed93 7a07 	vldr	s14, [r3, #28]
 800561a:	edd7 7a03 	vldr	s15, [r7, #12]
 800561e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800562e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	dced      	bgt.n	8005614 <driveW+0x16c>
		MF.FLAG.WACCL = 0;
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <driveW+0x210>)
 800563a:	7853      	ldrb	r3, [r2, #1]
 800563c:	f36f 1386 	bfc	r3, #6, #1
 8005640:	7053      	strb	r3, [r2, #1]
		MF.FLAG.WDECL = 1;
 8005642:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <driveW+0x210>)
 8005644:	7853      	ldrb	r3, [r2, #1]
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	7053      	strb	r3, [r2, #1]

		while(centor.angle > theta){
 800564c:	e007      	b.n	800565e <driveW+0x1b6>
			if(omega.target == 0){
 800564e:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <driveW+0x20c>)
 8005650:	edd3 7a00 	vldr	s15, [r3]
 8005654:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565c:	d010      	beq.n	8005680 <driveW+0x1d8>
		while(centor.angle > theta){
 800565e:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <driveW+0x208>)
 8005660:	ed93 7a07 	vldr	s14, [r3, #28]
 8005664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	dce9      	bgt.n	800564e <driveW+0x1a6>
 800567a:	e002      	b.n	8005682 <driveW+0x1da>
				break;
 800567c:	bf00      	nop
 800567e:	e000      	b.n	8005682 <driveW+0x1da>
				break;
 8005680:	bf00      	nop
			}
		}
	}

	omega.dir = 0;
 8005682:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <driveW+0x20c>)
 8005684:	2200      	movs	r2, #0
 8005686:	741a      	strb	r2, [r3, #16]
	//centor.angle = 0;
	vel_ctrl_R.i_out = vel_ctrl_L.i_out = 0;
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <driveW+0x220>)
 800568e:	6113      	str	r3, [r2, #16]
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <driveW+0x224>)
 8005692:	6113      	str	r3, [r2, #16]
	omega.i_out = 0;
 8005694:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <driveW+0x20c>)
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	60da      	str	r2, [r3, #12]

}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bdb0      	pop	{r4, r5, r7, pc}
 80056a4:	f3af 8000 	nop.w
 80056a8:	ba5e353f 	.word	0xba5e353f
 80056ac:	404cbc49 	.word	0x404cbc49
 80056b0:	200006fc 	.word	0x200006fc
 80056b4:	20000480 	.word	0x20000480
 80056b8:	200006e8 	.word	0x200006e8
 80056bc:	200003c8 	.word	0x200003c8
 80056c0:	3fe00000 	.word	0x3fe00000
 80056c4:	20000458 	.word	0x20000458
 80056c8:	20000378 	.word	0x20000378
 80056cc:	20000258 	.word	0x20000258

080056d0 <drive_start>:
//drive_start
//	走行を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
/*	time = 0;
	R_PG_Timer_StartCount_MTU_U0_C3();  //左モータ
	R_PG_Timer_StartCount_MTU_U0_C4();
*/
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <drive_stop>:
//drive_stop
//	走行終了し、停止許可があれば停止する
// 引数1：rs・・・走行後停止するか　1:する　それ以外:しない
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(unsigned char rs){
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4603      	mov	r3, r0
 80056e6:	71fb      	strb	r3, [r7, #7]
	pin_write(P54,0);
	pin_write(P55,0);
	pin_write(PA4,0);
	pin_write(PA6,0);
*/
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <set_dir>:
// 引数1：d_dir・・・どの方向に進行するか  0桁目で左、1桁目で右の方向設定
// 戻り値：なし
//		DC用に改造完了
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_dir(unsigned char d_dir)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
	//====左モータ====
	switch(d_dir & 0x0f){									//0~3ビット目を取り出す
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <set_dir+0x1a>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d009      	beq.n	8005720 <set_dir+0x2c>
 800570c:	e011      	b.n	8005732 <set_dir+0x3e>
		//----正回転----
		case 0x00:
			MF.FLAG.L_DIR = 1;				//左を前進方向に設定
 800570e:	4a19      	ldr	r2, [pc, #100]	; (8005774 <set_dir+0x80>)
 8005710:	7853      	ldrb	r3, [r2, #1]
 8005712:	f043 0302 	orr.w	r3, r3, #2
 8005716:	7053      	strb	r3, [r2, #1]
			vel_ctrl_L.dir= 1;
 8005718:	4b17      	ldr	r3, [pc, #92]	; (8005778 <set_dir+0x84>)
 800571a:	2201      	movs	r2, #1
 800571c:	751a      	strb	r2, [r3, #20]
			break;
 800571e:	e008      	b.n	8005732 <set_dir+0x3e>
		//----逆回転----
		case 0x01:
			MF.FLAG.L_DIR = 0;				//左を後進方向に設定
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <set_dir+0x80>)
 8005722:	7853      	ldrb	r3, [r2, #1]
 8005724:	f36f 0341 	bfc	r3, #1, #1
 8005728:	7053      	strb	r3, [r2, #1]
			vel_ctrl_L.dir = -1;
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <set_dir+0x84>)
 800572c:	22ff      	movs	r2, #255	; 0xff
 800572e:	751a      	strb	r2, [r3, #20]
			break;
 8005730:	bf00      	nop
	}
	//====右モータ====
	switch(d_dir & 0xf0){									//4~7ビット目を取り出す
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <set_dir+0x4e>
 800573c:	2b10      	cmp	r3, #16
 800573e:	d009      	beq.n	8005754 <set_dir+0x60>
		case 0x10:											//0x10の場合
			MF.FLAG.R_DIR = 0;					//右を後進方向に設定
			vel_ctrl_R.dir = -1;
			break;
	}
}
 8005740:	e011      	b.n	8005766 <set_dir+0x72>
			MF.FLAG.R_DIR = 1;					//右を前進方向に設定
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <set_dir+0x80>)
 8005744:	7853      	ldrb	r3, [r2, #1]
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	7053      	strb	r3, [r2, #1]
			vel_ctrl_R.dir = 1;
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <set_dir+0x88>)
 800574e:	2201      	movs	r2, #1
 8005750:	751a      	strb	r2, [r3, #20]
			break;
 8005752:	e008      	b.n	8005766 <set_dir+0x72>
			MF.FLAG.R_DIR = 0;					//右を後進方向に設定
 8005754:	4a07      	ldr	r2, [pc, #28]	; (8005774 <set_dir+0x80>)
 8005756:	7853      	ldrb	r3, [r2, #1]
 8005758:	f36f 0300 	bfc	r3, #0, #1
 800575c:	7053      	strb	r3, [r2, #1]
			vel_ctrl_R.dir = -1;
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <set_dir+0x88>)
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	751a      	strb	r2, [r3, #20]
			break;
 8005764:	bf00      	nop
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	200006e8 	.word	0x200006e8
 8005778:	20000378 	.word	0x20000378
 800577c:	20000258 	.word	0x20000258

08005780 <VariableInit>:
#include <Mouse/global.h>
/*============================================================
		初期化関数
============================================================*/
// Variable Initializing
void VariableInit(void){
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0

	float val1 = 0;
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	607b      	str	r3, [r7, #4]
	uint8_t i;
	//----壁センサ系----
	tp = 0;
 800578c:	4baa      	ldr	r3, [pc, #680]	; (8005a38 <VariableInit+0x2b8>)
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]
	wall_l.dif = wall_r.dif = wall_fl.dif = wall_fr.dif = wall_ff.dif = 0;
 8005792:	2200      	movs	r2, #0
 8005794:	4ba9      	ldr	r3, [pc, #676]	; (8005a3c <VariableInit+0x2bc>)
 8005796:	4611      	mov	r1, r2
 8005798:	80d9      	strh	r1, [r3, #6]
 800579a:	4ba9      	ldr	r3, [pc, #676]	; (8005a40 <VariableInit+0x2c0>)
 800579c:	4611      	mov	r1, r2
 800579e:	80d9      	strh	r1, [r3, #6]
 80057a0:	4ba8      	ldr	r3, [pc, #672]	; (8005a44 <VariableInit+0x2c4>)
 80057a2:	4611      	mov	r1, r2
 80057a4:	80d9      	strh	r1, [r3, #6]
 80057a6:	4ba8      	ldr	r3, [pc, #672]	; (8005a48 <VariableInit+0x2c8>)
 80057a8:	4611      	mov	r1, r2
 80057aa:	80d9      	strh	r1, [r3, #6]
 80057ac:	4ba7      	ldr	r3, [pc, #668]	; (8005a4c <VariableInit+0x2cc>)
 80057ae:	80da      	strh	r2, [r3, #6]
	wall_l.val = wall_r.val = wall_fl.val = wall_fr.val = wall_ff.val = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	4aa2      	ldr	r2, [pc, #648]	; (8005a3c <VariableInit+0x2bc>)
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4aa2      	ldr	r2, [pc, #648]	; (8005a40 <VariableInit+0x2c0>)
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	4aa2      	ldr	r2, [pc, #648]	; (8005a44 <VariableInit+0x2c4>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4aa2      	ldr	r2, [pc, #648]	; (8005a48 <VariableInit+0x2c8>)
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4aa2      	ldr	r2, [pc, #648]	; (8005a4c <VariableInit+0x2cc>)
 80057c4:	6013      	str	r3, [r2, #0]
	wall_l.base = wall_r.base = wall_fl.base = wall_fr.base = wall_ff.base = 0;
 80057c6:	2200      	movs	r2, #0
 80057c8:	4b9c      	ldr	r3, [pc, #624]	; (8005a3c <VariableInit+0x2bc>)
 80057ca:	4611      	mov	r1, r2
 80057cc:	8099      	strh	r1, [r3, #4]
 80057ce:	4b9c      	ldr	r3, [pc, #624]	; (8005a40 <VariableInit+0x2c0>)
 80057d0:	4611      	mov	r1, r2
 80057d2:	8099      	strh	r1, [r3, #4]
 80057d4:	4b9b      	ldr	r3, [pc, #620]	; (8005a44 <VariableInit+0x2c4>)
 80057d6:	4611      	mov	r1, r2
 80057d8:	8099      	strh	r1, [r3, #4]
 80057da:	4b9b      	ldr	r3, [pc, #620]	; (8005a48 <VariableInit+0x2c8>)
 80057dc:	4611      	mov	r1, r2
 80057de:	8099      	strh	r1, [r3, #4]
 80057e0:	4b9a      	ldr	r3, [pc, #616]	; (8005a4c <VariableInit+0x2cc>)
 80057e2:	809a      	strh	r2, [r3, #4]
	wall_l.threshold = wall_r.threshold = wall_fl.threshold = wall_fr.threshold = wall_ff.threshold = 0;
 80057e4:	2200      	movs	r2, #0
 80057e6:	4b95      	ldr	r3, [pc, #596]	; (8005a3c <VariableInit+0x2bc>)
 80057e8:	4611      	mov	r1, r2
 80057ea:	8199      	strh	r1, [r3, #12]
 80057ec:	4b94      	ldr	r3, [pc, #592]	; (8005a40 <VariableInit+0x2c0>)
 80057ee:	4611      	mov	r1, r2
 80057f0:	8199      	strh	r1, [r3, #12]
 80057f2:	4b94      	ldr	r3, [pc, #592]	; (8005a44 <VariableInit+0x2c4>)
 80057f4:	4611      	mov	r1, r2
 80057f6:	8199      	strh	r1, [r3, #12]
 80057f8:	4b93      	ldr	r3, [pc, #588]	; (8005a48 <VariableInit+0x2c8>)
 80057fa:	4611      	mov	r1, r2
 80057fc:	8199      	strh	r1, [r3, #12]
 80057fe:	4b93      	ldr	r3, [pc, #588]	; (8005a4c <VariableInit+0x2cc>)
 8005800:	819a      	strh	r2, [r3, #12]
	time = 0;
 8005802:	4b93      	ldr	r3, [pc, #588]	; (8005a50 <VariableInit+0x2d0>)
 8005804:	2200      	movs	r2, #0
 8005806:	801a      	strh	r2, [r3, #0]
	time2 = 0;
 8005808:	4b92      	ldr	r3, [pc, #584]	; (8005a54 <VariableInit+0x2d4>)
 800580a:	2200      	movs	r2, #0
 800580c:	801a      	strh	r2, [r3, #0]

	/*** encoder構造体の初期化 ***/
	encoder_r.pulse = 0;
 800580e:	4b92      	ldr	r3, [pc, #584]	; (8005a58 <VariableInit+0x2d8>)
 8005810:	2200      	movs	r2, #0
 8005812:	801a      	strh	r2, [r3, #0]
	encoder_r.dif = 0;
 8005814:	4b90      	ldr	r3, [pc, #576]	; (8005a58 <VariableInit+0x2d8>)
 8005816:	2200      	movs	r2, #0
 8005818:	805a      	strh	r2, [r3, #2]
	encoder_r.sum = 0;
 800581a:	4a8f      	ldr	r2, [pc, #572]	; (8005a58 <VariableInit+0x2d8>)
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	f04f 0400 	mov.w	r4, #0
 8005824:	e9c2 3402 	strd	r3, r4, [r2, #8]
	encoder_r.distance = 0;
 8005828:	4b8b      	ldr	r3, [pc, #556]	; (8005a58 <VariableInit+0x2d8>)
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	611a      	str	r2, [r3, #16]
	encoder_r.velocity = 0.0;
 8005830:	4b89      	ldr	r3, [pc, #548]	; (8005a58 <VariableInit+0x2d8>)
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	615a      	str	r2, [r3, #20]

	encoder_l.pulse = 0;
 8005838:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <VariableInit+0x2dc>)
 800583a:	2200      	movs	r2, #0
 800583c:	801a      	strh	r2, [r3, #0]
	encoder_l.dif = 0;
 800583e:	4b87      	ldr	r3, [pc, #540]	; (8005a5c <VariableInit+0x2dc>)
 8005840:	2200      	movs	r2, #0
 8005842:	805a      	strh	r2, [r3, #2]
	encoder_l.sum = 0;
 8005844:	4a85      	ldr	r2, [pc, #532]	; (8005a5c <VariableInit+0x2dc>)
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f04f 0400 	mov.w	r4, #0
 800584e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	encoder_l.distance = 0;
 8005852:	4b82      	ldr	r3, [pc, #520]	; (8005a5c <VariableInit+0x2dc>)
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	611a      	str	r2, [r3, #16]
	encoder_l.velocity = 0.0;
 800585a:	4b80      	ldr	r3, [pc, #512]	; (8005a5c <VariableInit+0x2dc>)
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	615a      	str	r2, [r3, #20]

	/*** vel_ctrl構造体の初期化 ***/
	vel_ctrl_R.real = 0;
 8005862:	4b7f      	ldr	r3, [pc, #508]	; (8005a60 <VariableInit+0x2e0>)
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
	vel_ctrl_R.dif = 0;
 800586a:	4b7d      	ldr	r3, [pc, #500]	; (8005a60 <VariableInit+0x2e0>)
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	605a      	str	r2, [r3, #4]
	vel_ctrl_R.pre = 0;
 8005872:	4b7b      	ldr	r3, [pc, #492]	; (8005a60 <VariableInit+0x2e0>)
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
	vel_ctrl_R.p_out = 0;
 800587a:	4b79      	ldr	r3, [pc, #484]	; (8005a60 <VariableInit+0x2e0>)
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	60da      	str	r2, [r3, #12]
	vel_ctrl_R.i_out = 0;
 8005882:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <VariableInit+0x2e0>)
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	611a      	str	r2, [r3, #16]
	vel_ctrl_R.dir = 1;
 800588a:	4b75      	ldr	r3, [pc, #468]	; (8005a60 <VariableInit+0x2e0>)
 800588c:	2201      	movs	r2, #1
 800588e:	751a      	strb	r2, [r3, #20]
	vel_ctrl_R.out = 0;
 8005890:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <VariableInit+0x2e0>)
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	619a      	str	r2, [r3, #24]

	vel_ctrl_L.real = 0;
 8005898:	4b72      	ldr	r3, [pc, #456]	; (8005a64 <VariableInit+0x2e4>)
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
	vel_ctrl_L.dif = 0;
 80058a0:	4b70      	ldr	r3, [pc, #448]	; (8005a64 <VariableInit+0x2e4>)
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]
	vel_ctrl_L.pre = 0;
 80058a8:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <VariableInit+0x2e4>)
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	609a      	str	r2, [r3, #8]
	vel_ctrl_L.p_out = 0;
 80058b0:	4b6c      	ldr	r3, [pc, #432]	; (8005a64 <VariableInit+0x2e4>)
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	60da      	str	r2, [r3, #12]
	vel_ctrl_L.i_out = 0;
 80058b8:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <VariableInit+0x2e4>)
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	611a      	str	r2, [r3, #16]
	vel_ctrl_L.dir = 1;
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <VariableInit+0x2e4>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	751a      	strb	r2, [r3, #20]
	vel_ctrl_L.out = 0;
 80058c6:	4b67      	ldr	r3, [pc, #412]	; (8005a64 <VariableInit+0x2e4>)
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	619a      	str	r2, [r3, #24]

	/*** omega_ctrl構造体の初期化 ***/
	omega.target = 0;
 80058ce:	4b66      	ldr	r3, [pc, #408]	; (8005a68 <VariableInit+0x2e8>)
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
	omega.dif = 0;
 80058d6:	4b64      	ldr	r3, [pc, #400]	; (8005a68 <VariableInit+0x2e8>)
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
	omega.p_out = 0;
 80058de:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <VariableInit+0x2e8>)
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
	omega.i_out = 0;
 80058e6:	4b60      	ldr	r3, [pc, #384]	; (8005a68 <VariableInit+0x2e8>)
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	60da      	str	r2, [r3, #12]
	omega.dir = 0;
 80058ee:	4b5e      	ldr	r3, [pc, #376]	; (8005a68 <VariableInit+0x2e8>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	741a      	strb	r2, [r3, #16]
	omega.out = 0;
 80058f4:	4b5c      	ldr	r3, [pc, #368]	; (8005a68 <VariableInit+0x2e8>)
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	615a      	str	r2, [r3, #20]

	//parameter 設定
	params_search1.vel_max = 0.50f;						//単位はm/s, mm/ms
 80058fc:	4b5b      	ldr	r3, [pc, #364]	; (8005a6c <VariableInit+0x2ec>)
 80058fe:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005902:	601a      	str	r2, [r3, #0]
	params_search1.accel = 4.0f;						//単位はm/s/s
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <VariableInit+0x2ec>)
 8005906:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800590a:	605a      	str	r2, [r3, #4]

	val1 = HALF_MM / params_search1.vel_max * 0.001; 			//並進速度で半区画進む時間[s]
 800590c:	4b57      	ldr	r3, [pc, #348]	; (8005a6c <VariableInit+0x2ec>)
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005a70 <VariableInit+0x2f0>
 8005916:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800591a:	ee16 0a90 	vmov	r0, s13
 800591e:	f7fa fe13 	bl	8000548 <__aeabi_f2d>
 8005922:	a341      	add	r3, pc, #260	; (adr r3, 8005a28 <VariableInit+0x2a8>)
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f7fa fe66 	bl	80005f8 <__aeabi_dmul>
 800592c:	4603      	mov	r3, r0
 800592e:	460c      	mov	r4, r1
 8005930:	4618      	mov	r0, r3
 8005932:	4621      	mov	r1, r4
 8005934:	f7fb f938 	bl	8000ba8 <__aeabi_d2f>
 8005938:	4603      	mov	r3, r0
 800593a:	607b      	str	r3, [r7, #4]
	params_search1.omega_max = 1.5 * Pi / 2 / val1;				//最高角速度[rad/s]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fa fe03 	bl	8000548 <__aeabi_f2d>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	461a      	mov	r2, r3
 8005948:	4623      	mov	r3, r4
 800594a:	a139      	add	r1, pc, #228	; (adr r1, 8005a30 <VariableInit+0x2b0>)
 800594c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005950:	f7fa ff7c 	bl	800084c <__aeabi_ddiv>
 8005954:	4603      	mov	r3, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4618      	mov	r0, r3
 800595a:	4621      	mov	r1, r4
 800595c:	f7fb f924 	bl	8000ba8 <__aeabi_d2f>
 8005960:	4602      	mov	r2, r0
 8005962:	4b42      	ldr	r3, [pc, #264]	; (8005a6c <VariableInit+0x2ec>)
 8005964:	609a      	str	r2, [r3, #8]
	params_search1.omega_accel = 3 * params_search1.omega_max / val1; 	//角加速度[rad/s/s]
 8005966:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <VariableInit+0x2ec>)
 8005968:	edd3 7a02 	vldr	s15, [r3, #8]
 800596c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005970:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005974:	ed97 7a01 	vldr	s14, [r7, #4]
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <VariableInit+0x2ec>)
 800597e:	edc3 7a03 	vstr	s15, [r3, #12]

	params_search1.R90_before = 30;		//35
 8005982:	4b3a      	ldr	r3, [pc, #232]	; (8005a6c <VariableInit+0x2ec>)
 8005984:	221e      	movs	r2, #30
 8005986:	741a      	strb	r2, [r3, #16]
	params_search1.R90_after = 45;
 8005988:	4b38      	ldr	r3, [pc, #224]	; (8005a6c <VariableInit+0x2ec>)
 800598a:	222d      	movs	r2, #45	; 0x2d
 800598c:	745a      	strb	r2, [r3, #17]
	params_search1.L90_before = 35;
 800598e:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <VariableInit+0x2ec>)
 8005990:	2223      	movs	r2, #35	; 0x23
 8005992:	749a      	strb	r2, [r3, #18]
	params_search1.L90_after = 50;
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <VariableInit+0x2ec>)
 8005996:	2232      	movs	r2, #50	; 0x32
 8005998:	74da      	strb	r2, [r3, #19]

//	params_search1.omega_max = 6.0f;			//単位はrad/s
//	params_search1.omega_accel = 25.0f;		//単位はrad/s/s

	/*** 探索用のゲイン構造体設定　***/
	gain_search1.vel_kpR = 14.0f;		//14.0
 800599a:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <VariableInit+0x2f4>)
 800599c:	4a36      	ldr	r2, [pc, #216]	; (8005a78 <VariableInit+0x2f8>)
 800599e:	601a      	str	r2, [r3, #0]
	gain_search1.vel_kpL = 14.0f;
 80059a0:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <VariableInit+0x2f4>)
 80059a2:	4a35      	ldr	r2, [pc, #212]	; (8005a78 <VariableInit+0x2f8>)
 80059a4:	605a      	str	r2, [r3, #4]
	gain_search1.vel_kiR = 0.05f;		//0.05
 80059a6:	4b33      	ldr	r3, [pc, #204]	; (8005a74 <VariableInit+0x2f4>)
 80059a8:	4a34      	ldr	r2, [pc, #208]	; (8005a7c <VariableInit+0x2fc>)
 80059aa:	609a      	str	r2, [r3, #8]
	gain_search1.vel_kiL = 0.05f;
 80059ac:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <VariableInit+0x2f4>)
 80059ae:	4a33      	ldr	r2, [pc, #204]	; (8005a7c <VariableInit+0x2fc>)
 80059b0:	60da      	str	r2, [r3, #12]
	gain_search1.omega_kp = 0.01f;		//1.3
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <VariableInit+0x2f4>)
 80059b4:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <VariableInit+0x300>)
 80059b6:	611a      	str	r2, [r3, #16]
	gain_search1.omega_ki = 0.0f;		//0.11
 80059b8:	4b2e      	ldr	r3, [pc, #184]	; (8005a74 <VariableInit+0x2f4>)
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	615a      	str	r2, [r3, #20]
	gain_search1.wall_kp = 0.00f;
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <VariableInit+0x2f4>)
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	619a      	str	r2, [r3, #24]
	gain_search1.wall_kd = 0.00f;
 80059c8:	4b2a      	ldr	r3, [pc, #168]	; (8005a74 <VariableInit+0x2f4>)
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	61da      	str	r2, [r3, #28]

	setting_params(&params_search1);
 80059d0:	4826      	ldr	r0, [pc, #152]	; (8005a6c <VariableInit+0x2ec>)
 80059d2:	f7fe ff7f 	bl	80048d4 <setting_params>
	setting_gain(&gain_search1);
 80059d6:	4827      	ldr	r0, [pc, #156]	; (8005a74 <VariableInit+0x2f4>)
 80059d8:	f7fe ff98 	bl	800490c <setting_gain>

	/*** centor 構造体の初期化 ***/
	centor.velocity = 0;
 80059dc:	4b29      	ldr	r3, [pc, #164]	; (8005a84 <VariableInit+0x304>)
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
	centor.vel_target = 0;
 80059e4:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <VariableInit+0x304>)
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	605a      	str	r2, [r3, #4]
	centor.omega_deg = 0;
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <VariableInit+0x304>)
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	609a      	str	r2, [r3, #8]
	centor.pre_omega_deg = 0;
 80059f4:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <VariableInit+0x304>)
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	60da      	str	r2, [r3, #12]
	centor.omega_rad = 0;
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <VariableInit+0x304>)
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	611a      	str	r2, [r3, #16]
	centor.omega_dir = 0;
 8005a04:	4b1f      	ldr	r3, [pc, #124]	; (8005a84 <VariableInit+0x304>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	751a      	strb	r2, [r3, #20]
	centor.distance = 0;
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <VariableInit+0x304>)
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
	centor.angle = 0;
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <VariableInit+0x304>)
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	61da      	str	r2, [r3, #28]

	omega.dif = 0;
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <VariableInit+0x2e8>)
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
	omega.p_out = omega.i_out = 0;
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	e02f      	b.n	8005a88 <VariableInit+0x308>
 8005a28:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a2c:	3f50624d 	.word	0x3f50624d
 8005a30:	70000000 	.word	0x70000000
 8005a34:	4002d97c 	.word	0x4002d97c
 8005a38:	200006ec 	.word	0x200006ec
 8005a3c:	200005bc 	.word	0x200005bc
 8005a40:	2000046c 	.word	0x2000046c
 8005a44:	200003e8 	.word	0x200003e8
 8005a48:	200003d8 	.word	0x200003d8
 8005a4c:	20000438 	.word	0x20000438
 8005a50:	20000450 	.word	0x20000450
 8005a54:	200006ea 	.word	0x200006ea
 8005a58:	200006d0 	.word	0x200006d0
 8005a5c:	20000418 	.word	0x20000418
 8005a60:	20000258 	.word	0x20000258
 8005a64:	20000378 	.word	0x20000378
 8005a68:	20000480 	.word	0x20000480
 8005a6c:	20000400 	.word	0x20000400
 8005a70:	42b40000 	.word	0x42b40000
 8005a74:	20000498 	.word	0x20000498
 8005a78:	41600000 	.word	0x41600000
 8005a7c:	3d4ccccd 	.word	0x3d4ccccd
 8005a80:	3c23d70a 	.word	0x3c23d70a
 8005a84:	200006fc 	.word	0x200006fc
 8005a88:	4a24      	ldr	r2, [pc, #144]	; (8005b1c <VariableInit+0x39c>)
 8005a8a:	60d3      	str	r3, [r2, #12]
 8005a8c:	4a23      	ldr	r2, [pc, #140]	; (8005b1c <VariableInit+0x39c>)
 8005a8e:	6093      	str	r3, [r2, #8]
	gyro_base = 0;
 8005a90:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <VariableInit+0x3a0>)
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

	/*** omega_ctrl構造体の初期化 ***/
	centor.angle = 0;
 8005a98:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <VariableInit+0x3a4>)
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	61da      	str	r2, [r3, #28]

	maxindex_w = val1 / 3;					//回転加速時間計算
 8005aa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005aa4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8005aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aac:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <VariableInit+0x3a8>)
 8005aae:	edc3 7a00 	vstr	s15, [r3]
	minindex = 0;						//最低速度初期化
 8005ab2:	4b1e      	ldr	r3, [pc, #120]	; (8005b2c <VariableInit+0x3ac>)
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

	/* 並進速度，計算処理  */
	maxindex = params_now.vel_max / params_now.accel;	//並進加速時間計算
 8005aba:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <VariableInit+0x3b0>)
 8005abc:	edd3 6a00 	vldr	s13, [r3]
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <VariableInit+0x3b0>)
 8005ac2:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aca:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <VariableInit+0x3b4>)
 8005acc:	edc3 7a00 	vstr	s15, [r3]
	minindex = 0;						//最低速度初期化
 8005ad0:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <VariableInit+0x3ac>)
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	//----走行系----
//	minindex = MINSPEED_S;			//最低速度初期化     MINSPEED_Sはglobal.hにマクロ定義あり
	MF.FLAGS = 0x80;			//フラグクリア＆停止状態  0x80=0b10000000
 8005ad8:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <VariableInit+0x3b8>)
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	801a      	strh	r2, [r3, #0]

	//----探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <VariableInit+0x3bc>)
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	801a      	strh	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 8005ae4:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <VariableInit+0x3c0>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	801a      	strh	r2, [r3, #0]
	map_Init();				//マップの初期化
 8005aea:	f000 fe0f 	bl	800670c <map_Init>
	PRELOC.PLANE = 0x00;			//現在地の初期化
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <VariableInit+0x3c4>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
	m_dir = 0;				//マウス方向の初期化
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <VariableInit+0x3c8>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]

	Kvolt = MASS / 2 * DIA_SPUR_mm / DIA_PINI_mm * RADIUS_WHEEL_mm / Ktolk * Rmotor; //電源電圧測定に必要な定数
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <VariableInit+0x3cc>)
 8005afc:	4a14      	ldr	r2, [pc, #80]	; (8005b50 <VariableInit+0x3d0>)
 8005afe:	601a      	str	r2, [r3, #0]
	Kxr =  -RADIUS_WHEEL_mm * (DIA_PINI_mm / DIA_SPUR_mm) * 2 * Pi / 4096;	      //Gain for Convert Encoder Pulse to Physical Unit
 8005b00:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <VariableInit+0x3d4>)
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <VariableInit+0x3d8>)
 8005b04:	601a      	str	r2, [r3, #0]

	printf("Array Delete Start\n");
 8005b06:	4815      	ldr	r0, [pc, #84]	; (8005b5c <VariableInit+0x3dc>)
 8005b08:	f003 fe02 	bl	8009710 <puts>
		log.test3[i] = 0.0f;
		log.test4[i] = 0.0f;
		log.test5[i] = 0.0f;
		log.test6[i] = 0.0f;
	}
*/	printf("Array Delete Completed\n");
 8005b0c:	4814      	ldr	r0, [pc, #80]	; (8005b60 <VariableInit+0x3e0>)
 8005b0e:	f003 fdff 	bl	8009710 <puts>

}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000480 	.word	0x20000480
 8005b20:	200003c0 	.word	0x200003c0
 8005b24:	200006fc 	.word	0x200006fc
 8005b28:	200003c8 	.word	0x200003c8
 8005b2c:	200003c4 	.word	0x200003c4
 8005b30:	20000458 	.word	0x20000458
 8005b34:	200006f8 	.word	0x200006f8
 8005b38:	200006e8 	.word	0x200006e8
 8005b3c:	20000434 	.word	0x20000434
 8005b40:	200003d2 	.word	0x200003d2
 8005b44:	200003bc 	.word	0x200003bc
 8005b48:	200004b8 	.word	0x200004b8
 8005b4c:	200006f0 	.word	0x200006f0
 8005b50:	3fde6e2a 	.word	0x3fde6e2a
 8005b54:	2000044c 	.word	0x2000044c
 8005b58:	bb6a927f 	.word	0xbb6a927f
 8005b5c:	0800b6c4 	.word	0x0800b6c4
 8005b60:	0800b6d8 	.word	0x0800b6d8

08005b64 <HAL_TIM_PeriodElapsedCallback>:
#define AD_WAIT_US 15

uint32_t buff_array[6];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim6.Instance){
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	f040 8087 	bne.w	8005c88 <HAL_TIM_PeriodElapsedCallback+0x124>
		switch(tp){
 8005b7a:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d870      	bhi.n	8005c66 <HAL_TIM_PeriodElapsedCallback+0x102>
 8005b84:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005c11 	.word	0x08005c11
 8005b94:	08005c61 	.word	0x08005c61
 8005b98:	08005c67 	.word	0x08005c67
		case 0:
			HAL_GPIO_WritePin(LED_L_GPIO_Port, LED_L_Pin,SET);
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2140      	movs	r1, #64	; 0x40
 8005ba0:	4840      	ldr	r0, [pc, #256]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005ba2:	f7fc f9f1 	bl	8001f88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_FF_GPIO_Port, LED_FF_Pin,SET);
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	2108      	movs	r1, #8
 8005baa:	483e      	ldr	r0, [pc, #248]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005bac:	f7fc f9ec 	bl	8001f88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_FR_GPIO_Port, LED_FR_Pin,SET);
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	483c      	ldr	r0, [pc, #240]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005bb6:	f7fc f9e7 	bl	8001f88 <HAL_GPIO_WritePin>

			Tim6WaitUs(AD_WAIT_US);
 8005bba:	200f      	movs	r0, #15
 8005bbc:	f001 fc74 	bl	80074a8 <Tim6WaitUs>

			wall_l.val = GetADC(&hadc1,ADC_CHANNEL_4);
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	483a      	ldr	r0, [pc, #232]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005bc4:	f001 fdc6 	bl	8007754 <GetADC>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005bce:	601a      	str	r2, [r3, #0]
			wall_ff.val = GetADC(&hadc1,ADC_CHANNEL_2);
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4836      	ldr	r0, [pc, #216]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005bd4:	f001 fdbe 	bl	8007754 <GetADC>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4b35      	ldr	r3, [pc, #212]	; (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005bde:	601a      	str	r2, [r3, #0]
			wall_fr.val = GetADC(&hadc1,ADC_CHANNEL_0);
 8005be0:	2100      	movs	r1, #0
 8005be2:	4832      	ldr	r0, [pc, #200]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005be4:	f001 fdb6 	bl	8007754 <GetADC>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b32      	ldr	r3, [pc, #200]	; (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005bee:	601a      	str	r2, [r3, #0]


			HAL_GPIO_WritePin(LED_L_GPIO_Port, LED_L_Pin,RESET);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	; 0x40
 8005bf4:	482b      	ldr	r0, [pc, #172]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005bf6:	f7fc f9c7 	bl	8001f88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_FF_GPIO_Port, LED_FF_Pin,RESET);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2108      	movs	r1, #8
 8005bfe:	4829      	ldr	r0, [pc, #164]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c00:	f7fc f9c2 	bl	8001f88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_FR_GPIO_Port, LED_FR_Pin,RESET);
 8005c04:	2200      	movs	r2, #0
 8005c06:	2104      	movs	r1, #4
 8005c08:	4827      	ldr	r0, [pc, #156]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c0a:	f7fc f9bd 	bl	8001f88 <HAL_GPIO_WritePin>

			break;
 8005c0e:	e02a      	b.n	8005c66 <HAL_TIM_PeriodElapsedCallback+0x102>

		case 1:
			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,SET);
 8005c10:	2201      	movs	r2, #1
 8005c12:	2108      	movs	r1, #8
 8005c14:	4824      	ldr	r0, [pc, #144]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c16:	f7fc f9b7 	bl	8001f88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_FL_GPIO_Port, LED_FL_Pin,SET);
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	2180      	movs	r1, #128	; 0x80
 8005c1e:	4821      	ldr	r0, [pc, #132]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c20:	f7fc f9b2 	bl	8001f88 <HAL_GPIO_WritePin>

			Tim6WaitUs(AD_WAIT_US);
 8005c24:	200f      	movs	r0, #15
 8005c26:	f001 fc3f 	bl	80074a8 <Tim6WaitUs>

			wall_r.val = GetADC(&hadc1,ADC_CHANNEL_1);
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	481f      	ldr	r0, [pc, #124]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c2e:	f001 fd91 	bl	8007754 <GetADC>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005c38:	601a      	str	r2, [r3, #0]
			wall_fl.val = GetADC(&hadc1,ADC_CHANNEL_5);
 8005c3a:	2105      	movs	r1, #5
 8005c3c:	481b      	ldr	r0, [pc, #108]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c3e:	f001 fd89 	bl	8007754 <GetADC>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8005c48:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin,RESET);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2108      	movs	r1, #8
 8005c4e:	4816      	ldr	r0, [pc, #88]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c50:	f7fc f99a 	bl	8001f88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_FL_GPIO_Port, LED_FL_Pin,RESET);
 8005c54:	2200      	movs	r2, #0
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	4812      	ldr	r0, [pc, #72]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c5a:	f7fc f995 	bl	8001f88 <HAL_GPIO_WritePin>

			break;
 8005c5e:	e002      	b.n	8005c66 <HAL_TIM_PeriodElapsedCallback+0x102>
		case 2:
			UpdateEncoder();
 8005c60:	f001 fcde 	bl	8007620 <UpdateEncoder>

			break;
 8005c64:	bf00      	nop
		case 3:
			break;
		}
		tp = (tp+1) % 4;
 8005c66:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	425a      	negs	r2, r3
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	f002 0203 	and.w	r2, r2, #3
 8005c78:	bf58      	it	pl
 8005c7a:	4253      	negpl	r3, r2
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c80:	701a      	strb	r2, [r3, #0]

		UpdateGyro();
 8005c82:	f001 fc6d 	bl	8007560 <UpdateGyro>
	else if(htim->Instance == htim1.Instance){
	}
	else if(htim->Instance == htim2.Instance){
	}

}
 8005c86:	e004      	b.n	8005c92 <HAL_TIM_PeriodElapsedCallback+0x12e>
	else if(htim->Instance == htim1.Instance){
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	429a      	cmp	r2, r3
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000874 	.word	0x20000874
 8005ca0:	200006ec 	.word	0x200006ec
 8005ca4:	40020000 	.word	0x40020000
 8005ca8:	40020800 	.word	0x40020800
 8005cac:	2000020c 	.word	0x2000020c
 8005cb0:	20000438 	.word	0x20000438
 8005cb4:	200005bc 	.word	0x200005bc
 8005cb8:	2000046c 	.word	0x2000046c
 8005cbc:	200003d8 	.word	0x200003d8
 8005cc0:	200003e8 	.word	0x200003e8
 8005cc4:	200008b4 	.word	0x200008b4

08005cc8 <LedDisplay>:
#include <Mouse/port.h>
#include "main.h"

void LedDisplay(uint8_t *led)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, *led&0x01);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ce0:	4818      	ldr	r0, [pc, #96]	; (8005d44 <LedDisplay+0x7c>)
 8005ce2:	f7fc f951 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, *led&0x02);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cf6:	4813      	ldr	r0, [pc, #76]	; (8005d44 <LedDisplay+0x7c>)
 8005cf8:	f7fc f946 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, *led&0x04);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d0c:	480e      	ldr	r0, [pc, #56]	; (8005d48 <LedDisplay+0x80>)
 8005d0e:	f7fc f93b 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, *led&0x08);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2110      	movs	r1, #16
 8005d20:	4808      	ldr	r0, [pc, #32]	; (8005d44 <LedDisplay+0x7c>)
 8005d22:	f7fc f931 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, *led&0x10);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	2120      	movs	r1, #32
 8005d34:	4803      	ldr	r0, [pc, #12]	; (8005d44 <LedDisplay+0x7c>)
 8005d36:	f7fc f927 	bl	8001f88 <HAL_GPIO_WritePin>

}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40020400 	.word	0x40020400
 8005d48:	40020800 	.word	0x40020800

08005d4c <searchA>:
//searchA
//	goal座標に進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){												//一次走行　一番基本的な初期装備
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0

	//====マップデータ初期化====
	map_Init();												//マップデータを初期化する
 8005d50:	f000 fcdc 	bl	800670c <map_Init>

	//====歩数等初期化====
	m_step = r_cnt = 0;										//歩数と経路カウンタの初期化
 8005d54:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <searchA+0x134>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <searchA+0x134>)
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	4b49      	ldr	r3, [pc, #292]	; (8005e84 <searchA+0x138>)
 8005d60:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報の初期化, 後壁はなくなる
 8005d62:	f001 fa67 	bl	8007234 <get_wall_info>
	write_map();											//地図の初期化
 8005d66:	f000 fd3d 	bl	80067e4 <write_map>
	make_smap();											//歩数図の初期化
 8005d6a:	f000 fea9 	bl	8006ac0 <make_smap>
	make_route_NESW();											//最短経路探索(route配列に動作が格納される)
 8005d6e:	f000 ffaf 	bl	8006cd0 <make_route_NESW>
	sensor_start();
 8005d72:	f001 fb07 	bl	8007384 <sensor_start>
	//uart_printf("ad_l: %4d ad_fl:%4d ad_ff:%4d  ad_fr:%4d ad_r:%4d\r\n ", ad_l, ad_fl, ad_ff, ad_fr, ad_r);
	//====探索走行====
	do{

		//----進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8005d76:	4b42      	ldr	r3, [pc, #264]	; (8005e80 <searchA+0x134>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	b2d1      	uxtb	r1, r2
 8005d7e:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <searchA+0x134>)
 8005d80:	7011      	strb	r1, [r2, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <searchA+0x13c>)
 8005d86:	5c9b      	ldrb	r3, [r3, r2]
 8005d88:	2b22      	cmp	r3, #34	; 0x22
 8005d8a:	d024      	beq.n	8005dd6 <searchA+0x8a>
 8005d8c:	2b22      	cmp	r3, #34	; 0x22
 8005d8e:	dc02      	bgt.n	8005d96 <searchA+0x4a>
 8005d90:	2b11      	cmp	r3, #17
 8005d92:	d038      	beq.n	8005e06 <searchA+0xba>
 8005d94:	e04f      	b.n	8005e36 <searchA+0xea>
 8005d96:	2b44      	cmp	r3, #68	; 0x44
 8005d98:	d005      	beq.n	8005da6 <searchA+0x5a>
 8005d9a:	2b88      	cmp	r3, #136	; 0x88
 8005d9c:	d14b      	bne.n	8005e36 <searchA+0xea>
			//----前進----
			case 0x88:
				set_dir(FORWARD);
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f7ff fca8 	bl	80056f4 <set_dir>
				//Melody(1120,500);
				break;
 8005da4:	e047      	b.n	8005e36 <searchA+0xea>
			//----右折----
			case 0x44:
				turn_R90();									//右回転
 8005da6:	f7fe ff39 	bl	8004c1c <turn_R90>
				if(wall_l.dif > wall_l.threshold){
 8005daa:	4b38      	ldr	r3, [pc, #224]	; (8005e8c <searchA+0x140>)
 8005dac:	88db      	ldrh	r3, [r3, #6]
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <searchA+0x140>)
 8005db4:	899b      	ldrh	r3, [r3, #12]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	429a      	cmp	r2, r3
 8005dba:	dd02      	ble.n	8005dc2 <searchA+0x76>
					set_position(1);
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	f7fe fffb 	bl	8004db8 <set_position>
				}
				turn_dir(DIR_TURN_R90);						//マイクロマウス内部位置情報でも右回転処理
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	f000 fe64 	bl	8006a90 <turn_dir>
				HAL_Delay(100);										//安定するまで待機
 8005dc8:	2064      	movs	r0, #100	; 0x64
 8005dca:	f7fb fa3d 	bl	8001248 <HAL_Delay>
				set_dir(FORWARD);
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f7ff fc90 	bl	80056f4 <set_dir>
				//Melody(920,500);
				break;
 8005dd4:	e02f      	b.n	8005e36 <searchA+0xea>
			//----180回転----
			case 0x22:
				turn_180();							//180度回転
 8005dd6:	f7fe ffd1 	bl	8004d7c <turn_180>
				if(wall_ff.dif > wall_ff.threshold){
 8005dda:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <searchA+0x144>)
 8005ddc:	88db      	ldrh	r3, [r3, #6]
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <searchA+0x144>)
 8005de4:	899b      	ldrh	r3, [r3, #12]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	429a      	cmp	r2, r3
 8005dea:	dd02      	ble.n	8005df2 <searchA+0xa6>
					set_position(1);
 8005dec:	2001      	movs	r0, #1
 8005dee:	f7fe ffe3 	bl	8004db8 <set_position>
				}
				turn_dir(DIR_TURN_180);						//マイクロマウス内部位置情報でも180度回転処理
 8005df2:	2002      	movs	r0, #2
 8005df4:	f000 fe4c 	bl	8006a90 <turn_dir>
				HAL_Delay(100);
 8005df8:	2064      	movs	r0, #100	; 0x64
 8005dfa:	f7fb fa25 	bl	8001248 <HAL_Delay>
				set_dir(FORWARD);
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f7ff fc78 	bl	80056f4 <set_dir>
				//Melody(1320,500);
				break;
 8005e04:	e017      	b.n	8005e36 <searchA+0xea>
			//----左折----
			case 0x11:
				turn_L90();									//左回転
 8005e06:	f7fe ff61 	bl	8004ccc <turn_L90>
				if(wall_r.dif > wall_ff.threshold){
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <searchA+0x148>)
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <searchA+0x144>)
 8005e14:	899b      	ldrh	r3, [r3, #12]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	dd02      	ble.n	8005e22 <searchA+0xd6>
					set_position(1);
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	f7fe ffcb 	bl	8004db8 <set_position>
				}
				turn_dir(DIR_TURN_L90);						//マイクロマウス内部位置情報でも左回転処理
 8005e22:	20ff      	movs	r0, #255	; 0xff
 8005e24:	f000 fe34 	bl	8006a90 <turn_dir>
				HAL_Delay(100);									//安定するまで待機
 8005e28:	2064      	movs	r0, #100	; 0x64
 8005e2a:	f7fb fa0d 	bl	8001248 <HAL_Delay>
				set_dir(FORWARD);
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f7ff fc60 	bl	80056f4 <set_dir>
				//Melody(720,500);
				break;
 8005e34:	bf00      	nop
		}
/*		uart_printf("time = %d, wall_l = %d, wall_ff = %d, wall_r = %d\r\n",time2, wall_l.dif, wall_ff.dif, wall_r.dif);
		uart_printf("route is %2x, threshold_l = %d, threthreshold_r = %d\r\n", route[r_cnt - 1], wall_l.threshold, wall_r.threshold);
		ms_wait(500);
*/
		a_section();										//前進する
 8005e36:	f7fe fee1 	bl	8004bfc <a_section>
		adv_pos();										//マイクロマウス内部位置情報でも前進処理
 8005e3a:	f000 fbd3 	bl	80065e4 <adv_pos>
		conf_route_NESW();										//最短経路で進行可能か判定
 8005e3e:	f000 fc29 	bl	8006694 <conf_route_NESW>

	}while((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <searchA+0x14c>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <searchA+0x150>)
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d18f      	bne.n	8005d76 <searchA+0x2a>
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <searchA+0x14c>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <searchA+0x154>)
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d185      	bne.n	8005d76 <searchA+0x2a>
															//現在座標とgoal座標が等しくなるまで実行
	ms_wait(2000);											//スタートでは***2秒以上***停止しなくてはならない
 8005e6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005e6e:	f7fe fb4f 	bl	8004510 <ms_wait>
	turn_180();												//180度回転
 8005e72:	f7fe ff83 	bl	8004d7c <turn_180>
	turn_dir(DIR_TURN_180);									//マイクロマウス内部位置情報でも180度回転処理
 8005e76:	2002      	movs	r0, #2
 8005e78:	f000 fe0a 	bl	8006a90 <turn_dir>
}
 8005e7c:	bf00      	nop
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200006f4 	.word	0x200006f4
 8005e84:	20000396 	.word	0x20000396
 8005e88:	200004bc 	.word	0x200004bc
 8005e8c:	20000438 	.word	0x20000438
 8005e90:	200005bc 	.word	0x200005bc
 8005e94:	200003d8 	.word	0x200003d8
 8005e98:	200003bc 	.word	0x200003bc
 8005e9c:	20000434 	.word	0x20000434
 8005ea0:	200003d2 	.word	0x200003d2

08005ea4 <searchSA>:
//searchSA
//	ちょっと早くgoal座標に進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchSA(){											//連続走行の未完成アルゴリズム、完成させればケッコー早い走行ができる、初期化は直してないからがんばって　標
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0

	//====歩数等初期化====
	m_step = r_cnt = 0;										//歩数と経路カウンタの初期化
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <searchSA+0x1a8>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	4b67      	ldr	r3, [pc, #412]	; (800604c <searchSA+0x1a8>)
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	4b67      	ldr	r3, [pc, #412]	; (8006050 <searchSA+0x1ac>)
 8005eb4:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報の初期化, 後壁はなくなる
 8005eb6:	f001 f9bd 	bl	8007234 <get_wall_info>
	write_map();											//地図の初期化
 8005eba:	f000 fc93 	bl	80067e4 <write_map>
	make_smap();											//歩数図の初期化
 8005ebe:	f000 fdff 	bl	8006ac0 <make_smap>
	make_route_NESW();											//最短経路探索(route配列に動作が格納される)
 8005ec2:	f000 ff05 	bl	8006cd0 <make_route_NESW>

	sensor_start();
 8005ec6:	f001 fa5d 	bl	8007384 <sensor_start>
	printf("Michishirube\r\n");
 8005eca:	4862      	ldr	r0, [pc, #392]	; (8006054 <searchSA+0x1b0>)
 8005ecc:	f003 fc20 	bl	8009710 <puts>
	set_dir(FORWARD);
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff fc0f 	bl	80056f4 <set_dir>

	if(wall_ff.dif > wall_ff.threshold){
 8005ed6:	4b60      	ldr	r3, [pc, #384]	; (8006058 <searchSA+0x1b4>)
 8005ed8:	88db      	ldrh	r3, [r3, #6]
 8005eda:	b21b      	sxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b5e      	ldr	r3, [pc, #376]	; (8006058 <searchSA+0x1b4>)
 8005ee0:	899b      	ldrh	r3, [r3, #12]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	dd0a      	ble.n	8005efe <searchSA+0x5a>
		turn_180();
 8005ee8:	f7fe ff48 	bl	8004d7c <turn_180>
		HAL_Delay(100);
 8005eec:	2064      	movs	r0, #100	; 0x64
 8005eee:	f7fb f9ab 	bl	8001248 <HAL_Delay>
		turn_dir(DIR_TURN_180);
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f000 fdcc 	bl	8006a90 <turn_dir>
		set_dir(FORWARD);
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f7ff fbfb 	bl	80056f4 <set_dir>
	}

	half_sectionA();
 8005efe:	f7fe fe47 	bl	8004b90 <half_sectionA>
	adv_pos();
 8005f02:	f000 fb6f 	bl	80065e4 <adv_pos>
	conf_route_NESW();
 8005f06:	f000 fbc5 	bl	8006694 <conf_route_NESW>
	//====探索走行====
	do{
		//----進行----
		switch(route[r_cnt++]){			//route配列によって進行を決定。経路カウンタを進める
 8005f0a:	4b50      	ldr	r3, [pc, #320]	; (800604c <searchSA+0x1a8>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	b2d1      	uxtb	r1, r2
 8005f12:	4a4e      	ldr	r2, [pc, #312]	; (800604c <searchSA+0x1a8>)
 8005f14:	7011      	strb	r1, [r2, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b50      	ldr	r3, [pc, #320]	; (800605c <searchSA+0x1b8>)
 8005f1a:	5c9b      	ldrb	r3, [r3, r2]
 8005f1c:	2b22      	cmp	r3, #34	; 0x22
 8005f1e:	d01b      	beq.n	8005f58 <searchSA+0xb4>
 8005f20:	2b22      	cmp	r3, #34	; 0x22
 8005f22:	dc02      	bgt.n	8005f2a <searchSA+0x86>
 8005f24:	2b11      	cmp	r3, #17
 8005f26:	d04d      	beq.n	8005fc4 <searchSA+0x120>
 8005f28:	e05c      	b.n	8005fe4 <searchSA+0x140>
 8005f2a:	2b44      	cmp	r3, #68	; 0x44
 8005f2c:	d004      	beq.n	8005f38 <searchSA+0x94>
 8005f2e:	2b88      	cmp	r3, #136	; 0x88
 8005f30:	d158      	bne.n	8005fe4 <searchSA+0x140>
			//----前進----
			case 0x88:
				s_section();
 8005f32:	f7fe fe6b 	bl	8004c0c <s_section>
				break;
 8005f36:	e055      	b.n	8005fe4 <searchSA+0x140>
			//----右折----
			case 0x44:
				half_sectionD();
 8005f38:	f7fe fe50 	bl	8004bdc <half_sectionD>
				turn_R90();
 8005f3c:	f7fe fe6e 	bl	8004c1c <turn_R90>
				HAL_Delay(100);
 8005f40:	2064      	movs	r0, #100	; 0x64
 8005f42:	f7fb f981 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_R90);
 8005f46:	2001      	movs	r0, #1
 8005f48:	f000 fda2 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7ff fbd1 	bl	80056f4 <set_dir>
				half_sectionA();
 8005f52:	f7fe fe1d 	bl	8004b90 <half_sectionA>
				break;
 8005f56:	e045      	b.n	8005fe4 <searchSA+0x140>
			//----180回転----
			case 0x22:
				half_sectionD();
 8005f58:	f7fe fe40 	bl	8004bdc <half_sectionD>
				if(wall_ff.dif > wall_ff.threshold){
 8005f5c:	4b3e      	ldr	r3, [pc, #248]	; (8006058 <searchSA+0x1b4>)
 8005f5e:	88db      	ldrh	r3, [r3, #6]
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <searchSA+0x1b4>)
 8005f66:	899b      	ldrh	r3, [r3, #12]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	dd04      	ble.n	8005f78 <searchSA+0xd4>
					MF.FLAG.SET = 1;
 8005f6e:	4a3c      	ldr	r2, [pc, #240]	; (8006060 <searchSA+0x1bc>)
 8005f70:	7813      	ldrb	r3, [r2, #0]
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	7013      	strb	r3, [r2, #0]
				}
				turn_180();
 8005f78:	f7fe ff00 	bl	8004d7c <turn_180>
				HAL_Delay(100);
 8005f7c:	2064      	movs	r0, #100	; 0x64
 8005f7e:	f7fb f963 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_180);
 8005f82:	2002      	movs	r0, #2
 8005f84:	f000 fd84 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f7ff fbb3 	bl	80056f4 <set_dir>

				if(MF.FLAG.SET){
 8005f8e:	4b34      	ldr	r3, [pc, #208]	; (8006060 <searchSA+0x1bc>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <searchSA+0x108>
					set_position(1);
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	f7fe ff0b 	bl	8004db8 <set_position>
					MF.FLAG.SET = 0;
 8005fa2:	4a2f      	ldr	r2, [pc, #188]	; (8006060 <searchSA+0x1bc>)
 8005fa4:	7813      	ldrb	r3, [r2, #0]
 8005fa6:	f36f 0300 	bfc	r3, #0, #1
 8005faa:	7013      	strb	r3, [r2, #0]
				}
				MF.FLAG.CTRL = 0;
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <searchSA+0x1bc>)
 8005fae:	7813      	ldrb	r3, [r2, #0]
 8005fb0:	f36f 03c3 	bfc	r3, #3, #1
 8005fb4:	7013      	strb	r3, [r2, #0]
				driveA(HALF_MM);
 8005fb6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006064 <searchSA+0x1c0>
 8005fba:	f7fe ff33 	bl	8004e24 <driveA>
				get_wall_info();
 8005fbe:	f001 f939 	bl	8007234 <get_wall_info>
				break;
 8005fc2:	e00f      	b.n	8005fe4 <searchSA+0x140>
			//----左折----
			case 0x11:
				half_sectionD();
 8005fc4:	f7fe fe0a 	bl	8004bdc <half_sectionD>
				turn_L90();
 8005fc8:	f7fe fe80 	bl	8004ccc <turn_L90>
				HAL_Delay(100);
 8005fcc:	2064      	movs	r0, #100	; 0x64
 8005fce:	f7fb f93b 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_L90);
 8005fd2:	20ff      	movs	r0, #255	; 0xff
 8005fd4:	f000 fd5c 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f7ff fb8b 	bl	80056f4 <set_dir>

				half_sectionA();
 8005fde:	f7fe fdd7 	bl	8004b90 <half_sectionA>
				break;
 8005fe2:	bf00      	nop
		}

		adv_pos();
 8005fe4:	f000 fafe 	bl	80065e4 <adv_pos>
		conf_route_NESW();
 8005fe8:	f000 fb54 	bl	8006694 <conf_route_NESW>

	}while((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <searchSA+0x1c4>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	; (800606c <searchSA+0x1c8>)
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d184      	bne.n	8005f0a <searchSA+0x66>
 8006000:	4b19      	ldr	r3, [pc, #100]	; (8006068 <searchSA+0x1c4>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006008:	b2db      	uxtb	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	4b18      	ldr	r3, [pc, #96]	; (8006070 <searchSA+0x1cc>)
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	f47f af7a 	bne.w	8005f0a <searchSA+0x66>
	half_sectionD();
 8006016:	f7fe fde1 	bl	8004bdc <half_sectionD>
	ms_wait(2000);
 800601a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800601e:	f7fe fa77 	bl	8004510 <ms_wait>
	Melody(g6,300);
 8006022:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006026:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 800602a:	f7fe fb8d 	bl	8004748 <Melody>
	Melody(f6,300);
 800602e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006032:	f240 5075 	movw	r0, #1397	; 0x575
 8006036:	f7fe fb87 	bl	8004748 <Melody>
	Melody(e6,300);
 800603a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800603e:	f240 5026 	movw	r0, #1318	; 0x526
 8006042:	f7fe fb81 	bl	8004748 <Melody>


}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200006f4 	.word	0x200006f4
 8006050:	20000396 	.word	0x20000396
 8006054:	0800b6f0 	.word	0x0800b6f0
 8006058:	200005bc 	.word	0x200005bc
 800605c:	200004bc 	.word	0x200004bc
 8006060:	200006e8 	.word	0x200006e8
 8006064:	42b40000 	.word	0x42b40000
 8006068:	200003bc 	.word	0x200003bc
 800606c:	20000434 	.word	0x20000434
 8006070:	200003d2 	.word	0x200003d2

08006074 <searchSA_ESNW>:

void searchSA_ESNW(){											//連続走行の未完成アルゴリズム、完成させればケッコー早い走行ができる、初期化は直してないからがんばって　標
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0

	//====歩数等初期化====
	m_step = r_cnt = 0;										//歩数と経路カウンタの初期化
 8006078:	4b82      	ldr	r3, [pc, #520]	; (8006284 <searchSA_ESNW+0x210>)
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	4b81      	ldr	r3, [pc, #516]	; (8006284 <searchSA_ESNW+0x210>)
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	4b81      	ldr	r3, [pc, #516]	; (8006288 <searchSA_ESNW+0x214>)
 8006084:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報の初期化, 後壁はなくなる
 8006086:	f001 f8d5 	bl	8007234 <get_wall_info>
	write_map();											//地図の初期化
 800608a:	f000 fbab 	bl	80067e4 <write_map>
	make_smap();											//歩数図の初期化
 800608e:	f000 fd17 	bl	8006ac0 <make_smap>
	make_route_ESNW();											//最短経路探索(route配列に動作が格納される)
 8006092:	f000 ff5b 	bl	8006f4c <make_route_ESNW>

	sensor_start();
 8006096:	f001 f975 	bl	8007384 <sensor_start>
	printf("Michishirube\r\n");
 800609a:	487c      	ldr	r0, [pc, #496]	; (800628c <searchSA_ESNW+0x218>)
 800609c:	f003 fb38 	bl	8009710 <puts>
	set_dir(FORWARD);
 80060a0:	2000      	movs	r0, #0
 80060a2:	f7ff fb27 	bl	80056f4 <set_dir>

	if(wall_ff.dif > wall_ff.threshold){
 80060a6:	4b7a      	ldr	r3, [pc, #488]	; (8006290 <searchSA_ESNW+0x21c>)
 80060a8:	88db      	ldrh	r3, [r3, #6]
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	4b78      	ldr	r3, [pc, #480]	; (8006290 <searchSA_ESNW+0x21c>)
 80060b0:	899b      	ldrh	r3, [r3, #12]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	429a      	cmp	r2, r3
 80060b6:	dd0a      	ble.n	80060ce <searchSA_ESNW+0x5a>
		turn_180();
 80060b8:	f7fe fe60 	bl	8004d7c <turn_180>
		HAL_Delay(100);
 80060bc:	2064      	movs	r0, #100	; 0x64
 80060be:	f7fb f8c3 	bl	8001248 <HAL_Delay>
		turn_dir(DIR_TURN_180);
 80060c2:	2002      	movs	r0, #2
 80060c4:	f000 fce4 	bl	8006a90 <turn_dir>
		set_dir(FORWARD);
 80060c8:	2000      	movs	r0, #0
 80060ca:	f7ff fb13 	bl	80056f4 <set_dir>
	}

	half_sectionA();
 80060ce:	f7fe fd5f 	bl	8004b90 <half_sectionA>
	adv_pos();
 80060d2:	f000 fa87 	bl	80065e4 <adv_pos>
	conf_route_ESNW();
 80060d6:	f000 fafb 	bl	80066d0 <conf_route_ESNW>
	//====探索走行====
	do{
		//----進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80060da:	4b6a      	ldr	r3, [pc, #424]	; (8006284 <searchSA_ESNW+0x210>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	b2d1      	uxtb	r1, r2
 80060e2:	4a68      	ldr	r2, [pc, #416]	; (8006284 <searchSA_ESNW+0x210>)
 80060e4:	7011      	strb	r1, [r2, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b6a      	ldr	r3, [pc, #424]	; (8006294 <searchSA_ESNW+0x220>)
 80060ea:	5c9b      	ldrb	r3, [r3, r2]
 80060ec:	2b22      	cmp	r3, #34	; 0x22
 80060ee:	d03a      	beq.n	8006166 <searchSA_ESNW+0xf2>
 80060f0:	2b22      	cmp	r3, #34	; 0x22
 80060f2:	dc02      	bgt.n	80060fa <searchSA_ESNW+0x86>
 80060f4:	2b11      	cmp	r3, #17
 80060f6:	d063      	beq.n	80061c0 <searchSA_ESNW+0x14c>
 80060f8:	e090      	b.n	800621c <searchSA_ESNW+0x1a8>
 80060fa:	2b44      	cmp	r3, #68	; 0x44
 80060fc:	d005      	beq.n	800610a <searchSA_ESNW+0x96>
 80060fe:	2b88      	cmp	r3, #136	; 0x88
 8006100:	f040 808c 	bne.w	800621c <searchSA_ESNW+0x1a8>
			//----前進----
			case 0x88:
				s_section();
 8006104:	f7fe fd82 	bl	8004c0c <s_section>
				break;
 8006108:	e088      	b.n	800621c <searchSA_ESNW+0x1a8>
			//----右折----
			case 0x44:
				if(wall_l.dif > wall_l.dif + WALL_OFF){
 800610a:	4b63      	ldr	r3, [pc, #396]	; (8006298 <searchSA_ESNW+0x224>)
 800610c:	88db      	ldrh	r3, [r3, #6]
 800610e:	b21b      	sxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	4b61      	ldr	r3, [pc, #388]	; (8006298 <searchSA_ESNW+0x224>)
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	b21b      	sxth	r3, r3
 8006118:	33c8      	adds	r3, #200	; 0xc8
 800611a:	429a      	cmp	r2, r3
 800611c:	dd04      	ble.n	8006128 <searchSA_ESNW+0xb4>
					MF.FLAG.SET = 1;
 800611e:	4a5f      	ldr	r2, [pc, #380]	; (800629c <searchSA_ESNW+0x228>)
 8006120:	7813      	ldrb	r3, [r2, #0]
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	7013      	strb	r3, [r2, #0]
				}
				half_sectionD();
 8006128:	f7fe fd58 	bl	8004bdc <half_sectionD>
				turn_R90();
 800612c:	f7fe fd76 	bl	8004c1c <turn_R90>
				HAL_Delay(100);
 8006130:	2064      	movs	r0, #100	; 0x64
 8006132:	f7fb f889 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_R90);
 8006136:	2001      	movs	r0, #1
 8006138:	f000 fcaa 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 800613c:	2000      	movs	r0, #0
 800613e:	f7ff fad9 	bl	80056f4 <set_dir>
				if(MF.FLAG.SET){
 8006142:	4b56      	ldr	r3, [pc, #344]	; (800629c <searchSA_ESNW+0x228>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <searchSA_ESNW+0xec>
					set_position(1);
 8006150:	2001      	movs	r0, #1
 8006152:	f7fe fe31 	bl	8004db8 <set_position>
					MF.FLAG.SET = 0;
 8006156:	4a51      	ldr	r2, [pc, #324]	; (800629c <searchSA_ESNW+0x228>)
 8006158:	7813      	ldrb	r3, [r2, #0]
 800615a:	f36f 0300 	bfc	r3, #0, #1
 800615e:	7013      	strb	r3, [r2, #0]
				}
				half_sectionA();
 8006160:	f7fe fd16 	bl	8004b90 <half_sectionA>
				break;
 8006164:	e05a      	b.n	800621c <searchSA_ESNW+0x1a8>
			//----180回転----
			case 0x22:
				half_sectionD();
 8006166:	f7fe fd39 	bl	8004bdc <half_sectionD>
				if(wall_ff.dif > wall_ff.threshold){
 800616a:	4b49      	ldr	r3, [pc, #292]	; (8006290 <searchSA_ESNW+0x21c>)
 800616c:	88db      	ldrh	r3, [r3, #6]
 800616e:	b21b      	sxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	4b47      	ldr	r3, [pc, #284]	; (8006290 <searchSA_ESNW+0x21c>)
 8006174:	899b      	ldrh	r3, [r3, #12]
 8006176:	b29b      	uxth	r3, r3
 8006178:	429a      	cmp	r2, r3
 800617a:	dd04      	ble.n	8006186 <searchSA_ESNW+0x112>
					MF.FLAG.SET = 1;
 800617c:	4a47      	ldr	r2, [pc, #284]	; (800629c <searchSA_ESNW+0x228>)
 800617e:	7813      	ldrb	r3, [r2, #0]
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	7013      	strb	r3, [r2, #0]
				}
				turn_180();
 8006186:	f7fe fdf9 	bl	8004d7c <turn_180>
				HAL_Delay(100);
 800618a:	2064      	movs	r0, #100	; 0x64
 800618c:	f7fb f85c 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_180);
 8006190:	2002      	movs	r0, #2
 8006192:	f000 fc7d 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8006196:	2000      	movs	r0, #0
 8006198:	f7ff faac 	bl	80056f4 <set_dir>

				if(MF.FLAG.SET){
 800619c:	4b3f      	ldr	r3, [pc, #252]	; (800629c <searchSA_ESNW+0x228>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <searchSA_ESNW+0x146>
					set_position(1);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f7fe fe04 	bl	8004db8 <set_position>
					MF.FLAG.SET = 0;
 80061b0:	4a3a      	ldr	r2, [pc, #232]	; (800629c <searchSA_ESNW+0x228>)
 80061b2:	7813      	ldrb	r3, [r2, #0]
 80061b4:	f36f 0300 	bfc	r3, #0, #1
 80061b8:	7013      	strb	r3, [r2, #0]
				}
				half_sectionA();
 80061ba:	f7fe fce9 	bl	8004b90 <half_sectionA>
				break;
 80061be:	e02d      	b.n	800621c <searchSA_ESNW+0x1a8>
			//----左折----
			case 0x11:
				if(wall_r.dif > wall_r.threshold + WALL_OFF){
 80061c0:	4b37      	ldr	r3, [pc, #220]	; (80062a0 <searchSA_ESNW+0x22c>)
 80061c2:	88db      	ldrh	r3, [r3, #6]
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	4b35      	ldr	r3, [pc, #212]	; (80062a0 <searchSA_ESNW+0x22c>)
 80061ca:	899b      	ldrh	r3, [r3, #12]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	33c8      	adds	r3, #200	; 0xc8
 80061d0:	429a      	cmp	r2, r3
 80061d2:	dd04      	ble.n	80061de <searchSA_ESNW+0x16a>
					MF.FLAG.SET = 1;
 80061d4:	4a31      	ldr	r2, [pc, #196]	; (800629c <searchSA_ESNW+0x228>)
 80061d6:	7813      	ldrb	r3, [r2, #0]
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	7013      	strb	r3, [r2, #0]
				}
				half_sectionD();
 80061de:	f7fe fcfd 	bl	8004bdc <half_sectionD>
				turn_L90();
 80061e2:	f7fe fd73 	bl	8004ccc <turn_L90>
				HAL_Delay(100);
 80061e6:	2064      	movs	r0, #100	; 0x64
 80061e8:	f7fb f82e 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_L90);
 80061ec:	20ff      	movs	r0, #255	; 0xff
 80061ee:	f000 fc4f 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 80061f2:	2000      	movs	r0, #0
 80061f4:	f7ff fa7e 	bl	80056f4 <set_dir>
				if(MF.FLAG.SET){
 80061f8:	4b28      	ldr	r3, [pc, #160]	; (800629c <searchSA_ESNW+0x228>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <searchSA_ESNW+0x1a2>
					set_position(1);
 8006206:	2001      	movs	r0, #1
 8006208:	f7fe fdd6 	bl	8004db8 <set_position>
					MF.FLAG.SET = 0;
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <searchSA_ESNW+0x228>)
 800620e:	7813      	ldrb	r3, [r2, #0]
 8006210:	f36f 0300 	bfc	r3, #0, #1
 8006214:	7013      	strb	r3, [r2, #0]
				}
				half_sectionA();
 8006216:	f7fe fcbb 	bl	8004b90 <half_sectionA>
				break;
 800621a:	bf00      	nop
		}
		adv_pos();
 800621c:	f000 f9e2 	bl	80065e4 <adv_pos>
		conf_route_ESNW();
 8006220:	f000 fa56 	bl	80066d0 <conf_route_ESNW>


	}while((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <searchSA_ESNW+0x230>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <searchSA_ESNW+0x234>)
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	f47f af50 	bne.w	80060da <searchSA_ESNW+0x66>
 800623a:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <searchSA_ESNW+0x230>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	4b19      	ldr	r3, [pc, #100]	; (80062ac <searchSA_ESNW+0x238>)
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	f47f af45 	bne.w	80060da <searchSA_ESNW+0x66>
	half_sectionD();
 8006250:	f7fe fcc4 	bl	8004bdc <half_sectionD>
	ms_wait(2000);
 8006254:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006258:	f7fe f95a 	bl	8004510 <ms_wait>
	Melody(g6,300);
 800625c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006260:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8006264:	f7fe fa70 	bl	8004748 <Melody>
	Melody(f6,300);
 8006268:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800626c:	f240 5075 	movw	r0, #1397	; 0x575
 8006270:	f7fe fa6a 	bl	8004748 <Melody>
	Melody(e6,300);
 8006274:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006278:	f240 5026 	movw	r0, #1318	; 0x526
 800627c:	f7fe fa64 	bl	8004748 <Melody>

}
 8006280:	bf00      	nop
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200006f4 	.word	0x200006f4
 8006288:	20000396 	.word	0x20000396
 800628c:	0800b6f0 	.word	0x0800b6f0
 8006290:	200005bc 	.word	0x200005bc
 8006294:	200004bc 	.word	0x200004bc
 8006298:	20000438 	.word	0x20000438
 800629c:	200006e8 	.word	0x200006e8
 80062a0:	200003d8 	.word	0x200003d8
 80062a4:	200003bc 	.word	0x200003bc
 80062a8:	20000434 	.word	0x20000434
 80062ac:	200003d2 	.word	0x200003d2

080062b0 <searchSLA>:

void searchSLA(){											//連続走行の未完成アルゴリズム、完成させればケッコー早い走行ができる、初期化は直してないからがんばって　標
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0

	//====歩数等初期化====
	m_step = r_cnt = 0;										//歩数と経路カウンタの初期化
 80062b4:	4b5c      	ldr	r3, [pc, #368]	; (8006428 <searchSLA+0x178>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	4b5b      	ldr	r3, [pc, #364]	; (8006428 <searchSLA+0x178>)
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	4b5b      	ldr	r3, [pc, #364]	; (800642c <searchSLA+0x17c>)
 80062c0:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報の初期化, 後壁はなくなる
 80062c2:	f000 ffb7 	bl	8007234 <get_wall_info>
	write_map();											//地図の初期化
 80062c6:	f000 fa8d 	bl	80067e4 <write_map>
	make_smap();											//歩数図の初期化
 80062ca:	f000 fbf9 	bl	8006ac0 <make_smap>
	make_route_NESW();											//最短経路探索(route配列に動作が格納される)
 80062ce:	f000 fcff 	bl	8006cd0 <make_route_NESW>

	sensor_start();
 80062d2:	f001 f857 	bl	8007384 <sensor_start>
	printf("Michishirube\r\n");
 80062d6:	4856      	ldr	r0, [pc, #344]	; (8006430 <searchSLA+0x180>)
 80062d8:	f003 fa1a 	bl	8009710 <puts>
	set_dir(FORWARD);
 80062dc:	2000      	movs	r0, #0
 80062de:	f7ff fa09 	bl	80056f4 <set_dir>

	if(wall_ff.dif > wall_ff.threshold){
 80062e2:	4b54      	ldr	r3, [pc, #336]	; (8006434 <searchSLA+0x184>)
 80062e4:	88db      	ldrh	r3, [r3, #6]
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	4b52      	ldr	r3, [pc, #328]	; (8006434 <searchSLA+0x184>)
 80062ec:	899b      	ldrh	r3, [r3, #12]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	429a      	cmp	r2, r3
 80062f2:	dd0a      	ble.n	800630a <searchSLA+0x5a>
		turn_180();
 80062f4:	f7fe fd42 	bl	8004d7c <turn_180>
		HAL_Delay(100);
 80062f8:	2064      	movs	r0, #100	; 0x64
 80062fa:	f7fa ffa5 	bl	8001248 <HAL_Delay>
		turn_dir(DIR_TURN_180);
 80062fe:	2002      	movs	r0, #2
 8006300:	f000 fbc6 	bl	8006a90 <turn_dir>
		set_dir(FORWARD);
 8006304:	2000      	movs	r0, #0
 8006306:	f7ff f9f5 	bl	80056f4 <set_dir>
	}

	half_sectionA();
 800630a:	f7fe fc41 	bl	8004b90 <half_sectionA>
	adv_pos();
 800630e:	f000 f969 	bl	80065e4 <adv_pos>
	conf_route_NESW();
 8006312:	f000 f9bf 	bl	8006694 <conf_route_NESW>
	//====探索走行====
	do{
		//----進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <searchSLA+0x178>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	b2d1      	uxtb	r1, r2
 800631e:	4a42      	ldr	r2, [pc, #264]	; (8006428 <searchSLA+0x178>)
 8006320:	7011      	strb	r1, [r2, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	4b44      	ldr	r3, [pc, #272]	; (8006438 <searchSLA+0x188>)
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	2b22      	cmp	r3, #34	; 0x22
 800632a:	d014      	beq.n	8006356 <searchSLA+0xa6>
 800632c:	2b22      	cmp	r3, #34	; 0x22
 800632e:	dc02      	bgt.n	8006336 <searchSLA+0x86>
 8006330:	2b11      	cmp	r3, #17
 8006332:	d03d      	beq.n	80063b0 <searchSLA+0x100>
 8006334:	e045      	b.n	80063c2 <searchSLA+0x112>
 8006336:	2b44      	cmp	r3, #68	; 0x44
 8006338:	d004      	beq.n	8006344 <searchSLA+0x94>
 800633a:	2b88      	cmp	r3, #136	; 0x88
 800633c:	d141      	bne.n	80063c2 <searchSLA+0x112>
			//----前進----
			case 0x88:
				s_section();                                //このプログラムには無い関数、他のプログラムと比べて類似の関数を探してピッタリなのを作れ　標
 800633e:	f7fe fc65 	bl	8004c0c <s_section>
				break;
 8006342:	e03e      	b.n	80063c2 <searchSLA+0x112>
			//----右折----
			case 0x44:
				turn_SLA_R90();
 8006344:	f7fe fc82 	bl	8004c4c <turn_SLA_R90>
				turn_dir(DIR_TURN_R90);
 8006348:	2001      	movs	r0, #1
 800634a:	f000 fba1 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 800634e:	2000      	movs	r0, #0
 8006350:	f7ff f9d0 	bl	80056f4 <set_dir>
				break;
 8006354:	e035      	b.n	80063c2 <searchSLA+0x112>
			//----180回転----
			case 0x22:
				half_sectionD();
 8006356:	f7fe fc41 	bl	8004bdc <half_sectionD>
				if(wall_ff.dif > wall_ff.threshold){
 800635a:	4b36      	ldr	r3, [pc, #216]	; (8006434 <searchSLA+0x184>)
 800635c:	88db      	ldrh	r3, [r3, #6]
 800635e:	b21b      	sxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	4b34      	ldr	r3, [pc, #208]	; (8006434 <searchSLA+0x184>)
 8006364:	899b      	ldrh	r3, [r3, #12]
 8006366:	b29b      	uxth	r3, r3
 8006368:	429a      	cmp	r2, r3
 800636a:	dd04      	ble.n	8006376 <searchSLA+0xc6>
					MF.FLAG.SET = 1;
 800636c:	4a33      	ldr	r2, [pc, #204]	; (800643c <searchSLA+0x18c>)
 800636e:	7813      	ldrb	r3, [r2, #0]
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	7013      	strb	r3, [r2, #0]
				}
				turn_180();
 8006376:	f7fe fd01 	bl	8004d7c <turn_180>
				HAL_Delay(100);
 800637a:	2064      	movs	r0, #100	; 0x64
 800637c:	f7fa ff64 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_180);
 8006380:	2002      	movs	r0, #2
 8006382:	f000 fb85 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8006386:	2000      	movs	r0, #0
 8006388:	f7ff f9b4 	bl	80056f4 <set_dir>

				if(MF.FLAG.SET){
 800638c:	4b2b      	ldr	r3, [pc, #172]	; (800643c <searchSLA+0x18c>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <searchSLA+0xfa>
					set_position(0);
 800639a:	2000      	movs	r0, #0
 800639c:	f7fe fd0c 	bl	8004db8 <set_position>
					MF.FLAG.SET = 0;
 80063a0:	4a26      	ldr	r2, [pc, #152]	; (800643c <searchSLA+0x18c>)
 80063a2:	7813      	ldrb	r3, [r2, #0]
 80063a4:	f36f 0300 	bfc	r3, #0, #1
 80063a8:	7013      	strb	r3, [r2, #0]
				}
				half_sectionA();			//ここでも一文だけ抜けています、走らせてみると上手くいかないのはこの辺のせい、　標
 80063aa:	f7fe fbf1 	bl	8004b90 <half_sectionA>
				break;
 80063ae:	e008      	b.n	80063c2 <searchSLA+0x112>
			//----左折----
			case 0x11:
				turn_SLA_L90();
 80063b0:	f7fe fca4 	bl	8004cfc <turn_SLA_L90>
				turn_dir(DIR_TURN_L90);
 80063b4:	20ff      	movs	r0, #255	; 0xff
 80063b6:	f000 fb6b 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 80063ba:	2000      	movs	r0, #0
 80063bc:	f7ff f99a 	bl	80056f4 <set_dir>

				break;
 80063c0:	bf00      	nop
		}
		//uart_printf("x:%d, y:%d\r\n",PRELOC.AXIS.X,PRELOC.AXIS.Y);
		adv_pos();
 80063c2:	f000 f90f 	bl	80065e4 <adv_pos>
		conf_route_NESW();
 80063c6:	f000 f965 	bl	8006694 <conf_route_NESW>


	}while((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));
 80063ca:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <searchSLA+0x190>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <searchSLA+0x194>)
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d19b      	bne.n	8006316 <searchSLA+0x66>
 80063de:	4b18      	ldr	r3, [pc, #96]	; (8006440 <searchSLA+0x190>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <searchSLA+0x198>)
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d191      	bne.n	8006316 <searchSLA+0x66>
	half_sectionD();
 80063f2:	f7fe fbf3 	bl	8004bdc <half_sectionD>
	ms_wait(2000);
 80063f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80063fa:	f7fe f889 	bl	8004510 <ms_wait>
	Melody(g6,300);
 80063fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006402:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8006406:	f7fe f99f 	bl	8004748 <Melody>
	Melody(f6,300);
 800640a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800640e:	f240 5075 	movw	r0, #1397	; 0x575
 8006412:	f7fe f999 	bl	8004748 <Melody>
	Melody(e6,300);
 8006416:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800641a:	f240 5026 	movw	r0, #1318	; 0x526
 800641e:	f7fe f993 	bl	8004748 <Melody>

}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200006f4 	.word	0x200006f4
 800642c:	20000396 	.word	0x20000396
 8006430:	0800b6f0 	.word	0x0800b6f0
 8006434:	200005bc 	.word	0x200005bc
 8006438:	200004bc 	.word	0x200004bc
 800643c:	200006e8 	.word	0x200006e8
 8006440:	200003bc 	.word	0x200003bc
 8006444:	20000434 	.word	0x20000434
 8006448:	200003d2 	.word	0x200003d2

0800644c <searchSLA_ESNW>:

void searchSLA_ESNW(){											//連続走行の未完成アルゴリズム、完成させればケッコー早い走行ができる、初期化は直してないからがんばって　標
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0

	//====歩数等初期化====
	m_step = r_cnt = 0;										//歩数と経路カウンタの初期化
 8006450:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <searchSLA_ESNW+0x174>)
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	4b5a      	ldr	r3, [pc, #360]	; (80065c0 <searchSLA_ESNW+0x174>)
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	4b5a      	ldr	r3, [pc, #360]	; (80065c4 <searchSLA_ESNW+0x178>)
 800645c:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報の初期化, 後壁はなくなる
 800645e:	f000 fee9 	bl	8007234 <get_wall_info>
	write_map();											//地図の初期化
 8006462:	f000 f9bf 	bl	80067e4 <write_map>
	make_smap();											//歩数図の初期化
 8006466:	f000 fb2b 	bl	8006ac0 <make_smap>
	make_route_ESNW();											//最短経路探索(route配列に動作が格納される)
 800646a:	f000 fd6f 	bl	8006f4c <make_route_ESNW>

	sensor_start();
 800646e:	f000 ff89 	bl	8007384 <sensor_start>
	printf("Michishirube\r\n");
 8006472:	4855      	ldr	r0, [pc, #340]	; (80065c8 <searchSLA_ESNW+0x17c>)
 8006474:	f003 f94c 	bl	8009710 <puts>
	set_dir(FORWARD);
 8006478:	2000      	movs	r0, #0
 800647a:	f7ff f93b 	bl	80056f4 <set_dir>

	if(wall_ff.dif > wall_ff.threshold){
 800647e:	4b53      	ldr	r3, [pc, #332]	; (80065cc <searchSLA_ESNW+0x180>)
 8006480:	88db      	ldrh	r3, [r3, #6]
 8006482:	b21b      	sxth	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	4b51      	ldr	r3, [pc, #324]	; (80065cc <searchSLA_ESNW+0x180>)
 8006488:	899b      	ldrh	r3, [r3, #12]
 800648a:	b29b      	uxth	r3, r3
 800648c:	429a      	cmp	r2, r3
 800648e:	dd0a      	ble.n	80064a6 <searchSLA_ESNW+0x5a>
		turn_180();
 8006490:	f7fe fc74 	bl	8004d7c <turn_180>
		HAL_Delay(100);
 8006494:	2064      	movs	r0, #100	; 0x64
 8006496:	f7fa fed7 	bl	8001248 <HAL_Delay>
		turn_dir(DIR_TURN_180);
 800649a:	2002      	movs	r0, #2
 800649c:	f000 faf8 	bl	8006a90 <turn_dir>
		set_dir(FORWARD);
 80064a0:	2000      	movs	r0, #0
 80064a2:	f7ff f927 	bl	80056f4 <set_dir>
	}

	half_sectionA();
 80064a6:	f7fe fb73 	bl	8004b90 <half_sectionA>
	adv_pos();
 80064aa:	f000 f89b 	bl	80065e4 <adv_pos>
	conf_route_NESW();
 80064ae:	f000 f8f1 	bl	8006694 <conf_route_NESW>
	//====探索走行====
	do{
		//----進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80064b2:	4b43      	ldr	r3, [pc, #268]	; (80065c0 <searchSLA_ESNW+0x174>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	b2d1      	uxtb	r1, r2
 80064ba:	4a41      	ldr	r2, [pc, #260]	; (80065c0 <searchSLA_ESNW+0x174>)
 80064bc:	7011      	strb	r1, [r2, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	4b43      	ldr	r3, [pc, #268]	; (80065d0 <searchSLA_ESNW+0x184>)
 80064c2:	5c9b      	ldrb	r3, [r3, r2]
 80064c4:	2b22      	cmp	r3, #34	; 0x22
 80064c6:	d014      	beq.n	80064f2 <searchSLA_ESNW+0xa6>
 80064c8:	2b22      	cmp	r3, #34	; 0x22
 80064ca:	dc02      	bgt.n	80064d2 <searchSLA_ESNW+0x86>
 80064cc:	2b11      	cmp	r3, #17
 80064ce:	d03c      	beq.n	800654a <searchSLA_ESNW+0xfe>
 80064d0:	e044      	b.n	800655c <searchSLA_ESNW+0x110>
 80064d2:	2b44      	cmp	r3, #68	; 0x44
 80064d4:	d004      	beq.n	80064e0 <searchSLA_ESNW+0x94>
 80064d6:	2b88      	cmp	r3, #136	; 0x88
 80064d8:	d140      	bne.n	800655c <searchSLA_ESNW+0x110>
			//----前進----
			case 0x88:
				s_section();                                //このプログラムには無い関数、他のプログラムと比べて類似の関数を探してピッタリなのを作れ　標
 80064da:	f7fe fb97 	bl	8004c0c <s_section>
				break;
 80064de:	e03d      	b.n	800655c <searchSLA_ESNW+0x110>
			//----右折----
			case 0x44:
				turn_SLA_R90();
 80064e0:	f7fe fbb4 	bl	8004c4c <turn_SLA_R90>
				turn_dir(DIR_TURN_R90);
 80064e4:	2001      	movs	r0, #1
 80064e6:	f000 fad3 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 80064ea:	2000      	movs	r0, #0
 80064ec:	f7ff f902 	bl	80056f4 <set_dir>
				break;
 80064f0:	e034      	b.n	800655c <searchSLA_ESNW+0x110>
			//----180回転----
			case 0x22:
				half_sectionD();
 80064f2:	f7fe fb73 	bl	8004bdc <half_sectionD>
				if(wall_ff.threshold > wall_ff.threshold){
 80064f6:	4b35      	ldr	r3, [pc, #212]	; (80065cc <searchSLA_ESNW+0x180>)
 80064f8:	899b      	ldrh	r3, [r3, #12]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	4b33      	ldr	r3, [pc, #204]	; (80065cc <searchSLA_ESNW+0x180>)
 80064fe:	899b      	ldrh	r3, [r3, #12]
 8006500:	b29b      	uxth	r3, r3
 8006502:	429a      	cmp	r2, r3
 8006504:	d904      	bls.n	8006510 <searchSLA_ESNW+0xc4>
					MF.FLAG.SET = 1;
 8006506:	4a33      	ldr	r2, [pc, #204]	; (80065d4 <searchSLA_ESNW+0x188>)
 8006508:	7813      	ldrb	r3, [r2, #0]
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	7013      	strb	r3, [r2, #0]
				}
				turn_180();
 8006510:	f7fe fc34 	bl	8004d7c <turn_180>
				HAL_Delay(100);
 8006514:	2064      	movs	r0, #100	; 0x64
 8006516:	f7fa fe97 	bl	8001248 <HAL_Delay>
				turn_dir(DIR_TURN_180);
 800651a:	2002      	movs	r0, #2
 800651c:	f000 fab8 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8006520:	2000      	movs	r0, #0
 8006522:	f7ff f8e7 	bl	80056f4 <set_dir>

				if(MF.FLAG.SET){
 8006526:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <searchSLA_ESNW+0x188>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <searchSLA_ESNW+0xf8>
					set_position(0);
 8006534:	2000      	movs	r0, #0
 8006536:	f7fe fc3f 	bl	8004db8 <set_position>
					MF.FLAG.SET = 0;
 800653a:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <searchSLA_ESNW+0x188>)
 800653c:	7813      	ldrb	r3, [r2, #0]
 800653e:	f36f 0300 	bfc	r3, #0, #1
 8006542:	7013      	strb	r3, [r2, #0]
				}
				half_sectionA();			//ここでも一文だけ抜けています、走らせてみると上手くいかないのはこの辺のせい、　標
 8006544:	f7fe fb24 	bl	8004b90 <half_sectionA>
				break;
 8006548:	e008      	b.n	800655c <searchSLA_ESNW+0x110>
			//----左折----
			case 0x11:
				turn_SLA_L90();
 800654a:	f7fe fbd7 	bl	8004cfc <turn_SLA_L90>
				turn_dir(DIR_TURN_L90);
 800654e:	20ff      	movs	r0, #255	; 0xff
 8006550:	f000 fa9e 	bl	8006a90 <turn_dir>
				set_dir(FORWARD);
 8006554:	2000      	movs	r0, #0
 8006556:	f7ff f8cd 	bl	80056f4 <set_dir>

				break;
 800655a:	bf00      	nop
		}
		//uart_printf("x:%d, y:%d\r\n",PRELOC.AXIS.X,PRELOC.AXIS.Y);
		adv_pos();
 800655c:	f000 f842 	bl	80065e4 <adv_pos>
		conf_route_ESNW();
 8006560:	f000 f8b6 	bl	80066d0 <conf_route_ESNW>


	}while((PRELOC.AXIS.X != goal_x) || (PRELOC.AXIS.Y != goal_y));
 8006564:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <searchSLA_ESNW+0x18c>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <searchSLA_ESNW+0x190>)
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d19c      	bne.n	80064b2 <searchSLA_ESNW+0x66>
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <searchSLA_ESNW+0x18c>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	4b16      	ldr	r3, [pc, #88]	; (80065e0 <searchSLA_ESNW+0x194>)
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d192      	bne.n	80064b2 <searchSLA_ESNW+0x66>
	half_sectionD();
 800658c:	f7fe fb26 	bl	8004bdc <half_sectionD>
	ms_wait(2000);
 8006590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006594:	f7fd ffbc 	bl	8004510 <ms_wait>
	Melody(g6,300);
 8006598:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800659c:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 80065a0:	f7fe f8d2 	bl	8004748 <Melody>
	Melody(f6,300);
 80065a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80065a8:	f240 5075 	movw	r0, #1397	; 0x575
 80065ac:	f7fe f8cc 	bl	8004748 <Melody>
	Melody(e6,300);
 80065b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80065b4:	f240 5026 	movw	r0, #1318	; 0x526
 80065b8:	f7fe f8c6 	bl	8004748 <Melody>

}
 80065bc:	bf00      	nop
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200006f4 	.word	0x200006f4
 80065c4:	20000396 	.word	0x20000396
 80065c8:	0800b6f0 	.word	0x0800b6f0
 80065cc:	200005bc 	.word	0x200005bc
 80065d0:	200004bc 	.word	0x200004bc
 80065d4:	200006e8 	.word	0x200006e8
 80065d8:	200003bc 	.word	0x200003bc
 80065dc:	20000434 	.word	0x20000434
 80065e0:	200003d2 	.word	0x200003d2

080065e4 <adv_pos>:
//	マイクロマウス内部位置情報で前進させる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos()
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
	switch(m_dir){											//マイクロマウスが現在向いている方向で判定
 80065e8:	4b28      	ldr	r3, [pc, #160]	; (800668c <adv_pos+0xa8>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d847      	bhi.n	8006680 <adv_pos+0x9c>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <adv_pos+0x14>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006627 	.word	0x08006627
 8006600:	08006645 	.word	0x08006645
 8006604:	08006663 	.word	0x08006663
	case 0x00:												//北方向に向いている場合
		(PRELOC.AXIS.Y)++;									//Y座標をインクリメント
 8006608:	4b21      	ldr	r3, [pc, #132]	; (8006690 <adv_pos+0xac>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006610:	b2db      	uxtb	r3, r3
 8006612:	3301      	adds	r3, #1
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	b2d9      	uxtb	r1, r3
 800661a:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <adv_pos+0xac>)
 800661c:	7813      	ldrb	r3, [r2, #0]
 800661e:	f361 1307 	bfi	r3, r1, #4, #4
 8006622:	7013      	strb	r3, [r2, #0]
		break;
 8006624:	e02c      	b.n	8006680 <adv_pos+0x9c>
	case 0x01:												//東方向に向いている場合
		(PRELOC.AXIS.X)++;									//X座標をインクリメント
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <adv_pos+0xac>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3301      	adds	r3, #1
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	b2d9      	uxtb	r1, r3
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <adv_pos+0xac>)
 800663a:	7813      	ldrb	r3, [r2, #0]
 800663c:	f361 0303 	bfi	r3, r1, #0, #4
 8006640:	7013      	strb	r3, [r2, #0]
		break;
 8006642:	e01d      	b.n	8006680 <adv_pos+0x9c>
	case 0x02:												//南方向に向いている場合
		(PRELOC.AXIS.Y)--;									//Y座標をデクリメント
 8006644:	4b12      	ldr	r3, [pc, #72]	; (8006690 <adv_pos+0xac>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800664c:	b2db      	uxtb	r3, r3
 800664e:	330f      	adds	r3, #15
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	b2d9      	uxtb	r1, r3
 8006656:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <adv_pos+0xac>)
 8006658:	7813      	ldrb	r3, [r2, #0]
 800665a:	f361 1307 	bfi	r3, r1, #4, #4
 800665e:	7013      	strb	r3, [r2, #0]
		break;
 8006660:	e00e      	b.n	8006680 <adv_pos+0x9c>
	case 0x03:												//西方向に向いている場合
		(PRELOC.AXIS.X)--;									//X座標をデクリメント
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <adv_pos+0xac>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800666a:	b2db      	uxtb	r3, r3
 800666c:	330f      	adds	r3, #15
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	b2d9      	uxtb	r1, r3
 8006674:	4a06      	ldr	r2, [pc, #24]	; (8006690 <adv_pos+0xac>)
 8006676:	7813      	ldrb	r3, [r2, #0]
 8006678:	f361 0303 	bfi	r3, r1, #0, #4
 800667c:	7013      	strb	r3, [r2, #0]
		break;
 800667e:	bf00      	nop
	}
}
 8006680:	bf00      	nop
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	200004b8 	.word	0x200004b8
 8006690:	200003bc 	.word	0x200003bc

08006694 <conf_route_NESW>:
//	進路を判定する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route_NESW()
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
	//----壁情報書き込み----
	write_map();
 8006698:	f000 f8a4 	bl	80067e4 <write_map>

	//----最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <conf_route_NESW+0x30>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <conf_route_NESW+0x34>)
 80066a4:	5c9a      	ldrb	r2, [r3, r2]
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <conf_route_NESW+0x38>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	4013      	ands	r3, r2
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d006      	beq.n	80066c0 <conf_route_NESW+0x2c>
		make_smap();										//歩数マップを更新
 80066b2:	f000 fa05 	bl	8006ac0 <make_smap>
		make_route_NESW();										//最短経路を更新
 80066b6:	f000 fb0b 	bl	8006cd0 <make_route_NESW>
		r_cnt = 0;											//経路カウンタを0に
 80066ba:	4b02      	ldr	r3, [pc, #8]	; (80066c4 <conf_route_NESW+0x30>)
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
	}
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200006f4 	.word	0x200006f4
 80066c8:	200004bc 	.word	0x200004bc
 80066cc:	20000376 	.word	0x20000376

080066d0 <conf_route_ESNW>:

void conf_route_ESNW()
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
	//----壁情報書き込み----
	write_map();
 80066d4:	f000 f886 	bl	80067e4 <write_map>

	//----最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 80066d8:	4b09      	ldr	r3, [pc, #36]	; (8006700 <conf_route_ESNW+0x30>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <conf_route_ESNW+0x34>)
 80066e0:	5c9a      	ldrb	r2, [r3, r2]
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <conf_route_ESNW+0x38>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4013      	ands	r3, r2
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d006      	beq.n	80066fc <conf_route_ESNW+0x2c>
		make_smap();										//歩数マップを更新
 80066ee:	f000 f9e7 	bl	8006ac0 <make_smap>
		make_route_ESNW();										//最短経路を更新
 80066f2:	f000 fc2b 	bl	8006f4c <make_route_ESNW>
		r_cnt = 0;											//経路カウンタを0に
 80066f6:	4b02      	ldr	r3, [pc, #8]	; (8006700 <conf_route_ESNW+0x30>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
	}
}
 80066fc:	bf00      	nop
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200006f4 	.word	0x200006f4
 8006704:	200004bc 	.word	0x200004bc
 8006708:	20000376 	.word	0x20000376

0800670c <map_Init>:
//	マップ格納配列map[][]の初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init()
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
	//====変数宣言====
	unsigned char x, y;												//for文用変数

	//====初期化開始====
	//マップのクリア
	for(y = 0; y <= 0x0f; y++){								//各Y座標で実行
 8006712:	2300      	movs	r3, #0
 8006714:	71bb      	strb	r3, [r7, #6]
 8006716:	e013      	b.n	8006740 <map_Init+0x34>
		for(x = 0; x <= 0x0f; x++){							//各X座標で実行
 8006718:	2300      	movs	r3, #0
 800671a:	71fb      	strb	r3, [r7, #7]
 800671c:	e00a      	b.n	8006734 <map_Init+0x28>
			map[y][x] = 0xf0;								//上位(2次走行時)を壁あり、下位(1次走行時)を壁なしとする。
 800671e:	79ba      	ldrb	r2, [r7, #6]
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	492f      	ldr	r1, [pc, #188]	; (80067e0 <map_Init+0xd4>)
 8006724:	0112      	lsls	r2, r2, #4
 8006726:	440a      	add	r2, r1
 8006728:	4413      	add	r3, r2
 800672a:	22f0      	movs	r2, #240	; 0xf0
 800672c:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 0x0f; x++){							//各X座標で実行
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	3301      	adds	r3, #1
 8006732:	71fb      	strb	r3, [r7, #7]
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	2b0f      	cmp	r3, #15
 8006738:	d9f1      	bls.n	800671e <map_Init+0x12>
	for(y = 0; y <= 0x0f; y++){								//各Y座標で実行
 800673a:	79bb      	ldrb	r3, [r7, #6]
 800673c:	3301      	adds	r3, #1
 800673e:	71bb      	strb	r3, [r7, #6]
 8006740:	79bb      	ldrb	r3, [r7, #6]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d9e8      	bls.n	8006718 <map_Init+0xc>
		}
	}

	//確定壁の配置
	for(y = 0; y <= 0x0f; y++){								//各Y座標で実行
 8006746:	2300      	movs	r3, #0
 8006748:	71bb      	strb	r3, [r7, #6]
 800674a:	e020      	b.n	800678e <map_Init+0x82>
		map[y][0] |= 0xf1;									//最西に壁を配置
 800674c:	79bb      	ldrb	r3, [r7, #6]
 800674e:	4a24      	ldr	r2, [pc, #144]	; (80067e0 <map_Init+0xd4>)
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	4413      	add	r3, r2
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	79bb      	ldrb	r3, [r7, #6]
 8006758:	f062 020e 	orn	r2, r2, #14
 800675c:	b2d1      	uxtb	r1, r2
 800675e:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <map_Init+0xd4>)
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	4413      	add	r3, r2
 8006764:	460a      	mov	r2, r1
 8006766:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//最東に壁を配置
 8006768:	79bb      	ldrb	r3, [r7, #6]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <map_Init+0xd4>)
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	4413      	add	r3, r2
 8006770:	330f      	adds	r3, #15
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	79bb      	ldrb	r3, [r7, #6]
 8006776:	f062 020b 	orn	r2, r2, #11
 800677a:	b2d1      	uxtb	r1, r2
 800677c:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <map_Init+0xd4>)
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	4413      	add	r3, r2
 8006782:	330f      	adds	r3, #15
 8006784:	460a      	mov	r2, r1
 8006786:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 0x0f; y++){								//各Y座標で実行
 8006788:	79bb      	ldrb	r3, [r7, #6]
 800678a:	3301      	adds	r3, #1
 800678c:	71bb      	strb	r3, [r7, #6]
 800678e:	79bb      	ldrb	r3, [r7, #6]
 8006790:	2b0f      	cmp	r3, #15
 8006792:	d9db      	bls.n	800674c <map_Init+0x40>
	}
	for(x = 0; x <= 0x0f; x++){								//各X座標で実行
 8006794:	2300      	movs	r3, #0
 8006796:	71fb      	strb	r3, [r7, #7]
 8006798:	e019      	b.n	80067ce <map_Init+0xc2>
		map[0][x] |= 0xf2;									//最南に壁を配置
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <map_Init+0xd4>)
 800679e:	5cd2      	ldrb	r2, [r2, r3]
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	f062 020d 	orn	r2, r2, #13
 80067a6:	b2d1      	uxtb	r1, r2
 80067a8:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <map_Init+0xd4>)
 80067aa:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//最北に壁を配置
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <map_Init+0xd4>)
 80067b0:	4413      	add	r3, r2
 80067b2:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	f062 0207 	orn	r2, r2, #7
 80067bc:	b2d1      	uxtb	r1, r2
 80067be:	4a08      	ldr	r2, [pc, #32]	; (80067e0 <map_Init+0xd4>)
 80067c0:	4413      	add	r3, r2
 80067c2:	460a      	mov	r2, r1
 80067c4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 0x0f; x++){								//各X座標で実行
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	3301      	adds	r3, #1
 80067cc:	71fb      	strb	r3, [r7, #7]
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	2b0f      	cmp	r3, #15
 80067d2:	d9e2      	bls.n	800679a <map_Init+0x8e>
	}
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000274 	.word	0x20000274

080067e4 <write_map>:
//	マップデータを書き込む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map()
{
 80067e4:	b490      	push	{r4, r7}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
	//====変数宣言====
	unsigned char m_temp;											//向きを補正した壁情報

	//====壁情報の補正格納====
	m_temp = (wall_info >> m_dir) & 0x0f;					//センサ壁情報をm_dirで向きを補正させて下位4bit分を残す
 80067ea:	4ba5      	ldr	r3, [pc, #660]	; (8006a80 <write_map+0x29c>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	4ba4      	ldr	r3, [pc, #656]	; (8006a84 <write_map+0x2a0>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	fa42 f303 	asr.w	r3, r2, r3
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	b25a      	sxtb	r2, r3
 8006806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680a:	4313      	orrs	r3, r2
 800680c:	b25b      	sxtb	r3, r3
 800680e:	71fb      	strb	r3, [r7, #7]

	//====データの書き込み====
	map[PRELOC.AXIS.Y][PRELOC.AXIS.X] = m_temp; 			//現在地に書き込み
 8006810:	4b9d      	ldr	r3, [pc, #628]	; (8006a88 <write_map+0x2a4>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006818:	b2db      	uxtb	r3, r3
 800681a:	4618      	mov	r0, r3
 800681c:	4b9a      	ldr	r3, [pc, #616]	; (8006a88 <write_map+0x2a4>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006824:	b2db      	uxtb	r3, r3
 8006826:	4619      	mov	r1, r3
 8006828:	4a98      	ldr	r2, [pc, #608]	; (8006a8c <write_map+0x2a8>)
 800682a:	0103      	lsls	r3, r0, #4
 800682c:	4413      	add	r3, r2
 800682e:	440b      	add	r3, r1
 8006830:	79fa      	ldrb	r2, [r7, #7]
 8006832:	701a      	strb	r2, [r3, #0]
	//----周辺に書き込む----
	//北側について
	if(PRELOC.AXIS.Y != 15){								//現在最北端でないとき
 8006834:	4b94      	ldr	r3, [pc, #592]	; (8006a88 <write_map+0x2a4>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b0f      	cmp	r3, #15
 8006840:	d041      	beq.n	80068c6 <write_map+0xe2>
		if(m_temp & 0x88){									//北壁がある場合
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01e      	beq.n	800688a <write_map+0xa6>
			map[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X] |= 0x22;	//北側の区画から見て南壁ありを書き込む
 800684c:	4b8e      	ldr	r3, [pc, #568]	; (8006a88 <write_map+0x2a4>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006854:	b2d8      	uxtb	r0, r3
 8006856:	4603      	mov	r3, r0
 8006858:	3301      	adds	r3, #1
 800685a:	4a8b      	ldr	r2, [pc, #556]	; (8006a88 <write_map+0x2a4>)
 800685c:	7812      	ldrb	r2, [r2, #0]
 800685e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8006862:	b2d1      	uxtb	r1, r2
 8006864:	460c      	mov	r4, r1
 8006866:	4a89      	ldr	r2, [pc, #548]	; (8006a8c <write_map+0x2a8>)
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	4413      	add	r3, r2
 800686c:	4423      	add	r3, r4
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	4603      	mov	r3, r0
 8006872:	3301      	adds	r3, #1
 8006874:	4608      	mov	r0, r1
 8006876:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800687a:	b2d1      	uxtb	r1, r2
 800687c:	4a83      	ldr	r2, [pc, #524]	; (8006a8c <write_map+0x2a8>)
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	4413      	add	r3, r2
 8006882:	4403      	add	r3, r0
 8006884:	460a      	mov	r2, r1
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e01d      	b.n	80068c6 <write_map+0xe2>
		}else{												//北壁がない場合
			map[PRELOC.AXIS.Y + 1][PRELOC.AXIS.X] &= 0xDD;	//北側の区画から見て南壁なしを書き込む
 800688a:	4b7f      	ldr	r3, [pc, #508]	; (8006a88 <write_map+0x2a4>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006892:	b2d8      	uxtb	r0, r3
 8006894:	4603      	mov	r3, r0
 8006896:	3301      	adds	r3, #1
 8006898:	4a7b      	ldr	r2, [pc, #492]	; (8006a88 <write_map+0x2a4>)
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80068a0:	b2d1      	uxtb	r1, r2
 80068a2:	460c      	mov	r4, r1
 80068a4:	4a79      	ldr	r2, [pc, #484]	; (8006a8c <write_map+0x2a8>)
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	4413      	add	r3, r2
 80068aa:	4423      	add	r3, r4
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	4603      	mov	r3, r0
 80068b0:	3301      	adds	r3, #1
 80068b2:	4608      	mov	r0, r1
 80068b4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80068b8:	b2d1      	uxtb	r1, r2
 80068ba:	4a74      	ldr	r2, [pc, #464]	; (8006a8c <write_map+0x2a8>)
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	4403      	add	r3, r0
 80068c2:	460a      	mov	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]
		}
	}
	//東側について
	if(PRELOC.AXIS.X != 15){								//現在最東端でないとき
 80068c6:	4b70      	ldr	r3, [pc, #448]	; (8006a88 <write_map+0x2a4>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b0f      	cmp	r3, #15
 80068d2:	d03f      	beq.n	8006954 <write_map+0x170>
		if(m_temp & 0x44){									//東壁がある場合
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01d      	beq.n	800691a <write_map+0x136>
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1] |= 0x11;	//東側の区画から見て西壁ありを書き込む
 80068de:	4b6a      	ldr	r3, [pc, #424]	; (8006a88 <write_map+0x2a4>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80068e6:	b2dc      	uxtb	r4, r3
 80068e8:	4622      	mov	r2, r4
 80068ea:	4b67      	ldr	r3, [pc, #412]	; (8006a88 <write_map+0x2a4>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80068f2:	b2d8      	uxtb	r0, r3
 80068f4:	4603      	mov	r3, r0
 80068f6:	3301      	adds	r3, #1
 80068f8:	4964      	ldr	r1, [pc, #400]	; (8006a8c <write_map+0x2a8>)
 80068fa:	0112      	lsls	r2, r2, #4
 80068fc:	440a      	add	r2, r1
 80068fe:	4413      	add	r3, r2
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	4603      	mov	r3, r0
 8006904:	3301      	adds	r3, #1
 8006906:	f042 0211 	orr.w	r2, r2, #17
 800690a:	b2d0      	uxtb	r0, r2
 800690c:	495f      	ldr	r1, [pc, #380]	; (8006a8c <write_map+0x2a8>)
 800690e:	0122      	lsls	r2, r4, #4
 8006910:	440a      	add	r2, r1
 8006912:	4413      	add	r3, r2
 8006914:	4602      	mov	r2, r0
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e01c      	b.n	8006954 <write_map+0x170>
		}else{												//北壁がない場合
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X + 1] &= 0xEE;	//東側の区画から見て西壁なしを書き込む
 800691a:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <write_map+0x2a4>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006922:	b2dc      	uxtb	r4, r3
 8006924:	4622      	mov	r2, r4
 8006926:	4b58      	ldr	r3, [pc, #352]	; (8006a88 <write_map+0x2a4>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800692e:	b2d8      	uxtb	r0, r3
 8006930:	4603      	mov	r3, r0
 8006932:	3301      	adds	r3, #1
 8006934:	4955      	ldr	r1, [pc, #340]	; (8006a8c <write_map+0x2a8>)
 8006936:	0112      	lsls	r2, r2, #4
 8006938:	440a      	add	r2, r1
 800693a:	4413      	add	r3, r2
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	4603      	mov	r3, r0
 8006940:	3301      	adds	r3, #1
 8006942:	f022 0211 	bic.w	r2, r2, #17
 8006946:	b2d0      	uxtb	r0, r2
 8006948:	4950      	ldr	r1, [pc, #320]	; (8006a8c <write_map+0x2a8>)
 800694a:	0122      	lsls	r2, r4, #4
 800694c:	440a      	add	r2, r1
 800694e:	4413      	add	r3, r2
 8006950:	4602      	mov	r2, r0
 8006952:	701a      	strb	r2, [r3, #0]
		}
	}
	//南壁について
	if(PRELOC.AXIS.Y != 0){									//現在最南端でないとき
 8006954:	4b4c      	ldr	r3, [pc, #304]	; (8006a88 <write_map+0x2a4>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d041      	beq.n	80069e6 <write_map+0x202>
		if(m_temp & 0x22){									//南壁がある場合
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01e      	beq.n	80069aa <write_map+0x1c6>
			map[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X] |= 0x88;	//南側の区画から見て北壁ありを書き込む
 800696c:	4b46      	ldr	r3, [pc, #280]	; (8006a88 <write_map+0x2a4>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006974:	b2d8      	uxtb	r0, r3
 8006976:	4603      	mov	r3, r0
 8006978:	3b01      	subs	r3, #1
 800697a:	4a43      	ldr	r2, [pc, #268]	; (8006a88 <write_map+0x2a4>)
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8006982:	b2d1      	uxtb	r1, r2
 8006984:	460c      	mov	r4, r1
 8006986:	4a41      	ldr	r2, [pc, #260]	; (8006a8c <write_map+0x2a8>)
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	4413      	add	r3, r2
 800698c:	4423      	add	r3, r4
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	4603      	mov	r3, r0
 8006992:	3b01      	subs	r3, #1
 8006994:	4608      	mov	r0, r1
 8006996:	f062 0277 	orn	r2, r2, #119	; 0x77
 800699a:	b2d1      	uxtb	r1, r2
 800699c:	4a3b      	ldr	r2, [pc, #236]	; (8006a8c <write_map+0x2a8>)
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	4413      	add	r3, r2
 80069a2:	4403      	add	r3, r0
 80069a4:	460a      	mov	r2, r1
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e01d      	b.n	80069e6 <write_map+0x202>
		}else{												//南壁がない場合
			map[PRELOC.AXIS.Y - 1][PRELOC.AXIS.X] &= 0x77;	//南側の区画から見て北壁なしを書き込む
 80069aa:	4b37      	ldr	r3, [pc, #220]	; (8006a88 <write_map+0x2a4>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80069b2:	b2d8      	uxtb	r0, r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a33      	ldr	r2, [pc, #204]	; (8006a88 <write_map+0x2a4>)
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80069c0:	b2d1      	uxtb	r1, r2
 80069c2:	460c      	mov	r4, r1
 80069c4:	4a31      	ldr	r2, [pc, #196]	; (8006a8c <write_map+0x2a8>)
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	4413      	add	r3, r2
 80069ca:	4423      	add	r3, r4
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	4603      	mov	r3, r0
 80069d0:	3b01      	subs	r3, #1
 80069d2:	4608      	mov	r0, r1
 80069d4:	f002 0277 	and.w	r2, r2, #119	; 0x77
 80069d8:	b2d1      	uxtb	r1, r2
 80069da:	4a2c      	ldr	r2, [pc, #176]	; (8006a8c <write_map+0x2a8>)
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	4413      	add	r3, r2
 80069e0:	4403      	add	r3, r0
 80069e2:	460a      	mov	r2, r1
 80069e4:	701a      	strb	r2, [r3, #0]
		}
	}
	//西側について
	if(PRELOC.AXIS.X != 0){									//現在最西端でないとき
 80069e6:	4b28      	ldr	r3, [pc, #160]	; (8006a88 <write_map+0x2a4>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d03f      	beq.n	8006a74 <write_map+0x290>
		if(m_temp & 0x11){									//西壁がある場合
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	f003 0311 	and.w	r3, r3, #17
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01d      	beq.n	8006a3a <write_map+0x256>
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1] |= 0x44;	//西側の区画から見て東壁ありを書き込む
 80069fe:	4b22      	ldr	r3, [pc, #136]	; (8006a88 <write_map+0x2a4>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006a06:	b2dc      	uxtb	r4, r3
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4b1f      	ldr	r3, [pc, #124]	; (8006a88 <write_map+0x2a4>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006a12:	b2d8      	uxtb	r0, r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	3b01      	subs	r3, #1
 8006a18:	491c      	ldr	r1, [pc, #112]	; (8006a8c <write_map+0x2a8>)
 8006a1a:	0112      	lsls	r2, r2, #4
 8006a1c:	440a      	add	r2, r1
 8006a1e:	4413      	add	r3, r2
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	4603      	mov	r3, r0
 8006a24:	3b01      	subs	r3, #1
 8006a26:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8006a2a:	b2d0      	uxtb	r0, r2
 8006a2c:	4917      	ldr	r1, [pc, #92]	; (8006a8c <write_map+0x2a8>)
 8006a2e:	0122      	lsls	r2, r4, #4
 8006a30:	440a      	add	r2, r1
 8006a32:	4413      	add	r3, r2
 8006a34:	4602      	mov	r2, r0
 8006a36:	701a      	strb	r2, [r3, #0]
		}else{												//西壁がない場合
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1] &= 0xBB;	//西側の区画から見て東側なしを書き込む
		}
	}
}
 8006a38:	e01c      	b.n	8006a74 <write_map+0x290>
			map[PRELOC.AXIS.Y][PRELOC.AXIS.X - 1] &= 0xBB;	//西側の区画から見て東側なしを書き込む
 8006a3a:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <write_map+0x2a4>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006a42:	b2dc      	uxtb	r4, r3
 8006a44:	4622      	mov	r2, r4
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <write_map+0x2a4>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006a4e:	b2d8      	uxtb	r0, r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	3b01      	subs	r3, #1
 8006a54:	490d      	ldr	r1, [pc, #52]	; (8006a8c <write_map+0x2a8>)
 8006a56:	0112      	lsls	r2, r2, #4
 8006a58:	440a      	add	r2, r1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	3b01      	subs	r3, #1
 8006a62:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8006a66:	b2d0      	uxtb	r0, r2
 8006a68:	4908      	ldr	r1, [pc, #32]	; (8006a8c <write_map+0x2a8>)
 8006a6a:	0122      	lsls	r2, r4, #4
 8006a6c:	440a      	add	r2, r1
 8006a6e:	4413      	add	r3, r2
 8006a70:	4602      	mov	r2, r0
 8006a72:	701a      	strb	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc90      	pop	{r4, r7}
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000376 	.word	0x20000376
 8006a84:	200004b8 	.word	0x200004b8
 8006a88:	200003bc 	.word	0x200003bc
 8006a8c:	20000274 	.word	0x20000274

08006a90 <turn_dir>:
//	マウスの方向を変更する
// 引数1：t_pat・・・回転方向(drive.hでマクロ定義)
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(unsigned char	t_pat)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	71fb      	strb	r3, [r7, #7]
	//====方向を変更====
	m_dir = (m_dir + t_pat) & 0x03;							//指定された分m_dirを回転させる
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <turn_dir+0x2c>)
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <turn_dir+0x2c>)
 8006aac:	701a      	strb	r2, [r3, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	200004b8 	.word	0x200004b8

08006ac0 <make_smap>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap()
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
	//====変数宣言====
	unsigned char x, y;												//for文用変数
	unsigned char m_temp;											//マップデータ一時保持

	//====歩数マップのクリア====
	for(y = 0; y <= 0x0f; y++){								//各Y座標で実行
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	71bb      	strb	r3, [r7, #6]
 8006aca:	e013      	b.n	8006af4 <make_smap+0x34>
		for( x = 0; x <= 0x0f; x++){						//各X座標で実行
 8006acc:	2300      	movs	r3, #0
 8006ace:	71fb      	strb	r3, [r7, #7]
 8006ad0:	e00a      	b.n	8006ae8 <make_smap+0x28>
			smap[y][x] = 0xff;								//未記入部分は歩数最大とする
 8006ad2:	79ba      	ldrb	r2, [r7, #6]
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	4977      	ldr	r1, [pc, #476]	; (8006cb4 <make_smap+0x1f4>)
 8006ad8:	0112      	lsls	r2, r2, #4
 8006ada:	440a      	add	r2, r1
 8006adc:	4413      	add	r3, r2
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	701a      	strb	r2, [r3, #0]
		for( x = 0; x <= 0x0f; x++){						//各X座標で実行
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	2b0f      	cmp	r3, #15
 8006aec:	d9f1      	bls.n	8006ad2 <make_smap+0x12>
	for(y = 0; y <= 0x0f; y++){								//各Y座標で実行
 8006aee:	79bb      	ldrb	r3, [r7, #6]
 8006af0:	3301      	adds	r3, #1
 8006af2:	71bb      	strb	r3, [r7, #6]
 8006af4:	79bb      	ldrb	r3, [r7, #6]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d9e8      	bls.n	8006acc <make_smap+0xc>
		}
	}

	//====ゴール座標を0にする====
	smap[goal_y][goal_x] = 0;
 8006afa:	4b6f      	ldr	r3, [pc, #444]	; (8006cb8 <make_smap+0x1f8>)
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	4b6e      	ldr	r3, [pc, #440]	; (8006cbc <make_smap+0x1fc>)
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	4a6b      	ldr	r2, [pc, #428]	; (8006cb4 <make_smap+0x1f4>)
 8006b08:	0103      	lsls	r3, r0, #4
 8006b0a:	4413      	add	r3, r2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]

	//====歩数カウンタを0にする====
	m_step = 0;												//現在記入した最大の歩数となる
 8006b12:	4b6b      	ldr	r3, [pc, #428]	; (8006cc0 <make_smap+0x200>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]

	//====自分の座標にたどり着くまでループ====
	do{
		//----マップ全域を捜索----
		for( y = 0; y <= 0x0f; y++){						//各Y座標で実行
 8006b18:	2300      	movs	r3, #0
 8006b1a:	71bb      	strb	r3, [r7, #6]
 8006b1c:	e0a6      	b.n	8006c6c <make_smap+0x1ac>
			for( x = 0; x <= 0x0f; x++){					//各X座標で実行
 8006b1e:	2300      	movs	r3, #0
 8006b20:	71fb      	strb	r3, [r7, #7]
 8006b22:	e09c      	b.n	8006c5e <make_smap+0x19e>
				//----現在最大の歩数を発見したとき----
				if( smap[y][x] == m_step){					//歩数格納変数m_stepの値が現在最大の歩数
 8006b24:	79ba      	ldrb	r2, [r7, #6]
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	4962      	ldr	r1, [pc, #392]	; (8006cb4 <make_smap+0x1f4>)
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	440a      	add	r2, r1
 8006b2e:	4413      	add	r3, r2
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	4b63      	ldr	r3, [pc, #396]	; (8006cc0 <make_smap+0x200>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	f040 808e 	bne.w	8006c58 <make_smap+0x198>
					m_temp = map[y][x];						//map配列からマップデータを取り出す
 8006b3c:	79ba      	ldrb	r2, [r7, #6]
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	4960      	ldr	r1, [pc, #384]	; (8006cc4 <make_smap+0x204>)
 8006b42:	0112      	lsls	r2, r2, #4
 8006b44:	440a      	add	r2, r1
 8006b46:	4413      	add	r3, r2
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	717b      	strb	r3, [r7, #5]
					if(MF.FLAG.SCND){						//二次走行用のマップを作成する場合(二次走行時はMF.FLAG.SCNDをTrueにする)
 8006b4c:	4b5e      	ldr	r3, [pc, #376]	; (8006cc8 <make_smap+0x208>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <make_smap+0xa0>
						m_temp >>= 4;						//上位4bitを使うので4bit分右にシフトさせる
 8006b5a:	797b      	ldrb	r3, [r7, #5]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	717b      	strb	r3, [r7, #5]
					}
					//----北壁についての処理----
					if(!(m_temp & 0x08) && y != 0x0f){		//北壁がなく現在最北端でないとき
 8006b60:	797b      	ldrb	r3, [r7, #5]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d119      	bne.n	8006b9e <make_smap+0xde>
 8006b6a:	79bb      	ldrb	r3, [r7, #6]
 8006b6c:	2b0f      	cmp	r3, #15
 8006b6e:	d016      	beq.n	8006b9e <make_smap+0xde>
						if(smap[y+1][x] == 0xff){			//北側が未記入なら
 8006b70:	79bb      	ldrb	r3, [r7, #6]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	494f      	ldr	r1, [pc, #316]	; (8006cb4 <make_smap+0x1f4>)
 8006b78:	0112      	lsls	r2, r2, #4
 8006b7a:	440a      	add	r2, r1
 8006b7c:	4413      	add	r3, r2
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2bff      	cmp	r3, #255	; 0xff
 8006b82:	d10c      	bne.n	8006b9e <make_smap+0xde>
							smap[y+1][x] = m_step + 1;		//次の歩数を書き込む
 8006b84:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <make_smap+0x200>)
 8006b86:	7819      	ldrb	r1, [r3, #0]
 8006b88:	79bb      	ldrb	r3, [r7, #6]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	3101      	adds	r1, #1
 8006b90:	b2c8      	uxtb	r0, r1
 8006b92:	4948      	ldr	r1, [pc, #288]	; (8006cb4 <make_smap+0x1f4>)
 8006b94:	0112      	lsls	r2, r2, #4
 8006b96:	440a      	add	r2, r1
 8006b98:	4413      	add	r3, r2
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	701a      	strb	r2, [r3, #0]
						}
					}
					//----東壁についての処理----
					if(!(m_temp & 0x04) && x != 0x0f){		//東壁がなく現在最東端でないとき
 8006b9e:	797b      	ldrb	r3, [r7, #5]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d119      	bne.n	8006bdc <make_smap+0x11c>
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	d016      	beq.n	8006bdc <make_smap+0x11c>
						if(smap[y][x+1] == 0xff){			//東側が未記入なら
 8006bae:	79ba      	ldrb	r2, [r7, #6]
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	493f      	ldr	r1, [pc, #252]	; (8006cb4 <make_smap+0x1f4>)
 8006bb6:	0112      	lsls	r2, r2, #4
 8006bb8:	440a      	add	r2, r1
 8006bba:	4413      	add	r3, r2
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2bff      	cmp	r3, #255	; 0xff
 8006bc0:	d10c      	bne.n	8006bdc <make_smap+0x11c>
							smap[y][x+1] = m_step + 1;		//次の歩数を書き込む
 8006bc2:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <make_smap+0x200>)
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	79ba      	ldrb	r2, [r7, #6]
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	3101      	adds	r1, #1
 8006bce:	b2c8      	uxtb	r0, r1
 8006bd0:	4938      	ldr	r1, [pc, #224]	; (8006cb4 <make_smap+0x1f4>)
 8006bd2:	0112      	lsls	r2, r2, #4
 8006bd4:	440a      	add	r2, r1
 8006bd6:	4413      	add	r3, r2
 8006bd8:	4602      	mov	r2, r0
 8006bda:	701a      	strb	r2, [r3, #0]
						}
					}
					//----南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//南壁がなく現在最南端でないとき
 8006bdc:	797b      	ldrb	r3, [r7, #5]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d119      	bne.n	8006c1a <make_smap+0x15a>
 8006be6:	79bb      	ldrb	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d016      	beq.n	8006c1a <make_smap+0x15a>
						if(smap[y-1][x] == 0xff){			//南側が未記入なら
 8006bec:	79bb      	ldrb	r3, [r7, #6]
 8006bee:	1e5a      	subs	r2, r3, #1
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	4930      	ldr	r1, [pc, #192]	; (8006cb4 <make_smap+0x1f4>)
 8006bf4:	0112      	lsls	r2, r2, #4
 8006bf6:	440a      	add	r2, r1
 8006bf8:	4413      	add	r3, r2
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2bff      	cmp	r3, #255	; 0xff
 8006bfe:	d10c      	bne.n	8006c1a <make_smap+0x15a>
							smap[y-1][x] = m_step + 1;		//次の歩数を書き込む
 8006c00:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <make_smap+0x200>)
 8006c02:	7819      	ldrb	r1, [r3, #0]
 8006c04:	79bb      	ldrb	r3, [r7, #6]
 8006c06:	1e5a      	subs	r2, r3, #1
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	3101      	adds	r1, #1
 8006c0c:	b2c8      	uxtb	r0, r1
 8006c0e:	4929      	ldr	r1, [pc, #164]	; (8006cb4 <make_smap+0x1f4>)
 8006c10:	0112      	lsls	r2, r2, #4
 8006c12:	440a      	add	r2, r1
 8006c14:	4413      	add	r3, r2
 8006c16:	4602      	mov	r2, r0
 8006c18:	701a      	strb	r2, [r3, #0]
						}
					}
					//----西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//西壁がなく現在最西端でないとき
 8006c1a:	797b      	ldrb	r3, [r7, #5]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d119      	bne.n	8006c58 <make_smap+0x198>
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <make_smap+0x198>
						if(smap[y][x-1] == 0xff){			//西側が未記入なら
 8006c2a:	79ba      	ldrb	r2, [r7, #6]
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	4920      	ldr	r1, [pc, #128]	; (8006cb4 <make_smap+0x1f4>)
 8006c32:	0112      	lsls	r2, r2, #4
 8006c34:	440a      	add	r2, r1
 8006c36:	4413      	add	r3, r2
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2bff      	cmp	r3, #255	; 0xff
 8006c3c:	d10c      	bne.n	8006c58 <make_smap+0x198>
							smap[y][x-1] = m_step + 1;		//次の歩数を書き込む
 8006c3e:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <make_smap+0x200>)
 8006c40:	7819      	ldrb	r1, [r3, #0]
 8006c42:	79ba      	ldrb	r2, [r7, #6]
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	3101      	adds	r1, #1
 8006c4a:	b2c8      	uxtb	r0, r1
 8006c4c:	4919      	ldr	r1, [pc, #100]	; (8006cb4 <make_smap+0x1f4>)
 8006c4e:	0112      	lsls	r2, r2, #4
 8006c50:	440a      	add	r2, r1
 8006c52:	4413      	add	r3, r2
 8006c54:	4602      	mov	r2, r0
 8006c56:	701a      	strb	r2, [r3, #0]
			for( x = 0; x <= 0x0f; x++){					//各X座標で実行
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	71fb      	strb	r3, [r7, #7]
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	2b0f      	cmp	r3, #15
 8006c62:	f67f af5f 	bls.w	8006b24 <make_smap+0x64>
		for( y = 0; y <= 0x0f; y++){						//各Y座標で実行
 8006c66:	79bb      	ldrb	r3, [r7, #6]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	71bb      	strb	r3, [r7, #6]
 8006c6c:	79bb      	ldrb	r3, [r7, #6]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	f67f af55 	bls.w	8006b1e <make_smap+0x5e>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8006c74:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <make_smap+0x200>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <make_smap+0x200>)
 8006c7e:	701a      	strb	r2, [r3, #0]
	}while(smap[PRELOC.AXIS.Y][PRELOC.AXIS.X] == 0xff);		//現在座標が未記入ではなくなるまで実行
 8006c80:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <make_smap+0x20c>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <make_smap+0x20c>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	4619      	mov	r1, r3
 8006c98:	4a06      	ldr	r2, [pc, #24]	; (8006cb4 <make_smap+0x1f4>)
 8006c9a:	0103      	lsls	r3, r0, #4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2bff      	cmp	r3, #255	; 0xff
 8006ca4:	f43f af38 	beq.w	8006b18 <make_smap+0x58>
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	200005cc 	.word	0x200005cc
 8006cb8:	200003d2 	.word	0x200003d2
 8006cbc:	20000434 	.word	0x20000434
 8006cc0:	20000396 	.word	0x20000396
 8006cc4:	20000274 	.word	0x20000274
 8006cc8:	200006e8 	.word	0x200006e8
 8006ccc:	200003bc 	.word	0x200003bc

08006cd0 <make_route_NESW>:
//	最短経路を導出する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route_NESW()
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
	//====変数宣言====
	unsigned char i = 0;												//カウンタ
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	71fb      	strb	r3, [r7, #7]
	unsigned char x, y;													//X、Y座標
	unsigned char dir_temp =  m_dir;									//方向の保管用変数
 8006cda:	4b95      	ldr	r3, [pc, #596]	; (8006f30 <make_route_NESW+0x260>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	70fb      	strb	r3, [r7, #3]
	unsigned char m_temp;												//マップデータ一時保持

	//====最短経路を初期化====
	do{
		route[i++] = 0xff;										//routeを初期化、iをインクリメント
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	71fa      	strb	r2, [r7, #7]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4b92      	ldr	r3, [pc, #584]	; (8006f34 <make_route_NESW+0x264>)
 8006cea:	21ff      	movs	r1, #255	; 0xff
 8006cec:	5499      	strb	r1, [r3, r2]
	}while(i != 0);												//iが0でない間実行(iがオーバーフローして0になるまで実行？)
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f5      	bne.n	8006ce0 <make_route_NESW+0x10>

	//====歩数カウンタをセット====
	m_step = smap[PRELOC.AXIS.Y][PRELOC.AXIS.X];				//現在座標の歩数マップ値を取得
 8006cf4:	4b90      	ldr	r3, [pc, #576]	; (8006f38 <make_route_NESW+0x268>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	4618      	mov	r0, r3
 8006d00:	4b8d      	ldr	r3, [pc, #564]	; (8006f38 <make_route_NESW+0x268>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4a8b      	ldr	r2, [pc, #556]	; (8006f3c <make_route_NESW+0x26c>)
 8006d0e:	0103      	lsls	r3, r0, #4
 8006d10:	4413      	add	r3, r2
 8006d12:	440b      	add	r3, r1
 8006d14:	781a      	ldrb	r2, [r3, #0]
 8006d16:	4b8a      	ldr	r3, [pc, #552]	; (8006f40 <make_route_NESW+0x270>)
 8006d18:	701a      	strb	r2, [r3, #0]

	//====x, yに現在座標を書き込み====
	x = (unsigned char)PRELOC.AXIS.X;
 8006d1a:	4b87      	ldr	r3, [pc, #540]	; (8006f38 <make_route_NESW+0x268>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	71bb      	strb	r3, [r7, #6]
	y = (unsigned char)PRELOC.AXIS.Y;
 8006d26:	4b84      	ldr	r3, [pc, #528]	; (8006f38 <make_route_NESW+0x268>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	717b      	strb	r3, [r7, #5]

	//====最短経路を導出====
	do{
		m_temp = map[y][x];										//比較用マップ情報の格納
 8006d32:	797a      	ldrb	r2, [r7, #5]
 8006d34:	79bb      	ldrb	r3, [r7, #6]
 8006d36:	4983      	ldr	r1, [pc, #524]	; (8006f44 <make_route_NESW+0x274>)
 8006d38:	0112      	lsls	r2, r2, #4
 8006d3a:	440a      	add	r2, r1
 8006d3c:	4413      	add	r3, r2
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	713b      	strb	r3, [r7, #4]
		if(MF.FLAG.SCND){										//二次走行用のマップを作成する場合(二次走行時はMF.FLAG.SCNDをTrueにする)
 8006d42:	4b81      	ldr	r3, [pc, #516]	; (8006f48 <make_route_NESW+0x278>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <make_route_NESW+0x86>
			m_temp >>= 4;										//上位4bitを使うので4bit分右にシフトさせる
 8006d50:	793b      	ldrb	r3, [r7, #4]
 8006d52:	091b      	lsrs	r3, r3, #4
 8006d54:	713b      	strb	r3, [r7, #4]
		}

		//----北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//北側に壁が無く、現在地より小さい歩数マップ値であれば
 8006d56:	793b      	ldrb	r3, [r7, #4]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d123      	bne.n	8006da8 <make_route_NESW+0xd8>
 8006d60:	797b      	ldrb	r3, [r7, #5]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	79bb      	ldrb	r3, [r7, #6]
 8006d66:	4975      	ldr	r1, [pc, #468]	; (8006f3c <make_route_NESW+0x26c>)
 8006d68:	0112      	lsls	r2, r2, #4
 8006d6a:	440a      	add	r2, r1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	781a      	ldrb	r2, [r3, #0]
 8006d70:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <make_route_NESW+0x270>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d217      	bcs.n	8006da8 <make_route_NESW+0xd8>
			route[i] = (0x00 - m_dir) & 0x03;					//route配列に進行方向を記録
 8006d78:	4b6d      	ldr	r3, [pc, #436]	; (8006f30 <make_route_NESW+0x260>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	425b      	negs	r3, r3
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	f002 0203 	and.w	r2, r2, #3
 8006d86:	b2d1      	uxtb	r1, r2
 8006d88:	4a6a      	ldr	r2, [pc, #424]	; (8006f34 <make_route_NESW+0x264>)
 8006d8a:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//最大歩数マップ値を更新
 8006d8c:	797b      	ldrb	r3, [r7, #5]
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	79bb      	ldrb	r3, [r7, #6]
 8006d92:	496a      	ldr	r1, [pc, #424]	; (8006f3c <make_route_NESW+0x26c>)
 8006d94:	0112      	lsls	r2, r2, #4
 8006d96:	440a      	add	r2, r1
 8006d98:	4413      	add	r3, r2
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	4b68      	ldr	r3, [pc, #416]	; (8006f40 <make_route_NESW+0x270>)
 8006d9e:	701a      	strb	r2, [r3, #0]
			y++;												//北に進んだのでY座標をインクリメント
 8006da0:	797b      	ldrb	r3, [r7, #5]
 8006da2:	3301      	adds	r3, #1
 8006da4:	717b      	strb	r3, [r7, #5]
 8006da6:	e07c      	b.n	8006ea2 <make_route_NESW+0x1d2>
		}
		//----東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//東側に壁が無く、現在地より小さい歩数マップ値であれば
 8006da8:	793b      	ldrb	r3, [r7, #4]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d124      	bne.n	8006dfc <make_route_NESW+0x12c>
 8006db2:	797a      	ldrb	r2, [r7, #5]
 8006db4:	79bb      	ldrb	r3, [r7, #6]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4960      	ldr	r1, [pc, #384]	; (8006f3c <make_route_NESW+0x26c>)
 8006dba:	0112      	lsls	r2, r2, #4
 8006dbc:	440a      	add	r2, r1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <make_route_NESW+0x270>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d218      	bcs.n	8006dfc <make_route_NESW+0x12c>
			route[i] = (0x01 - m_dir) & 0x03;					//route配列に進行方向を記録
 8006dca:	4b59      	ldr	r3, [pc, #356]	; (8006f30 <make_route_NESW+0x260>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f1c3 0301 	rsb	r3, r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	f002 0203 	and.w	r2, r2, #3
 8006dda:	b2d1      	uxtb	r1, r2
 8006ddc:	4a55      	ldr	r2, [pc, #340]	; (8006f34 <make_route_NESW+0x264>)
 8006dde:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//最大歩数マップ値を更新
 8006de0:	797a      	ldrb	r2, [r7, #5]
 8006de2:	79bb      	ldrb	r3, [r7, #6]
 8006de4:	3301      	adds	r3, #1
 8006de6:	4955      	ldr	r1, [pc, #340]	; (8006f3c <make_route_NESW+0x26c>)
 8006de8:	0112      	lsls	r2, r2, #4
 8006dea:	440a      	add	r2, r1
 8006dec:	4413      	add	r3, r2
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	4b53      	ldr	r3, [pc, #332]	; (8006f40 <make_route_NESW+0x270>)
 8006df2:	701a      	strb	r2, [r3, #0]
			x++;												//東に進んだのでX座標をインクリメント
 8006df4:	79bb      	ldrb	r3, [r7, #6]
 8006df6:	3301      	adds	r3, #1
 8006df8:	71bb      	strb	r3, [r7, #6]
 8006dfa:	e052      	b.n	8006ea2 <make_route_NESW+0x1d2>
		}
		//----南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//南側に壁が無く、現在地より小さい歩数マップ値であれば
 8006dfc:	793b      	ldrb	r3, [r7, #4]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d124      	bne.n	8006e50 <make_route_NESW+0x180>
 8006e06:	797b      	ldrb	r3, [r7, #5]
 8006e08:	1e5a      	subs	r2, r3, #1
 8006e0a:	79bb      	ldrb	r3, [r7, #6]
 8006e0c:	494b      	ldr	r1, [pc, #300]	; (8006f3c <make_route_NESW+0x26c>)
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	440a      	add	r2, r1
 8006e12:	4413      	add	r3, r2
 8006e14:	781a      	ldrb	r2, [r3, #0]
 8006e16:	4b4a      	ldr	r3, [pc, #296]	; (8006f40 <make_route_NESW+0x270>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d218      	bcs.n	8006e50 <make_route_NESW+0x180>
			route[i] = (0x02 - m_dir) & 0x03;					//route配列に進行方向を記録
 8006e1e:	4b44      	ldr	r3, [pc, #272]	; (8006f30 <make_route_NESW+0x260>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f1c3 0302 	rsb	r3, r3, #2
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	f002 0203 	and.w	r2, r2, #3
 8006e2e:	b2d1      	uxtb	r1, r2
 8006e30:	4a40      	ldr	r2, [pc, #256]	; (8006f34 <make_route_NESW+0x264>)
 8006e32:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//最大歩数マップ値を更新
 8006e34:	797b      	ldrb	r3, [r7, #5]
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	79bb      	ldrb	r3, [r7, #6]
 8006e3a:	4940      	ldr	r1, [pc, #256]	; (8006f3c <make_route_NESW+0x26c>)
 8006e3c:	0112      	lsls	r2, r2, #4
 8006e3e:	440a      	add	r2, r1
 8006e40:	4413      	add	r3, r2
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <make_route_NESW+0x270>)
 8006e46:	701a      	strb	r2, [r3, #0]
			y--;												//南に進んだのでY座標をデクリメント
 8006e48:	797b      	ldrb	r3, [r7, #5]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	717b      	strb	r3, [r7, #5]
 8006e4e:	e028      	b.n	8006ea2 <make_route_NESW+0x1d2>
		}
		//----西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//西側に壁が無く、現在地より小さい歩数マップ値であれば
 8006e50:	793b      	ldrb	r3, [r7, #4]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d123      	bne.n	8006ea2 <make_route_NESW+0x1d2>
 8006e5a:	797a      	ldrb	r2, [r7, #5]
 8006e5c:	79bb      	ldrb	r3, [r7, #6]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	4936      	ldr	r1, [pc, #216]	; (8006f3c <make_route_NESW+0x26c>)
 8006e62:	0112      	lsls	r2, r2, #4
 8006e64:	440a      	add	r2, r1
 8006e66:	4413      	add	r3, r2
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <make_route_NESW+0x270>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d217      	bcs.n	8006ea2 <make_route_NESW+0x1d2>
			route[i] = (0x03 - m_dir) & 0x03;					//route配列に進行方向を記録
 8006e72:	4b2f      	ldr	r3, [pc, #188]	; (8006f30 <make_route_NESW+0x260>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f1c3 0303 	rsb	r3, r3, #3
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	f002 0203 	and.w	r2, r2, #3
 8006e82:	b2d1      	uxtb	r1, r2
 8006e84:	4a2b      	ldr	r2, [pc, #172]	; (8006f34 <make_route_NESW+0x264>)
 8006e86:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//最大歩数マップ値を更新
 8006e88:	797a      	ldrb	r2, [r7, #5]
 8006e8a:	79bb      	ldrb	r3, [r7, #6]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	492b      	ldr	r1, [pc, #172]	; (8006f3c <make_route_NESW+0x26c>)
 8006e90:	0112      	lsls	r2, r2, #4
 8006e92:	440a      	add	r2, r1
 8006e94:	4413      	add	r3, r2
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <make_route_NESW+0x270>)
 8006e9a:	701a      	strb	r2, [r3, #0]
			x--;												//西に進んだのでX座標をデクリメント
 8006e9c:	79bb      	ldrb	r3, [r7, #6]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	71bb      	strb	r3, [r7, #6]
		}

		//----格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	4a23      	ldr	r2, [pc, #140]	; (8006f34 <make_route_NESW+0x264>)
 8006ea6:	5cd3      	ldrb	r3, [r2, r3]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d828      	bhi.n	8006efe <make_route_NESW+0x22e>
 8006eac:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <make_route_NESW+0x1e4>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ecf 	.word	0x08006ecf
 8006ebc:	08006edf 	.word	0x08006edf
 8006ec0:	08006eef 	.word	0x08006eef
		case 0x00:												//前進する場合
			route[i] = 0x88;									//格納データ形式を変更
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <make_route_NESW+0x264>)
 8006ec8:	2188      	movs	r1, #136	; 0x88
 8006eca:	54d1      	strb	r1, [r2, r3]
			break;
 8006ecc:	e01c      	b.n	8006f08 <make_route_NESW+0x238>
		case 0x01:												//右折する場合
			turn_dir(DIR_TURN_R90);								//内部情報の方向を90度右回転
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f7ff fdde 	bl	8006a90 <turn_dir>
			route[i] = 0x44;									//格納データ形式を変更
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <make_route_NESW+0x264>)
 8006ed8:	2144      	movs	r1, #68	; 0x44
 8006eda:	54d1      	strb	r1, [r2, r3]
			break;
 8006edc:	e014      	b.n	8006f08 <make_route_NESW+0x238>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180);								//内部情報の方向を180度回転
 8006ede:	2002      	movs	r0, #2
 8006ee0:	f7ff fdd6 	bl	8006a90 <turn_dir>
			route[i] = 0x22;									//格納データ形式を変更
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <make_route_NESW+0x264>)
 8006ee8:	2122      	movs	r1, #34	; 0x22
 8006eea:	54d1      	strb	r1, [r2, r3]
			break;
 8006eec:	e00c      	b.n	8006f08 <make_route_NESW+0x238>
		case 0x03:												//左折する場合
			turn_dir(DIR_TURN_L90);								//内部情報の方向を90度右回転
 8006eee:	20ff      	movs	r0, #255	; 0xff
 8006ef0:	f7ff fdce 	bl	8006a90 <turn_dir>
			route[i] = 0x11;									//格納データ形式を変更
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	4a0f      	ldr	r2, [pc, #60]	; (8006f34 <make_route_NESW+0x264>)
 8006ef8:	2111      	movs	r1, #17
 8006efa:	54d1      	strb	r1, [r2, r3]
			break;
 8006efc:	e004      	b.n	8006f08 <make_route_NESW+0x238>
		default:												//それ以外の場合
			route[i] = 0x00;									//格納データ形式を変更
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	4a0c      	ldr	r2, [pc, #48]	; (8006f34 <make_route_NESW+0x264>)
 8006f02:	2100      	movs	r1, #0
 8006f04:	54d1      	strb	r1, [r2, r3]
			break;
 8006f06:	bf00      	nop
		}
		i++;													//カウンタをインクリメント
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	71fb      	strb	r3, [r7, #7]
	}while( smap[y][x] != 0);									//進んだ先の歩数マップ値が0(=ゴール)になるまで実行
 8006f0e:	797a      	ldrb	r2, [r7, #5]
 8006f10:	79bb      	ldrb	r3, [r7, #6]
 8006f12:	490a      	ldr	r1, [pc, #40]	; (8006f3c <make_route_NESW+0x26c>)
 8006f14:	0112      	lsls	r2, r2, #4
 8006f16:	440a      	add	r2, r1
 8006f18:	4413      	add	r3, r2
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f47f af08 	bne.w	8006d32 <make_route_NESW+0x62>
	m_dir = dir_temp;											//方向を始めの状態に戻す
 8006f22:	4a03      	ldr	r2, [pc, #12]	; (8006f30 <make_route_NESW+0x260>)
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	7013      	strb	r3, [r2, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	200004b8 	.word	0x200004b8
 8006f34:	200004bc 	.word	0x200004bc
 8006f38:	200003bc 	.word	0x200003bc
 8006f3c:	200005cc 	.word	0x200005cc
 8006f40:	20000396 	.word	0x20000396
 8006f44:	20000274 	.word	0x20000274
 8006f48:	200006e8 	.word	0x200006e8

08006f4c <make_route_ESNW>:

void make_route_ESNW()
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
	//====変数宣言====
	unsigned char i = 0;												//カウンタ
 8006f52:	2300      	movs	r3, #0
 8006f54:	71fb      	strb	r3, [r7, #7]
	unsigned char x, y;													//X、Y座標
	unsigned char dir_temp =  m_dir;									//方向の保管用変数
 8006f56:	4b95      	ldr	r3, [pc, #596]	; (80071ac <make_route_ESNW+0x260>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	70fb      	strb	r3, [r7, #3]
	unsigned char m_temp;												//マップデータ一時保持

	//====最短経路を初期化====
	do{
		route[i++] = 0xff;										//routeを初期化、iをインクリメント
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	71fa      	strb	r2, [r7, #7]
 8006f62:	461a      	mov	r2, r3
 8006f64:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <make_route_ESNW+0x264>)
 8006f66:	21ff      	movs	r1, #255	; 0xff
 8006f68:	5499      	strb	r1, [r3, r2]
	}while(i != 0);												//iが0でない間実行(iがオーバーフローして0になるまで実行？)
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f5      	bne.n	8006f5c <make_route_ESNW+0x10>

	//====歩数カウンタをセット====
	m_step = smap[PRELOC.AXIS.Y][PRELOC.AXIS.X];				//現在座標の歩数マップ値を取得
 8006f70:	4b90      	ldr	r3, [pc, #576]	; (80071b4 <make_route_ESNW+0x268>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	4b8d      	ldr	r3, [pc, #564]	; (80071b4 <make_route_ESNW+0x268>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	4a8b      	ldr	r2, [pc, #556]	; (80071b8 <make_route_ESNW+0x26c>)
 8006f8a:	0103      	lsls	r3, r0, #4
 8006f8c:	4413      	add	r3, r2
 8006f8e:	440b      	add	r3, r1
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	4b8a      	ldr	r3, [pc, #552]	; (80071bc <make_route_ESNW+0x270>)
 8006f94:	701a      	strb	r2, [r3, #0]

	//====x, yに現在座標を書き込み====
	x = (unsigned char)PRELOC.AXIS.X;
 8006f96:	4b87      	ldr	r3, [pc, #540]	; (80071b4 <make_route_ESNW+0x268>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	71bb      	strb	r3, [r7, #6]
	y = (unsigned char)PRELOC.AXIS.Y;
 8006fa2:	4b84      	ldr	r3, [pc, #528]	; (80071b4 <make_route_ESNW+0x268>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	717b      	strb	r3, [r7, #5]

	//====最短経路を導出====
	do{
		m_temp = map[y][x];										//比較用マップ情報の格納
 8006fae:	797a      	ldrb	r2, [r7, #5]
 8006fb0:	79bb      	ldrb	r3, [r7, #6]
 8006fb2:	4983      	ldr	r1, [pc, #524]	; (80071c0 <make_route_ESNW+0x274>)
 8006fb4:	0112      	lsls	r2, r2, #4
 8006fb6:	440a      	add	r2, r1
 8006fb8:	4413      	add	r3, r2
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	713b      	strb	r3, [r7, #4]
		if(MF.FLAG.SCND){										//二次走行用のマップを作成する場合(二次走行時はMF.FLAG.SCNDをTrueにする)
 8006fbe:	4b81      	ldr	r3, [pc, #516]	; (80071c4 <make_route_ESNW+0x278>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <make_route_ESNW+0x86>
			m_temp >>= 4;										//上位4bitを使うので4bit分右にシフトさせる
 8006fcc:	793b      	ldrb	r3, [r7, #4]
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	713b      	strb	r3, [r7, #4]
		}

		//----東を見る----
		if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//東側に壁が無く、現在地より小さい歩数マップ値であれば
 8006fd2:	793b      	ldrb	r3, [r7, #4]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d124      	bne.n	8007026 <make_route_ESNW+0xda>
 8006fdc:	797a      	ldrb	r2, [r7, #5]
 8006fde:	79bb      	ldrb	r3, [r7, #6]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4975      	ldr	r1, [pc, #468]	; (80071b8 <make_route_ESNW+0x26c>)
 8006fe4:	0112      	lsls	r2, r2, #4
 8006fe6:	440a      	add	r2, r1
 8006fe8:	4413      	add	r3, r2
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	4b73      	ldr	r3, [pc, #460]	; (80071bc <make_route_ESNW+0x270>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d218      	bcs.n	8007026 <make_route_ESNW+0xda>
			route[i] = (0x01 - m_dir) & 0x03;					//route配列に進行方向を記録
 8006ff4:	4b6d      	ldr	r3, [pc, #436]	; (80071ac <make_route_ESNW+0x260>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f1c3 0301 	rsb	r3, r3, #1
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	f002 0203 	and.w	r2, r2, #3
 8007004:	b2d1      	uxtb	r1, r2
 8007006:	4a6a      	ldr	r2, [pc, #424]	; (80071b0 <make_route_ESNW+0x264>)
 8007008:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//最大歩数マップ値を更新
 800700a:	797a      	ldrb	r2, [r7, #5]
 800700c:	79bb      	ldrb	r3, [r7, #6]
 800700e:	3301      	adds	r3, #1
 8007010:	4969      	ldr	r1, [pc, #420]	; (80071b8 <make_route_ESNW+0x26c>)
 8007012:	0112      	lsls	r2, r2, #4
 8007014:	440a      	add	r2, r1
 8007016:	4413      	add	r3, r2
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	4b68      	ldr	r3, [pc, #416]	; (80071bc <make_route_ESNW+0x270>)
 800701c:	701a      	strb	r2, [r3, #0]
			x++;												//東に進んだのでX座標をインクリメント
 800701e:	79bb      	ldrb	r3, [r7, #6]
 8007020:	3301      	adds	r3, #1
 8007022:	71bb      	strb	r3, [r7, #6]
 8007024:	e07b      	b.n	800711e <make_route_ESNW+0x1d2>
		}
		//----南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//南側に壁が無く、現在地より小さい歩数マップ値であれば
 8007026:	793b      	ldrb	r3, [r7, #4]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d124      	bne.n	800707a <make_route_ESNW+0x12e>
 8007030:	797b      	ldrb	r3, [r7, #5]
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	79bb      	ldrb	r3, [r7, #6]
 8007036:	4960      	ldr	r1, [pc, #384]	; (80071b8 <make_route_ESNW+0x26c>)
 8007038:	0112      	lsls	r2, r2, #4
 800703a:	440a      	add	r2, r1
 800703c:	4413      	add	r3, r2
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	4b5e      	ldr	r3, [pc, #376]	; (80071bc <make_route_ESNW+0x270>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d218      	bcs.n	800707a <make_route_ESNW+0x12e>
			route[i] = (0x02 - m_dir) & 0x03;					//route配列に進行方向を記録
 8007048:	4b58      	ldr	r3, [pc, #352]	; (80071ac <make_route_ESNW+0x260>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f1c3 0302 	rsb	r3, r3, #2
 8007050:	b2da      	uxtb	r2, r3
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	f002 0203 	and.w	r2, r2, #3
 8007058:	b2d1      	uxtb	r1, r2
 800705a:	4a55      	ldr	r2, [pc, #340]	; (80071b0 <make_route_ESNW+0x264>)
 800705c:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//最大歩数マップ値を更新
 800705e:	797b      	ldrb	r3, [r7, #5]
 8007060:	1e5a      	subs	r2, r3, #1
 8007062:	79bb      	ldrb	r3, [r7, #6]
 8007064:	4954      	ldr	r1, [pc, #336]	; (80071b8 <make_route_ESNW+0x26c>)
 8007066:	0112      	lsls	r2, r2, #4
 8007068:	440a      	add	r2, r1
 800706a:	4413      	add	r3, r2
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	4b53      	ldr	r3, [pc, #332]	; (80071bc <make_route_ESNW+0x270>)
 8007070:	701a      	strb	r2, [r3, #0]
			y--;												//南に進んだのでY座標をデクリメント
 8007072:	797b      	ldrb	r3, [r7, #5]
 8007074:	3b01      	subs	r3, #1
 8007076:	717b      	strb	r3, [r7, #5]
 8007078:	e051      	b.n	800711e <make_route_ESNW+0x1d2>
		}
		//----北を見る----
		else if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//北側に壁が無く、現在地より小さい歩数マップ値であれば
 800707a:	793b      	ldrb	r3, [r7, #4]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d123      	bne.n	80070cc <make_route_ESNW+0x180>
 8007084:	797b      	ldrb	r3, [r7, #5]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	79bb      	ldrb	r3, [r7, #6]
 800708a:	494b      	ldr	r1, [pc, #300]	; (80071b8 <make_route_ESNW+0x26c>)
 800708c:	0112      	lsls	r2, r2, #4
 800708e:	440a      	add	r2, r1
 8007090:	4413      	add	r3, r2
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <make_route_ESNW+0x270>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d217      	bcs.n	80070cc <make_route_ESNW+0x180>
			route[i] = (0x00 - m_dir) & 0x03;					//route配列に進行方向を記録
 800709c:	4b43      	ldr	r3, [pc, #268]	; (80071ac <make_route_ESNW+0x260>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	425b      	negs	r3, r3
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	f002 0203 	and.w	r2, r2, #3
 80070aa:	b2d1      	uxtb	r1, r2
 80070ac:	4a40      	ldr	r2, [pc, #256]	; (80071b0 <make_route_ESNW+0x264>)
 80070ae:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//最大歩数マップ値を更新
 80070b0:	797b      	ldrb	r3, [r7, #5]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	79bb      	ldrb	r3, [r7, #6]
 80070b6:	4940      	ldr	r1, [pc, #256]	; (80071b8 <make_route_ESNW+0x26c>)
 80070b8:	0112      	lsls	r2, r2, #4
 80070ba:	440a      	add	r2, r1
 80070bc:	4413      	add	r3, r2
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	4b3e      	ldr	r3, [pc, #248]	; (80071bc <make_route_ESNW+0x270>)
 80070c2:	701a      	strb	r2, [r3, #0]
			y++;												//北に進んだのでY座標をインクリメント
 80070c4:	797b      	ldrb	r3, [r7, #5]
 80070c6:	3301      	adds	r3, #1
 80070c8:	717b      	strb	r3, [r7, #5]
 80070ca:	e028      	b.n	800711e <make_route_ESNW+0x1d2>
		}
		//----西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//西側に壁が無く、現在地より小さい歩数マップ値であれば
 80070cc:	793b      	ldrb	r3, [r7, #4]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d123      	bne.n	800711e <make_route_ESNW+0x1d2>
 80070d6:	797a      	ldrb	r2, [r7, #5]
 80070d8:	79bb      	ldrb	r3, [r7, #6]
 80070da:	3b01      	subs	r3, #1
 80070dc:	4936      	ldr	r1, [pc, #216]	; (80071b8 <make_route_ESNW+0x26c>)
 80070de:	0112      	lsls	r2, r2, #4
 80070e0:	440a      	add	r2, r1
 80070e2:	4413      	add	r3, r2
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	4b35      	ldr	r3, [pc, #212]	; (80071bc <make_route_ESNW+0x270>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d217      	bcs.n	800711e <make_route_ESNW+0x1d2>
			route[i] = (0x03 - m_dir) & 0x03;					//route配列に進行方向を記録
 80070ee:	4b2f      	ldr	r3, [pc, #188]	; (80071ac <make_route_ESNW+0x260>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f1c3 0303 	rsb	r3, r3, #3
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	f002 0203 	and.w	r2, r2, #3
 80070fe:	b2d1      	uxtb	r1, r2
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <make_route_ESNW+0x264>)
 8007102:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//最大歩数マップ値を更新
 8007104:	797a      	ldrb	r2, [r7, #5]
 8007106:	79bb      	ldrb	r3, [r7, #6]
 8007108:	3b01      	subs	r3, #1
 800710a:	492b      	ldr	r1, [pc, #172]	; (80071b8 <make_route_ESNW+0x26c>)
 800710c:	0112      	lsls	r2, r2, #4
 800710e:	440a      	add	r2, r1
 8007110:	4413      	add	r3, r2
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	4b29      	ldr	r3, [pc, #164]	; (80071bc <make_route_ESNW+0x270>)
 8007116:	701a      	strb	r2, [r3, #0]
			x--;												//西に進んだのでX座標をデクリメント
 8007118:	79bb      	ldrb	r3, [r7, #6]
 800711a:	3b01      	subs	r3, #1
 800711c:	71bb      	strb	r3, [r7, #6]
		}


		//----格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	4a23      	ldr	r2, [pc, #140]	; (80071b0 <make_route_ESNW+0x264>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d828      	bhi.n	800717a <make_route_ESNW+0x22e>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <make_route_ESNW+0x1e4>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007141 	.word	0x08007141
 8007134:	0800714b 	.word	0x0800714b
 8007138:	0800715b 	.word	0x0800715b
 800713c:	0800716b 	.word	0x0800716b
		case 0x00:												//前進する場合
			route[i] = 0x88;									//格納データ形式を変更
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	4a1b      	ldr	r2, [pc, #108]	; (80071b0 <make_route_ESNW+0x264>)
 8007144:	2188      	movs	r1, #136	; 0x88
 8007146:	54d1      	strb	r1, [r2, r3]
			break;
 8007148:	e01c      	b.n	8007184 <make_route_ESNW+0x238>
		case 0x01:												//右折する場合
			turn_dir(DIR_TURN_R90);								//内部情報の方向を90度右回転
 800714a:	2001      	movs	r0, #1
 800714c:	f7ff fca0 	bl	8006a90 <turn_dir>
			route[i] = 0x44;									//格納データ形式を変更
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	4a17      	ldr	r2, [pc, #92]	; (80071b0 <make_route_ESNW+0x264>)
 8007154:	2144      	movs	r1, #68	; 0x44
 8007156:	54d1      	strb	r1, [r2, r3]
			break;
 8007158:	e014      	b.n	8007184 <make_route_ESNW+0x238>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180);								//内部情報の方向を180度回転
 800715a:	2002      	movs	r0, #2
 800715c:	f7ff fc98 	bl	8006a90 <turn_dir>
			route[i] = 0x22;									//格納データ形式を変更
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <make_route_ESNW+0x264>)
 8007164:	2122      	movs	r1, #34	; 0x22
 8007166:	54d1      	strb	r1, [r2, r3]
			break;
 8007168:	e00c      	b.n	8007184 <make_route_ESNW+0x238>
		case 0x03:												//左折する場合
			turn_dir(DIR_TURN_L90);								//内部情報の方向を90度右回転
 800716a:	20ff      	movs	r0, #255	; 0xff
 800716c:	f7ff fc90 	bl	8006a90 <turn_dir>
			route[i] = 0x11;									//格納データ形式を変更
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	4a0f      	ldr	r2, [pc, #60]	; (80071b0 <make_route_ESNW+0x264>)
 8007174:	2111      	movs	r1, #17
 8007176:	54d1      	strb	r1, [r2, r3]
			break;
 8007178:	e004      	b.n	8007184 <make_route_ESNW+0x238>
		default:												//それ以外の場合
			route[i] = 0x00;									//格納データ形式を変更
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <make_route_ESNW+0x264>)
 800717e:	2100      	movs	r1, #0
 8007180:	54d1      	strb	r1, [r2, r3]
			break;
 8007182:	bf00      	nop
		}
		i++;													//カウンタをインクリメント
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	3301      	adds	r3, #1
 8007188:	71fb      	strb	r3, [r7, #7]
	}while( smap[y][x] != 0);									//進んだ先の歩数マップ値が0(=ゴール)になるまで実行
 800718a:	797a      	ldrb	r2, [r7, #5]
 800718c:	79bb      	ldrb	r3, [r7, #6]
 800718e:	490a      	ldr	r1, [pc, #40]	; (80071b8 <make_route_ESNW+0x26c>)
 8007190:	0112      	lsls	r2, r2, #4
 8007192:	440a      	add	r2, r1
 8007194:	4413      	add	r3, r2
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f af08 	bne.w	8006fae <make_route_ESNW+0x62>
	m_dir = dir_temp;											//方向を始めの状態に戻す
 800719e:	4a03      	ldr	r2, [pc, #12]	; (80071ac <make_route_ESNW+0x260>)
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	7013      	strb	r3, [r2, #0]
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200004b8 	.word	0x200004b8
 80071b0:	200004bc 	.word	0x200004bc
 80071b4:	200003bc 	.word	0x200003bc
 80071b8:	200005cc 	.word	0x200005cc
 80071bc:	20000396 	.word	0x20000396
 80071c0:	20000274 	.word	0x20000274
 80071c4:	200006e8 	.word	0x200006e8

080071c8 <get_base>:
//	制御用の基準値を取得する
// 引数：なし
// 戻り値：理想的な値を取得できたか　1:できた　0:できなかった
//+++++++++++++++++++++++++++++++++++++++++++++++
unsigned char get_base()
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	unsigned char res = 0;										//理想的な値を取得できたか
 80071ce:	2300      	movs	r3, #0
 80071d0:	71fb      	strb	r3, [r7, #7]

	ms_wait(10);
 80071d2:	200a      	movs	r0, #10
 80071d4:	f7fd f99c 	bl	8004510 <ms_wait>
	//----制御用の基準を取得----
//	base_l = ad_l;										//現在の左側のセンサ値で決定
//	base_r = ad_r;										//現在の右側のセンサ値で決定

	//----基準が理想的だとLED点滅----
	if((-50 < (int)(base_l - base_r)) && ((int)(base_l - base_r) < 50)){
 80071d8:	4b13      	ldr	r3, [pc, #76]	; (8007228 <get_base+0x60>)
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	4b12      	ldr	r3, [pc, #72]	; (800722c <get_base+0x64>)
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80071ec:	db0b      	blt.n	8007206 <get_base+0x3e>
 80071ee:	4b0e      	ldr	r3, [pc, #56]	; (8007228 <get_base+0x60>)
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	4b0d      	ldr	r3, [pc, #52]	; (800722c <get_base+0x64>)
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b31      	cmp	r3, #49	; 0x31
 8007200:	dc01      	bgt.n	8007206 <get_base+0x3e>
		//左右で差が50以下である場合
		res = 1;										//resを1に
 8007202:	2301      	movs	r3, #1
 8007204:	71fb      	strb	r3, [r7, #7]
	}else{
	}
	printf("base:%d, %d\r\n", base_r, base_l);
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <get_base+0x64>)
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <get_base+0x60>)
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	4806      	ldr	r0, [pc, #24]	; (8007230 <get_base+0x68>)
 8007218:	f002 fa06 	bl	8009628 <iprintf>
	return res;											//理想的な値を取得できたかを返す
 800721c:	79fb      	ldrb	r3, [r7, #7]

}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000394 	.word	0x20000394
 800722c:	20000374 	.word	0x20000374
 8007230:	0800b700 	.word	0x0800b700

08007234 <get_wall_info>:
//	壁情報取得を取得する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void get_wall_info()
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
	unsigned char tmp = 0;						//点灯させるLEDの場所
 800723a:	2300      	movs	r3, #0
 800723c:	71fb      	strb	r3, [r7, #7]
	//----壁情報の初期化----
	wall_info = 0x00;									//壁情報を初期化
 800723e:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <get_wall_info+0x90>)
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]

	//----Check Front----
	if(wall_ff.dif > wall_ff.threshold){
 8007244:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <get_wall_info+0x94>)
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	b21b      	sxth	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <get_wall_info+0x94>)
 800724e:	899b      	ldrh	r3, [r3, #12]
 8007250:	b29b      	uxth	r3, r3
 8007252:	429a      	cmp	r2, r3
 8007254:	dd08      	ble.n	8007268 <get_wall_info+0x34>
		//AD値が閾値より大きい(=壁があって光が跳ね返ってきている)場合
		wall_info |= 0x88;								//壁情報を更新
 8007256:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <get_wall_info+0x90>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	f063 0377 	orn	r3, r3, #119	; 0x77
 800725e:	b2da      	uxtb	r2, r3
 8007260:	4b18      	ldr	r3, [pc, #96]	; (80072c4 <get_wall_info+0x90>)
 8007262:	701a      	strb	r2, [r3, #0]
		tmp = 0x06;										//1番目と2番目のLEDを点灯させるよう設定
 8007264:	2306      	movs	r3, #6
 8007266:	71fb      	strb	r3, [r7, #7]
	}
	//----Check Right----
	if(wall_r.dif > wall_r.threshold){
 8007268:	4b18      	ldr	r3, [pc, #96]	; (80072cc <get_wall_info+0x98>)
 800726a:	88db      	ldrh	r3, [r3, #6]
 800726c:	b21b      	sxth	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	4b16      	ldr	r3, [pc, #88]	; (80072cc <get_wall_info+0x98>)
 8007272:	899b      	ldrh	r3, [r3, #12]
 8007274:	b29b      	uxth	r3, r3
 8007276:	429a      	cmp	r2, r3
 8007278:	dd0a      	ble.n	8007290 <get_wall_info+0x5c>
		//AD値が閾値より大きい(=壁があって光が跳ね返ってきている)場合
		wall_info |= 0x44;								//壁情報を更新
 800727a:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <get_wall_info+0x90>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007282:	b2da      	uxtb	r2, r3
 8007284:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <get_wall_info+0x90>)
 8007286:	701a      	strb	r2, [r3, #0]
		tmp |= 0x01;									//0番目のLEDを点灯させるよう設定
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	71fb      	strb	r3, [r7, #7]
	}
	//----Check Left----
	if(wall_l.dif > wall_l.threshold){
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <get_wall_info+0x9c>)
 8007292:	88db      	ldrh	r3, [r3, #6]
 8007294:	b21b      	sxth	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <get_wall_info+0x9c>)
 800729a:	899b      	ldrh	r3, [r3, #12]
 800729c:	b29b      	uxth	r3, r3
 800729e:	429a      	cmp	r2, r3
 80072a0:	dd0a      	ble.n	80072b8 <get_wall_info+0x84>
		wall_info |= 0x11;								//Apdating Wall Data
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <get_wall_info+0x90>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f043 0311 	orr.w	r3, r3, #17
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <get_wall_info+0x90>)
 80072ae:	701a      	strb	r2, [r3, #0]
		tmp |= 0x08;									//3番目のLEDを点灯させるよう設定
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	f043 0308 	orr.w	r3, r3, #8
 80072b6:	71fb      	strb	r3, [r7, #7]
	}

}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20000376 	.word	0x20000376
 80072c8:	200005bc 	.word	0x200005bc
 80072cc:	200003d8 	.word	0x200003d8
 80072d0:	20000438 	.word	0x20000438

080072d4 <EncoderGyroTest>:

void EncoderGyroTest(){
 80072d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af04      	add	r7, sp, #16
	reset_distance();
 80072dc:	f7fd fb90 	bl	8004a00 <reset_distance>
	time = 0;
 80072e0:	4b20      	ldr	r3, [pc, #128]	; (8007364 <EncoderGyroTest+0x90>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	801a      	strh	r2, [r3, #0]
	centor.angle = 0;
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <EncoderGyroTest+0x94>)
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	61da      	str	r2, [r3, #28]

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80072ee:	213c      	movs	r1, #60	; 0x3c
 80072f0:	481e      	ldr	r0, [pc, #120]	; (800736c <EncoderGyroTest+0x98>)
 80072f2:	f7fb feed 	bl	80030d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80072f6:	213c      	movs	r1, #60	; 0x3c
 80072f8:	481d      	ldr	r0, [pc, #116]	; (8007370 <EncoderGyroTest+0x9c>)
 80072fa:	f7fb fee9 	bl	80030d0 <HAL_TIM_Encoder_Start>

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80072fe:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <EncoderGyroTest+0xa0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f06f 0201 	mvn.w	r2, #1
 8007306:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8007308:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <EncoderGyroTest+0xa0>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	4b19      	ldr	r3, [pc, #100]	; (8007374 <EncoderGyroTest+0xa0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim6);
 8007318:	4816      	ldr	r0, [pc, #88]	; (8007374 <EncoderGyroTest+0xa0>)
 800731a:	f7fb fd36 	bl	8002d8a <HAL_TIM_Base_Start>
	while(1){

//		totalR_mm += -DIA_WHEEL_mm * (DIA_PINI_mm / DIA_SQUR_mm) * 2 * Pi * (dif_pulse_r % 4096) / 4096;
//		totalL_mm += -DIA_WHEEL_mm * (DIA_PINI_mm / DIA_SQUR_mm) * 2 * Pi * (dif_pulse_l % 4096) / 4096;

		printf("R_distance:%4lf L_distance:%4lf Gyro:%4lf \n",encoder_r.distance, encoder_l.distance,centor.angle);
 800731e:	4b16      	ldr	r3, [pc, #88]	; (8007378 <EncoderGyroTest+0xa4>)
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 f910 	bl	8000548 <__aeabi_f2d>
 8007328:	4680      	mov	r8, r0
 800732a:	4689      	mov	r9, r1
 800732c:	4b13      	ldr	r3, [pc, #76]	; (800737c <EncoderGyroTest+0xa8>)
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	4618      	mov	r0, r3
 8007332:	f7f9 f909 	bl	8000548 <__aeabi_f2d>
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <EncoderGyroTest+0x94>)
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	4618      	mov	r0, r3
 8007340:	f7f9 f902 	bl	8000548 <__aeabi_f2d>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800734c:	e9cd 4500 	strd	r4, r5, [sp]
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	480a      	ldr	r0, [pc, #40]	; (8007380 <EncoderGyroTest+0xac>)
 8007356:	f002 f967 	bl	8009628 <iprintf>
		ms_wait(500);
 800735a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800735e:	f7fd f8d7 	bl	8004510 <ms_wait>
		printf("R_distance:%4lf L_distance:%4lf Gyro:%4lf \n",encoder_r.distance, encoder_l.distance,centor.angle);
 8007362:	e7dc      	b.n	800731e <EncoderGyroTest+0x4a>
 8007364:	20000450 	.word	0x20000450
 8007368:	200006fc 	.word	0x200006fc
 800736c:	200007f4 	.word	0x200007f4
 8007370:	200007b4 	.word	0x200007b4
 8007374:	20000874 	.word	0x20000874
 8007378:	200006d0 	.word	0x200006d0
 800737c:	20000418 	.word	0x20000418
 8007380:	0800b710 	.word	0x0800b710

08007384 <sensor_start>:
	}

}

void sensor_start(){
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0

	/*Basic Timer Start*/
	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <sensor_start+0x28>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0201 	mvn.w	r2, #1
 8007390:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <sensor_start+0x28>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <sensor_start+0x28>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim6);
 80073a2:	4802      	ldr	r0, [pc, #8]	; (80073ac <sensor_start+0x28>)
 80073a4:	f7fb fcf1 	bl	8002d8a <HAL_TIM_Base_Start>


}
 80073a8:	bf00      	nop
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000874 	.word	0x20000874

080073b0 <sensor_stop>:
void sensor_stop(){
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
	pin_write(PE3,0);
	pin_write(PE4,0);

	melody(c6,1000);
*/
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <sensor_check>:
void sensor_check()
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
	uint8_t buff;

	printf("Timer Start!\n");
 80073c6:	4830      	ldr	r0, [pc, #192]	; (8007488 <sensor_check+0xc8>)
 80073c8:	f002 f9a2 	bl	8009710 <puts>

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80073cc:	4b2f      	ldr	r3, [pc, #188]	; (800748c <sensor_check+0xcc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0201 	mvn.w	r2, #1
 80073d4:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80073d6:	4b2d      	ldr	r3, [pc, #180]	; (800748c <sensor_check+0xcc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	4b2b      	ldr	r3, [pc, #172]	; (800748c <sensor_check+0xcc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim6);
 80073e6:	4829      	ldr	r0, [pc, #164]	; (800748c <sensor_check+0xcc>)
 80073e8:	f7fb fccf 	bl	8002d8a <HAL_TIM_Base_Start>

//	HAL_TIM_Base_Start_IT(&htim6);	<- 何故かこれだと上手くいかない

	while(1){
		//printf("ad_l: %4d ad_fl:%4d ad_ff:%4d  ad_fr:%4d ad_r:%4d \r\n", wall_l.dif, wall_fl.dif, wall_ff.dif, wall_fr.dif, wall_r.dif);
		printf("ad_l: %4d ad_ff:%4d ad_r:%4d \n", wall_l.val,wall_ff.val,wall_r.val);
 80073ec:	4b28      	ldr	r3, [pc, #160]	; (8007490 <sensor_check+0xd0>)
 80073ee:	6819      	ldr	r1, [r3, #0]
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <sensor_check+0xd4>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	4b28      	ldr	r3, [pc, #160]	; (8007498 <sensor_check+0xd8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4828      	ldr	r0, [pc, #160]	; (800749c <sensor_check+0xdc>)
 80073fa:	f002 f915 	bl	8009628 <iprintf>
		//----LEDが4つの場合----
		if(wall_fr.val > wall_fr.threshold){
 80073fe:	4b28      	ldr	r3, [pc, #160]	; (80074a0 <sensor_check+0xe0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <sensor_check+0xe0>)
 8007404:	8992      	ldrh	r2, [r2, #12]
 8007406:	b292      	uxth	r2, r2
 8007408:	4293      	cmp	r3, r2
 800740a:	d904      	bls.n	8007416 <sensor_check+0x56>
			buff = buff | 0x10;
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	f043 0310 	orr.w	r3, r3, #16
 8007412:	b2db      	uxtb	r3, r3
 8007414:	71fb      	strb	r3, [r7, #7]
		}
		if(wall_r.val > wall_r.threshold){
 8007416:	4b20      	ldr	r3, [pc, #128]	; (8007498 <sensor_check+0xd8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <sensor_check+0xd8>)
 800741c:	8992      	ldrh	r2, [r2, #12]
 800741e:	b292      	uxth	r2, r2
 8007420:	4293      	cmp	r3, r2
 8007422:	d904      	bls.n	800742e <sensor_check+0x6e>
			buff = buff | 0x08;
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	f043 0308 	orr.w	r3, r3, #8
 800742a:	b2db      	uxtb	r3, r3
 800742c:	71fb      	strb	r3, [r7, #7]
		}
		if(wall_ff.val > wall_ff.threshold){
 800742e:	4b19      	ldr	r3, [pc, #100]	; (8007494 <sensor_check+0xd4>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a18      	ldr	r2, [pc, #96]	; (8007494 <sensor_check+0xd4>)
 8007434:	8992      	ldrh	r2, [r2, #12]
 8007436:	b292      	uxth	r2, r2
 8007438:	4293      	cmp	r3, r2
 800743a:	d904      	bls.n	8007446 <sensor_check+0x86>
			buff = buff | 0x04;
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	f043 0304 	orr.w	r3, r3, #4
 8007442:	b2db      	uxtb	r3, r3
 8007444:	71fb      	strb	r3, [r7, #7]
		}
		if(wall_l.val > wall_l.threshold){
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <sensor_check+0xd0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <sensor_check+0xd0>)
 800744c:	8992      	ldrh	r2, [r2, #12]
 800744e:	b292      	uxth	r2, r2
 8007450:	4293      	cmp	r3, r2
 8007452:	d904      	bls.n	800745e <sensor_check+0x9e>
			buff = buff | 0x02;
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	f043 0302 	orr.w	r3, r3, #2
 800745a:	b2db      	uxtb	r3, r3
 800745c:	71fb      	strb	r3, [r7, #7]
		}
		if(wall_fl.val > wall_fl.threshold){
 800745e:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <sensor_check+0xe4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <sensor_check+0xe4>)
 8007464:	8992      	ldrh	r2, [r2, #12]
 8007466:	b292      	uxth	r2, r2
 8007468:	4293      	cmp	r3, r2
 800746a:	d904      	bls.n	8007476 <sensor_check+0xb6>
			buff = buff | 0x01;
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	b2db      	uxtb	r3, r3
 8007474:	71fb      	strb	r3, [r7, #7]
		}
		LedDisplay(&buff);
 8007476:	1dfb      	adds	r3, r7, #7
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fc25 	bl	8005cc8 <LedDisplay>
		ms_wait(1000);
 800747e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007482:	f7fd f845 	bl	8004510 <ms_wait>
		printf("ad_l: %4d ad_ff:%4d ad_r:%4d \n", wall_l.val,wall_ff.val,wall_r.val);
 8007486:	e7b1      	b.n	80073ec <sensor_check+0x2c>
 8007488:	0800b73c 	.word	0x0800b73c
 800748c:	20000874 	.word	0x20000874
 8007490:	20000438 	.word	0x20000438
 8007494:	200005bc 	.word	0x200005bc
 8007498:	200003d8 	.word	0x200003d8
 800749c:	0800b74c 	.word	0x0800b74c
 80074a0:	2000046c 	.word	0x2000046c
 80074a4:	200003e8 	.word	0x200003e8

080074a8 <Tim6WaitUs>:

		}

}

void Tim6WaitUs(uint16_t us){
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = __HAL_TIM_GET_COUNTER(&htim6) + us;
 80074b2:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <Tim6WaitUs+0x34>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	4413      	add	r3, r2
 80074be:	81fb      	strh	r3, [r7, #14]
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay);
 80074c0:	bf00      	nop
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <Tim6WaitUs+0x34>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074c8:	89fb      	ldrh	r3, [r7, #14]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d3f9      	bcc.n	80074c2 <Tim6WaitUs+0x1a>

}
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000874 	.word	0x20000874

080074e0 <GetEncoderLeft>:

int16_t GetEncoderLeft(void){
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
	int16_t count = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	80fb      	strh	r3, [r7, #6]
	uint16_t enc_val = TIM3->CNT;
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <GetEncoderLeft+0x40>)
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	80bb      	strh	r3, [r7, #4]
	TIM3->CNT = 0;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <GetEncoderLeft+0x40>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24

	if(enc_val > 32767){
 80074f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da04      	bge.n	8007508 <GetEncoderLeft+0x28>
		count = (int16_t)(65536 - enc_val);
 80074fe:	88bb      	ldrh	r3, [r7, #4]
 8007500:	425b      	negs	r3, r3
 8007502:	b29b      	uxth	r3, r3
 8007504:	80fb      	strh	r3, [r7, #6]
 8007506:	e003      	b.n	8007510 <GetEncoderLeft+0x30>
	}else{
		count = -(int16_t)enc_val;
 8007508:	88bb      	ldrh	r3, [r7, #4]
 800750a:	425b      	negs	r3, r3
 800750c:	b29b      	uxth	r3, r3
 800750e:	80fb      	strh	r3, [r7, #6]
	}

	return count;
 8007510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40000400 	.word	0x40000400

08007524 <GetEncoderRight>:

int16_t GetEncoderRight(void)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
	int16_t count = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	80fb      	strh	r3, [r7, #6]
	uint16_t enc_val = TIM4->CNT;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <GetEncoderRight+0x38>)
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	80bb      	strh	r3, [r7, #4]
	TIM4->CNT = 0;
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <GetEncoderRight+0x38>)
 8007536:	2200      	movs	r2, #0
 8007538:	625a      	str	r2, [r3, #36]	; 0x24

	if(enc_val > 32767){
 800753a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	da02      	bge.n	8007548 <GetEncoderRight+0x24>
		count = -(int16_t)(65536 - enc_val);
 8007542:	88bb      	ldrh	r3, [r7, #4]
 8007544:	80fb      	strh	r3, [r7, #6]
 8007546:	e001      	b.n	800754c <GetEncoderRight+0x28>
	}else{
		count = (int16_t)enc_val;
 8007548:	88bb      	ldrh	r3, [r7, #4]
 800754a:	80fb      	strh	r3, [r7, #6]
	}

	return count;
 800754c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	40000800 	.word	0x40000800

08007560 <UpdateGyro>:

void UpdateGyro(void)
{
 8007560:	b5b0      	push	{r4, r5, r7, lr}
 8007562:	af00      	add	r7, sp, #0
	centor.omega_deg = GyroRead();
 8007564:	f7fd fae4 	bl	8004b30 <GyroRead>
 8007568:	eef0 7a40 	vmov.f32	s15, s0
 800756c:	4b2a      	ldr	r3, [pc, #168]	; (8007618 <UpdateGyro+0xb8>)
 800756e:	edc3 7a02 	vstr	s15, [r3, #8]
	centor.omega_rad = centor.omega_deg * KW;
 8007572:	4b29      	ldr	r3, [pc, #164]	; (8007618 <UpdateGyro+0xb8>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	4618      	mov	r0, r3
 8007578:	f7f8 ffe6 	bl	8000548 <__aeabi_f2d>
 800757c:	a322      	add	r3, pc, #136	; (adr r3, 8007608 <UpdateGyro+0xa8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4603      	mov	r3, r0
 8007588:	460c      	mov	r4, r1
 800758a:	4618      	mov	r0, r3
 800758c:	4621      	mov	r1, r4
 800758e:	f7f9 fb0b 	bl	8000ba8 <__aeabi_d2f>
 8007592:	4602      	mov	r2, r0
 8007594:	4b20      	ldr	r3, [pc, #128]	; (8007618 <UpdateGyro+0xb8>)
 8007596:	611a      	str	r2, [r3, #16]
	centor.angle += (centor.omega_deg + centor.pre_omega_deg) * 0.5 * 0.001;
 8007598:	4b1f      	ldr	r3, [pc, #124]	; (8007618 <UpdateGyro+0xb8>)
 800759a:	ed93 7a02 	vldr	s14, [r3, #8]
 800759e:	4b1e      	ldr	r3, [pc, #120]	; (8007618 <UpdateGyro+0xb8>)
 80075a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80075a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075a8:	ee17 0a90 	vmov	r0, s15
 80075ac:	f7f8 ffcc 	bl	8000548 <__aeabi_f2d>
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	4b19      	ldr	r3, [pc, #100]	; (800761c <UpdateGyro+0xbc>)
 80075b6:	f7f9 f81f 	bl	80005f8 <__aeabi_dmul>
 80075ba:	4603      	mov	r3, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	4618      	mov	r0, r3
 80075c0:	4621      	mov	r1, r4
 80075c2:	a313      	add	r3, pc, #76	; (adr r3, 8007610 <UpdateGyro+0xb0>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f9 f816 	bl	80005f8 <__aeabi_dmul>
 80075cc:	4603      	mov	r3, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	4625      	mov	r5, r4
 80075d2:	461c      	mov	r4, r3
 80075d4:	4b10      	ldr	r3, [pc, #64]	; (8007618 <UpdateGyro+0xb8>)
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7f8 ffb5 	bl	8000548 <__aeabi_f2d>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4620      	mov	r0, r4
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7f8 fe51 	bl	800028c <__adddf3>
 80075ea:	4603      	mov	r3, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	4618      	mov	r0, r3
 80075f0:	4621      	mov	r1, r4
 80075f2:	f7f9 fad9 	bl	8000ba8 <__aeabi_d2f>
 80075f6:	4602      	mov	r2, r0
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <UpdateGyro+0xb8>)
 80075fa:	61da      	str	r2, [r3, #28]
	centor.pre_omega_deg = centor.omega_deg;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <UpdateGyro+0xb8>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	4a05      	ldr	r2, [pc, #20]	; (8007618 <UpdateGyro+0xb8>)
 8007602:	60d3      	str	r3, [r2, #12]

}
 8007604:	bf00      	nop
 8007606:	bdb0      	pop	{r4, r5, r7, pc}
 8007608:	9691a75d 	.word	0x9691a75d
 800760c:	3f91dbca 	.word	0x3f91dbca
 8007610:	d2f1a9fc 	.word	0xd2f1a9fc
 8007614:	3f50624d 	.word	0x3f50624d
 8007618:	200006fc 	.word	0x200006fc
 800761c:	3fe00000 	.word	0x3fe00000

08007620 <UpdateEncoder>:
void UpdateEncoder(void)
{
 8007620:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007624:	af00      	add	r7, sp, #0
	encoder_r.pulse = GetEncoderRight();
 8007626:	f7ff ff7d 	bl	8007524 <GetEncoderRight>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	4b45      	ldr	r3, [pc, #276]	; (8007744 <UpdateEncoder+0x124>)
 8007630:	801a      	strh	r2, [r3, #0]
	encoder_l.pulse = GetEncoderLeft();
 8007632:	f7ff ff55 	bl	80074e0 <GetEncoderLeft>
 8007636:	4603      	mov	r3, r0
 8007638:	461a      	mov	r2, r3
 800763a:	4b43      	ldr	r3, [pc, #268]	; (8007748 <UpdateEncoder+0x128>)
 800763c:	801a      	strh	r2, [r3, #0]

	encoder_r.sum += encoder_r.pulse;
 800763e:	4b41      	ldr	r3, [pc, #260]	; (8007744 <UpdateEncoder+0x124>)
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b21b      	sxth	r3, r3
 8007644:	4a3f      	ldr	r2, [pc, #252]	; (8007744 <UpdateEncoder+0x124>)
 8007646:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 800764a:	fa0f fb83 	sxth.w	fp, r3
 800764e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8007652:	eb1b 0301 	adds.w	r3, fp, r1
 8007656:	eb4c 0402 	adc.w	r4, ip, r2
 800765a:	4a3a      	ldr	r2, [pc, #232]	; (8007744 <UpdateEncoder+0x124>)
 800765c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	encoder_l.sum += encoder_l.pulse;
 8007660:	4b39      	ldr	r3, [pc, #228]	; (8007748 <UpdateEncoder+0x128>)
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b21b      	sxth	r3, r3
 8007666:	4a38      	ldr	r2, [pc, #224]	; (8007748 <UpdateEncoder+0x128>)
 8007668:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 800766c:	fa0f fb83 	sxth.w	fp, r3
 8007670:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8007674:	eb1b 0301 	adds.w	r3, fp, r1
 8007678:	eb4c 0402 	adc.w	r4, ip, r2
 800767c:	4a32      	ldr	r2, [pc, #200]	; (8007748 <UpdateEncoder+0x128>)
 800767e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	encoder_r.distance = Kxr * encoder_r.sum;
 8007682:	4b30      	ldr	r3, [pc, #192]	; (8007744 <UpdateEncoder+0x124>)
 8007684:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007688:	4618      	mov	r0, r3
 800768a:	4621      	mov	r1, r4
 800768c:	f7f9 fbac 	bl	8000de8 <__aeabi_l2f>
 8007690:	ee07 0a10 	vmov	s14, r0
 8007694:	4b2d      	ldr	r3, [pc, #180]	; (800774c <UpdateEncoder+0x12c>)
 8007696:	edd3 7a00 	vldr	s15, [r3]
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	4b29      	ldr	r3, [pc, #164]	; (8007744 <UpdateEncoder+0x124>)
 80076a0:	edc3 7a04 	vstr	s15, [r3, #16]
	encoder_l.distance = Kxr * encoder_l.sum;
 80076a4:	4b28      	ldr	r3, [pc, #160]	; (8007748 <UpdateEncoder+0x128>)
 80076a6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80076aa:	4618      	mov	r0, r3
 80076ac:	4621      	mov	r1, r4
 80076ae:	f7f9 fb9b 	bl	8000de8 <__aeabi_l2f>
 80076b2:	ee07 0a10 	vmov	s14, r0
 80076b6:	4b25      	ldr	r3, [pc, #148]	; (800774c <UpdateEncoder+0x12c>)
 80076b8:	edd3 7a00 	vldr	s15, [r3]
 80076bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <UpdateEncoder+0x128>)
 80076c2:	edc3 7a04 	vstr	s15, [r3, #16]

	encoder_r.velocity = Kxr * (float)encoder_r.pulse;
 80076c6:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <UpdateEncoder+0x124>)
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b21b      	sxth	r3, r3
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076d4:	4b1d      	ldr	r3, [pc, #116]	; (800774c <UpdateEncoder+0x12c>)
 80076d6:	edd3 7a00 	vldr	s15, [r3]
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	4b19      	ldr	r3, [pc, #100]	; (8007744 <UpdateEncoder+0x124>)
 80076e0:	edc3 7a05 	vstr	s15, [r3, #20]
	encoder_l.velocity = Kxr * (float)encoder_l.pulse;
 80076e4:	4b18      	ldr	r3, [pc, #96]	; (8007748 <UpdateEncoder+0x128>)
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b21b      	sxth	r3, r3
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076f2:	4b16      	ldr	r3, [pc, #88]	; (800774c <UpdateEncoder+0x12c>)
 80076f4:	edd3 7a00 	vldr	s15, [r3]
 80076f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <UpdateEncoder+0x128>)
 80076fe:	edc3 7a05 	vstr	s15, [r3, #20]

	centor.distance = (encoder_r.distance + encoder_l.distance) * 0.5;
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <UpdateEncoder+0x124>)
 8007704:	ed93 7a04 	vldr	s14, [r3, #16]
 8007708:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <UpdateEncoder+0x128>)
 800770a:	edd3 7a04 	vldr	s15, [r3, #16]
 800770e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007712:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <UpdateEncoder+0x130>)
 800771c:	edc3 7a06 	vstr	s15, [r3, #24]
	centor.velocity = (encoder_r.velocity + encoder_l.velocity) * 0.5;
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <UpdateEncoder+0x124>)
 8007722:	ed93 7a05 	vldr	s14, [r3, #20]
 8007726:	4b08      	ldr	r3, [pc, #32]	; (8007748 <UpdateEncoder+0x128>)
 8007728:	edd3 7a05 	vldr	s15, [r3, #20]
 800772c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007730:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <UpdateEncoder+0x130>)
 800773a:	edc3 7a00 	vstr	s15, [r3]

}
 800773e:	bf00      	nop
 8007740:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007744:	200006d0 	.word	0x200006d0
 8007748:	20000418 	.word	0x20000418
 800774c:	2000044c 	.word	0x2000044c
 8007750:	200006fc 	.word	0x200006fc

08007754 <GetADC>:
int GetADC(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	609a      	str	r2, [r3, #8]
 800776a:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8007770:	2301      	movs	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8007774:	2301      	movs	r3, #1
 8007776:	613b      	str	r3, [r7, #16]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8007778:	f107 0308 	add.w	r3, r7, #8
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7f9 ff20 	bl	80015c4 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7f9 fdc5 	bl	8001314 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);
 800778a:	2164      	movs	r1, #100	; 0x64
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7f9 fe87 	bl	80014a0 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7f9 ff08 	bl	80015a8 <HAL_ADC_GetValue>
 8007798:	4603      	mov	r3, r0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <UtsutsuSystem>:
#include <Mouse/global.h>

void UtsutsuSystem(){
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
	uint8_t mode = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	71fb      	strb	r3, [r7, #7]

	MelodySummer();
 80077ae:	f7fc ff45 	bl	800463c <MelodySummer>
	GyroInit();
 80077b2:	f7fd f97f 	bl	8004ab4 <GyroInit>
	VariableInit();
 80077b6:	f7fd ffe3 	bl	8005780 <VariableInit>

	CheckBattery();
 80077ba:	f7fd f947 	bl	8004a4c <CheckBattery>

	printf("----Start Utsutsu System----\n");
 80077be:	48a5      	ldr	r0, [pc, #660]	; (8007a54 <UtsutsuSystem+0x2b0>)
 80077c0:	f001 ffa6 	bl	8009710 <puts>


	while(1){

	  ModeSelect(&mode);
 80077c4:	1dfb      	adds	r3, r7, #7
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc feae 	bl	8004528 <ModeSelect>

	  ms_wait(100);
 80077cc:	2064      	movs	r0, #100	; 0x64
 80077ce:	f7fc fe9f 	bl	8004510 <ms_wait>
	  //----mode action----
	  switch(mode){
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b0d      	cmp	r3, #13
 80077d6:	f200 8130 	bhi.w	8007a3a <UtsutsuSystem+0x296>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UtsutsuSystem+0x3c>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007819 	.word	0x08007819
 80077e4:	08007845 	.word	0x08007845
 80077e8:	08007887 	.word	0x08007887
 80077ec:	080078cd 	.word	0x080078cd
 80077f0:	0800790f 	.word	0x0800790f
 80077f4:	08007951 	.word	0x08007951
 80077f8:	08007a3b 	.word	0x08007a3b
 80077fc:	08007a3b 	.word	0x08007a3b
 8007800:	08007a3b 	.word	0x08007a3b
 8007804:	08007a3b 	.word	0x08007a3b
 8007808:	08007a3b 	.word	0x08007a3b
 800780c:	08007993 	.word	0x08007993
 8007810:	080079af 	.word	0x080079af
 8007814:	080079c5 	.word	0x080079c5
	  	  case 0:	//
			//----log trans----
			ms_wait(500);
 8007818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800781c:	f7fc fe78 	bl	8004510 <ms_wait>
			printf("START\r\n");
 8007820:	488d      	ldr	r0, [pc, #564]	; (8007a58 <UtsutsuSystem+0x2b4>)
 8007822:	f001 ff75 	bl	8009710 <puts>

			printf("base:%d, %d\r\n", wall_l.threshold, wall_r.threshold);
 8007826:	4b8d      	ldr	r3, [pc, #564]	; (8007a5c <UtsutsuSystem+0x2b8>)
 8007828:	899b      	ldrh	r3, [r3, #12]
 800782a:	b29b      	uxth	r3, r3
 800782c:	4619      	mov	r1, r3
 800782e:	4b8c      	ldr	r3, [pc, #560]	; (8007a60 <UtsutsuSystem+0x2bc>)
 8007830:	899b      	ldrh	r3, [r3, #12]
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	488b      	ldr	r0, [pc, #556]	; (8007a64 <UtsutsuSystem+0x2c0>)
 8007838:	f001 fef6 	bl	8009628 <iprintf>

/*			for(i=0;i<2000;i++){
				uart_printf("%lf, %lf,%lf, %lf, %lf, %lf\r\n",log.test1[i],log.test2[i],log.test3[i],log.test4[i],log.test5[i],log.test6[i]);
				ms_wait(1);
			}
*/			printf("ALL\r\n");
 800783c:	488a      	ldr	r0, [pc, #552]	; (8007a68 <UtsutsuSystem+0x2c4>)
 800783e:	f001 ff67 	bl	8009710 <puts>
			break;
 8007842:	e105      	b.n	8007a50 <UtsutsuSystem+0x2ac>

	  	  case 1:	//----一次探索走行----
			goal_x = GOAL_X;									//ゴール座標を設定　　GOAL_Xはglobal.hにマクロ定義あり
 8007844:	4b89      	ldr	r3, [pc, #548]	; (8007a6c <UtsutsuSystem+0x2c8>)
 8007846:	2202      	movs	r2, #2
 8007848:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;									//ゴール座標を設定　　GOAL_Yはglobal.hにマクロ定義あり
 800784a:	4b89      	ldr	r3, [pc, #548]	; (8007a70 <UtsutsuSystem+0x2cc>)
 800784c:	2201      	movs	r2, #1
 800784e:	801a      	strh	r2, [r3, #0]

			StartWaiting();
 8007850:	f7fc ffd8 	bl	8004804 <StartWaiting>
			start_ready();
 8007854:	f7fd f810 	bl	8004878 <start_ready>

			get_wall_info();									//壁情報の初期化     get_wall_info()はsensor.cに関数定義あり
 8007858:	f7ff fcec 	bl	8007234 <get_wall_info>
			searchA();										//ゴール区画まで探索，進行する　searchA()はsearch.cに関数定義あり
 800785c:	f7fe fa76 	bl	8005d4c <searchA>
			goal_x = goal_y = 0;								//ゴール座標をスタート区画に設定
 8007860:	4b83      	ldr	r3, [pc, #524]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007862:	2200      	movs	r2, #0
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	4b82      	ldr	r3, [pc, #520]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	4b80      	ldr	r3, [pc, #512]	; (8007a6c <UtsutsuSystem+0x2c8>)
 800786c:	801a      	strh	r2, [r3, #0]
			ms_wait(100);										//待機
 800786e:	2064      	movs	r0, #100	; 0x64
 8007870:	f7fc fe4e 	bl	8004510 <ms_wait>
			searchA();											//戻ってくる
 8007874:	f7fe fa6a 	bl	8005d4c <searchA>

			goal_x = GOAL_X;									//ゴール座標設定
 8007878:	4b7c      	ldr	r3, [pc, #496]	; (8007a6c <UtsutsuSystem+0x2c8>)
 800787a:	2202      	movs	r2, #2
 800787c:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;									//ゴール座標設定
 800787e:	4b7c      	ldr	r3, [pc, #496]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007880:	2201      	movs	r2, #1
 8007882:	801a      	strh	r2, [r3, #0]
			break;
 8007884:	e0e4      	b.n	8007a50 <UtsutsuSystem+0x2ac>

			//----連続探索走行----
	  	  case 2:
			goal_x = GOAL_X;
 8007886:	4b79      	ldr	r3, [pc, #484]	; (8007a6c <UtsutsuSystem+0x2c8>)
 8007888:	2202      	movs	r2, #2
 800788a:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 800788c:	4b78      	ldr	r3, [pc, #480]	; (8007a70 <UtsutsuSystem+0x2cc>)
 800788e:	2201      	movs	r2, #1
 8007890:	801a      	strh	r2, [r3, #0]

			StartWaiting();
 8007892:	f7fc ffb7 	bl	8004804 <StartWaiting>
			start_ready();
 8007896:	f7fc ffef 	bl	8004878 <start_ready>

			searchSA();
 800789a:	f7fe fb03 	bl	8005ea4 <searchSA>
			goal_x = goal_y = 0;
 800789e:	4b74      	ldr	r3, [pc, #464]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	4b72      	ldr	r3, [pc, #456]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078a6:	881a      	ldrh	r2, [r3, #0]
 80078a8:	4b70      	ldr	r3, [pc, #448]	; (8007a6c <UtsutsuSystem+0x2c8>)
 80078aa:	801a      	strh	r2, [r3, #0]
			searchSA();
 80078ac:	f7fe fafa 	bl	8005ea4 <searchSA>
			goal_x = GOAL_X;
 80078b0:	4b6e      	ldr	r3, [pc, #440]	; (8007a6c <UtsutsuSystem+0x2c8>)
 80078b2:	2202      	movs	r2, #2
 80078b4:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 80078b6:	4b6e      	ldr	r3, [pc, #440]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	801a      	strh	r2, [r3, #0]

			turn_180();									//180度回転
 80078bc:	f7fd fa5e 	bl	8004d7c <turn_180>
			sensor_stop();
 80078c0:	f7ff fd76 	bl	80073b0 <sensor_stop>
			turn_dir(DIR_TURN_180);
 80078c4:	2002      	movs	r0, #2
 80078c6:	f7ff f8e3 	bl	8006a90 <turn_dir>
			break;
 80078ca:	e0c1      	b.n	8007a50 <UtsutsuSystem+0x2ac>

			/////////////////////////////////　　↓の二次探索走行とスラローム走行は未実装
			//----二次高速走行----
	  	  case 3:
			goal_x = GOAL_X;
 80078cc:	4b67      	ldr	r3, [pc, #412]	; (8007a6c <UtsutsuSystem+0x2c8>)
 80078ce:	2202      	movs	r2, #2
 80078d0:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 80078d2:	4b67      	ldr	r3, [pc, #412]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078d4:	2201      	movs	r2, #1
 80078d6:	801a      	strh	r2, [r3, #0]

			StartWaiting();
 80078d8:	f7fc ff94 	bl	8004804 <StartWaiting>
			start_ready();
 80078dc:	f7fc ffcc 	bl	8004878 <start_ready>

			searchSA_ESNW();
 80078e0:	f7fe fbc8 	bl	8006074 <searchSA_ESNW>
			goal_x = goal_y = 0;
 80078e4:	4b62      	ldr	r3, [pc, #392]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	801a      	strh	r2, [r3, #0]
 80078ea:	4b61      	ldr	r3, [pc, #388]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	4b5f      	ldr	r3, [pc, #380]	; (8007a6c <UtsutsuSystem+0x2c8>)
 80078f0:	801a      	strh	r2, [r3, #0]
			searchSA_ESNW();
 80078f2:	f7fe fbbf 	bl	8006074 <searchSA_ESNW>
			goal_x = GOAL_X;
 80078f6:	4b5d      	ldr	r3, [pc, #372]	; (8007a6c <UtsutsuSystem+0x2c8>)
 80078f8:	2202      	movs	r2, #2
 80078fa:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 80078fc:	4b5c      	ldr	r3, [pc, #368]	; (8007a70 <UtsutsuSystem+0x2cc>)
 80078fe:	2201      	movs	r2, #1
 8007900:	801a      	strh	r2, [r3, #0]

			turn_180();									//180度回転
 8007902:	f7fd fa3b 	bl	8004d7c <turn_180>
			turn_dir(DIR_TURN_180);
 8007906:	2002      	movs	r0, #2
 8007908:	f7ff f8c2 	bl	8006a90 <turn_dir>
			break;
 800790c:	e0a0      	b.n	8007a50 <UtsutsuSystem+0x2ac>

			//----スラローム走行----
	  	  case 4:
			goal_x = GOAL_X;
 800790e:	4b57      	ldr	r3, [pc, #348]	; (8007a6c <UtsutsuSystem+0x2c8>)
 8007910:	2202      	movs	r2, #2
 8007912:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 8007914:	4b56      	ldr	r3, [pc, #344]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007916:	2201      	movs	r2, #1
 8007918:	801a      	strh	r2, [r3, #0]

			StartWaiting();
 800791a:	f7fc ff73 	bl	8004804 <StartWaiting>
			start_ready();
 800791e:	f7fc ffab 	bl	8004878 <start_ready>

			searchSLA();
 8007922:	f7fe fcc5 	bl	80062b0 <searchSLA>
			goal_x = goal_y = 0;
 8007926:	4b52      	ldr	r3, [pc, #328]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007928:	2200      	movs	r2, #0
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	4b50      	ldr	r3, [pc, #320]	; (8007a70 <UtsutsuSystem+0x2cc>)
 800792e:	881a      	ldrh	r2, [r3, #0]
 8007930:	4b4e      	ldr	r3, [pc, #312]	; (8007a6c <UtsutsuSystem+0x2c8>)
 8007932:	801a      	strh	r2, [r3, #0]
			searchSLA();
 8007934:	f7fe fcbc 	bl	80062b0 <searchSLA>
			goal_x = GOAL_X;
 8007938:	4b4c      	ldr	r3, [pc, #304]	; (8007a6c <UtsutsuSystem+0x2c8>)
 800793a:	2202      	movs	r2, #2
 800793c:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 800793e:	4b4c      	ldr	r3, [pc, #304]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007940:	2201      	movs	r2, #1
 8007942:	801a      	strh	r2, [r3, #0]

			turn_180();									//180度回転
 8007944:	f7fd fa1a 	bl	8004d7c <turn_180>
			turn_dir(DIR_TURN_180);
 8007948:	2002      	movs	r0, #2
 800794a:	f7ff f8a1 	bl	8006a90 <turn_dir>

			break;
 800794e:	e07f      	b.n	8007a50 <UtsutsuSystem+0x2ac>
			//////////////////////////////////

		case 5:
			goal_x = GOAL_X;
 8007950:	4b46      	ldr	r3, [pc, #280]	; (8007a6c <UtsutsuSystem+0x2c8>)
 8007952:	2202      	movs	r2, #2
 8007954:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 8007956:	4b46      	ldr	r3, [pc, #280]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007958:	2201      	movs	r2, #1
 800795a:	801a      	strh	r2, [r3, #0]

			StartWaiting();
 800795c:	f7fc ff52 	bl	8004804 <StartWaiting>
			start_ready();
 8007960:	f7fc ff8a 	bl	8004878 <start_ready>

			searchSLA_ESNW();
 8007964:	f7fe fd72 	bl	800644c <searchSLA_ESNW>
			goal_x = goal_y = 0;
 8007968:	4b41      	ldr	r3, [pc, #260]	; (8007a70 <UtsutsuSystem+0x2cc>)
 800796a:	2200      	movs	r2, #0
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	4b40      	ldr	r3, [pc, #256]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007970:	881a      	ldrh	r2, [r3, #0]
 8007972:	4b3e      	ldr	r3, [pc, #248]	; (8007a6c <UtsutsuSystem+0x2c8>)
 8007974:	801a      	strh	r2, [r3, #0]
			searchSLA_ESNW();
 8007976:	f7fe fd69 	bl	800644c <searchSLA_ESNW>
			goal_x = GOAL_X;
 800797a:	4b3c      	ldr	r3, [pc, #240]	; (8007a6c <UtsutsuSystem+0x2c8>)
 800797c:	2202      	movs	r2, #2
 800797e:	801a      	strh	r2, [r3, #0]
			goal_y = GOAL_Y;
 8007980:	4b3b      	ldr	r3, [pc, #236]	; (8007a70 <UtsutsuSystem+0x2cc>)
 8007982:	2201      	movs	r2, #1
 8007984:	801a      	strh	r2, [r3, #0]

			turn_180();									//180度回転
 8007986:	f7fd f9f9 	bl	8004d7c <turn_180>
			turn_dir(DIR_TURN_180);
 800798a:	2002      	movs	r0, #2
 800798c:	f7ff f880 	bl	8006a90 <turn_dir>
			break;
 8007990:	e05e      	b.n	8007a50 <UtsutsuSystem+0x2ac>


			//----走行テスト----
		case 11:
			HAL_Delay(100);
 8007992:	2064      	movs	r0, #100	; 0x64
 8007994:	f7f9 fc58 	bl	8001248 <HAL_Delay>
			StartWaiting();
 8007998:	f7fc ff34 	bl	8004804 <StartWaiting>
			set_dir(FORWARD);
 800799c:	2000      	movs	r0, #0
 800799e:	f7fd fea9 	bl	80056f4 <set_dir>
			drive_start();
 80079a2:	f7fd fe95 	bl	80056d0 <drive_start>
			while(1){
				printf("Driving\r\n");
 80079a6:	4833      	ldr	r0, [pc, #204]	; (8007a74 <UtsutsuSystem+0x2d0>)
 80079a8:	f001 feb2 	bl	8009710 <puts>
 80079ac:	e7fb      	b.n	80079a6 <UtsutsuSystem+0x202>
			test_drive(&mode);									//test_drive()はdrive.cに関数定義あり
			ms_wait(100);
			break;
			//----エンコーダテスト----
		case 12:
			HAL_Delay(100);
 80079ae:	2064      	movs	r0, #100	; 0x64
 80079b0:	f7f9 fc4a 	bl	8001248 <HAL_Delay>
			StartWaiting();
 80079b4:	f7fc ff26 	bl	8004804 <StartWaiting>
			EncoderGyroTest();
 80079b8:	f7ff fc8c 	bl	80072d4 <EncoderGyroTest>
			ms_wait(100);
 80079bc:	2064      	movs	r0, #100	; 0x64
 80079be:	f7fc fda7 	bl	8004510 <ms_wait>
			break;
 80079c2:	e045      	b.n	8007a50 <UtsutsuSystem+0x2ac>

		case 13:
			HAL_Delay(100);
 80079c4:	2064      	movs	r0, #100	; 0x64
 80079c6:	f7f9 fc3f 	bl	8001248 <HAL_Delay>
			StartWaiting();
 80079ca:	f7fc ff1b 	bl	8004804 <StartWaiting>

			/*Mode Stone*/
			MF.FLAG.ACTRL = 0;
 80079ce:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <UtsutsuSystem+0x2d4>)
 80079d0:	7853      	ldrb	r3, [r2, #1]
 80079d2:	f36f 1345 	bfc	r3, #5, #1
 80079d6:	7053      	strb	r3, [r2, #1]
			MF.FLAG.VCTRL = 1;
 80079d8:	4a27      	ldr	r2, [pc, #156]	; (8007a78 <UtsutsuSystem+0x2d4>)
 80079da:	7853      	ldrb	r3, [r2, #1]
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	7053      	strb	r3, [r2, #1]
			MF.FLAG.WCTRL = 1;
 80079e2:	4a25      	ldr	r2, [pc, #148]	; (8007a78 <UtsutsuSystem+0x2d4>)
 80079e4:	7853      	ldrb	r3, [r2, #1]
 80079e6:	f043 0310 	orr.w	r3, r3, #16
 80079ea:	7053      	strb	r3, [r2, #1]
			MF.FLAG.XCTRL = 0;
 80079ec:	4a22      	ldr	r2, [pc, #136]	; (8007a78 <UtsutsuSystem+0x2d4>)
 80079ee:	7853      	ldrb	r3, [r2, #1]
 80079f0:	f36f 03c3 	bfc	r3, #3, #1
 80079f4:	7053      	strb	r3, [r2, #1]

			MF.FLAG.ACCL = 0;
 80079f6:	4a20      	ldr	r2, [pc, #128]	; (8007a78 <UtsutsuSystem+0x2d4>)
 80079f8:	7813      	ldrb	r3, [r2, #0]
 80079fa:	f36f 1304 	bfc	r3, #4, #1
 80079fe:	7013      	strb	r3, [r2, #0]
			MF.FLAG.DECL = 0;
 8007a00:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <UtsutsuSystem+0x2d4>)
 8007a02:	7813      	ldrb	r3, [r2, #0]
 8007a04:	f36f 1345 	bfc	r3, #5, #1
 8007a08:	7013      	strb	r3, [r2, #0]
			MF.FLAG.WACCL = 0;
 8007a0a:	4a1b      	ldr	r2, [pc, #108]	; (8007a78 <UtsutsuSystem+0x2d4>)
 8007a0c:	7853      	ldrb	r3, [r2, #1]
 8007a0e:	f36f 1386 	bfc	r3, #6, #1
 8007a12:	7053      	strb	r3, [r2, #1]
			MF.FLAG.WDECL = 0;
 8007a14:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <UtsutsuSystem+0x2d4>)
 8007a16:	7853      	ldrb	r3, [r2, #1]
 8007a18:	f36f 13c7 	bfc	r3, #7, #1
 8007a1c:	7053      	strb	r3, [r2, #1]

			centor.vel_target = 0;
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <UtsutsuSystem+0x2d8>)
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	605a      	str	r2, [r3, #4]
			omega.target = 0;
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <UtsutsuSystem+0x2dc>)
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]

			drive_start();
 8007a2e:	f7fd fe4f 	bl	80056d0 <drive_start>
			while(1){
//				uart_printf("angle : %lf dif_angle : %lf tpid_G : %lf\r\n");
				ms_wait(100);
 8007a32:	2064      	movs	r0, #100	; 0x64
 8007a34:	f7fc fd6c 	bl	8004510 <ms_wait>
 8007a38:	e7fb      	b.n	8007a32 <UtsutsuSystem+0x28e>
			}
			break;

			//----センサ値, 差を確認----
		default:
			HAL_Delay(100);
 8007a3a:	2064      	movs	r0, #100	; 0x64
 8007a3c:	f7f9 fc04 	bl	8001248 <HAL_Delay>
			VariableInit();
 8007a40:	f7fd fe9e 	bl	8005780 <VariableInit>
//			StartWaiting();
			sensor_check();
 8007a44:	f7ff fcbc 	bl	80073c0 <sensor_check>
			ms_wait(100);
 8007a48:	2064      	movs	r0, #100	; 0x64
 8007a4a:	f7fc fd61 	bl	8004510 <ms_wait>
			break;
 8007a4e:	bf00      	nop
	  ModeSelect(&mode);
 8007a50:	e6b8      	b.n	80077c4 <UtsutsuSystem+0x20>
 8007a52:	bf00      	nop
 8007a54:	0800b76c 	.word	0x0800b76c
 8007a58:	0800b78c 	.word	0x0800b78c
 8007a5c:	20000438 	.word	0x20000438
 8007a60:	200003d8 	.word	0x200003d8
 8007a64:	0800b794 	.word	0x0800b794
 8007a68:	0800b7a4 	.word	0x0800b7a4
 8007a6c:	20000434 	.word	0x20000434
 8007a70:	200003d2 	.word	0x200003d2
 8007a74:	0800b7ac 	.word	0x0800b7ac
 8007a78:	200006e8 	.word	0x200006e8
 8007a7c:	200006fc 	.word	0x200006fc
 8007a80:	20000480 	.word	0x20000480

08007a84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	605a      	str	r2, [r3, #4]
 8007a92:	609a      	str	r2, [r3, #8]
 8007a94:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007a96:	4b21      	ldr	r3, [pc, #132]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007a98:	4a21      	ldr	r2, [pc, #132]	; (8007b20 <MX_ADC1_Init+0x9c>)
 8007a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007a9c:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007aa2:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007aae:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007ab4:	4b19      	ldr	r3, [pc, #100]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007abc:	4b17      	ldr	r3, [pc, #92]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ac2:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ac4:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <MX_ADC1_Init+0xa0>)
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007ac8:	4b14      	ldr	r3, [pc, #80]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007ad4:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ade:	2201      	movs	r2, #1
 8007ae0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007ae2:	480e      	ldr	r0, [pc, #56]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007ae4:	f7f9 fbd2 	bl	800128c <HAL_ADC_Init>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8007aee:	f000 f9c3 	bl	8007e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007af6:	2301      	movs	r3, #1
 8007af8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007afe:	463b      	mov	r3, r7
 8007b00:	4619      	mov	r1, r3
 8007b02:	4806      	ldr	r0, [pc, #24]	; (8007b1c <MX_ADC1_Init+0x98>)
 8007b04:	f7f9 fd5e 	bl	80015c4 <HAL_ADC_ConfigChannel>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8007b0e:	f000 f9b3 	bl	8007e78 <Error_Handler>
  }

}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	2000020c 	.word	0x2000020c
 8007b20:	40012000 	.word	0x40012000
 8007b24:	0f000001 	.word	0x0f000001

08007b28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a17      	ldr	r2, [pc, #92]	; (8007ba4 <HAL_ADC_MspInit+0x7c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d127      	bne.n	8007b9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <HAL_ADC_MspInit+0x80>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <HAL_ADC_MspInit+0x80>)
 8007b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b58:	6453      	str	r3, [r2, #68]	; 0x44
 8007b5a:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <HAL_ADC_MspInit+0x80>)
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <HAL_ADC_MspInit+0x80>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ba8 <HAL_ADC_MspInit+0x80>)
 8007b70:	f043 0301 	orr.w	r3, r3, #1
 8007b74:	6313      	str	r3, [r2, #48]	; 0x30
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <HAL_ADC_MspInit+0x80>)
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin 
 8007b82:	2337      	movs	r3, #55	; 0x37
 8007b84:	617b      	str	r3, [r7, #20]
                          |AD_FL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b86:	2303      	movs	r3, #3
 8007b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8e:	f107 0314 	add.w	r3, r7, #20
 8007b92:	4619      	mov	r1, r3
 8007b94:	4805      	ldr	r0, [pc, #20]	; (8007bac <HAL_ADC_MspInit+0x84>)
 8007b96:	f7fa f845 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3728      	adds	r7, #40	; 0x28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40012000 	.word	0x40012000
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	40020000 	.word	0x40020000

08007bb0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb6:	f107 0314 	add.w	r3, r7, #20
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
 8007bc2:	60da      	str	r2, [r3, #12]
 8007bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	4b4c      	ldr	r3, [pc, #304]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bce:	4a4b      	ldr	r2, [pc, #300]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007bd0:	f043 0304 	orr.w	r3, r3, #4
 8007bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bd6:	4b49      	ldr	r3, [pc, #292]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	4b45      	ldr	r3, [pc, #276]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	4a44      	ldr	r2, [pc, #272]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf2:	4b42      	ldr	r3, [pc, #264]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	4b3e      	ldr	r3, [pc, #248]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	4a3d      	ldr	r2, [pc, #244]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	60bb      	str	r3, [r7, #8]
 8007c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
 8007c1e:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	4a36      	ldr	r2, [pc, #216]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007c24:	f043 0308 	orr.w	r3, r3, #8
 8007c28:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2a:	4b34      	ldr	r3, [pc, #208]	; (8007cfc <MX_GPIO_Init+0x14c>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_FR_Pin|LED_R_Pin|LED3_Pin, GPIO_PIN_RESET);
 8007c36:	2200      	movs	r2, #0
 8007c38:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8007c3c:	4830      	ldr	r0, [pc, #192]	; (8007d00 <MX_GPIO_Init+0x150>)
 8007c3e:	f7fa f9a3 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_FF_Pin|LED_L_Pin|LED_FL_Pin|MOTOR_R_DIR1_Pin 
 8007c42:	2200      	movs	r2, #0
 8007c44:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 8007c48:	482e      	ldr	r0, [pc, #184]	; (8007d04 <MX_GPIO_Init+0x154>)
 8007c4a:	f7fa f99d 	bl	8001f88 <HAL_GPIO_WritePin>
                          |MOTOR_R_DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f24c 0130 	movw	r1, #49200	; 0xc030
 8007c54:	482c      	ldr	r0, [pc, #176]	; (8007d08 <MX_GPIO_Init+0x158>)
 8007c56:	f7fa f997 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2104      	movs	r1, #4
 8007c5e:	482b      	ldr	r0, [pc, #172]	; (8007d0c <MX_GPIO_Init+0x15c>)
 8007c60:	f7fa f992 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_FR_Pin|LED_R_Pin|LED3_Pin;
 8007c64:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8007c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c72:	2300      	movs	r3, #0
 8007c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c76:	f107 0314 	add.w	r3, r7, #20
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4820      	ldr	r0, [pc, #128]	; (8007d00 <MX_GPIO_Init+0x150>)
 8007c7e:	f7f9 ffd1 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = LED_FF_Pin|LED_L_Pin|LED_FL_Pin|MOTOR_R_DIR1_Pin 
 8007c82:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 8007c86:	617b      	str	r3, [r7, #20]
                          |MOTOR_R_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c90:	2300      	movs	r3, #0
 8007c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c94:	f107 0314 	add.w	r3, r7, #20
 8007c98:	4619      	mov	r1, r3
 8007c9a:	481a      	ldr	r0, [pc, #104]	; (8007d04 <MX_GPIO_Init+0x154>)
 8007c9c:	f7f9 ffc2 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED4_Pin|LED5_Pin;
 8007ca0:	f24c 0330 	movw	r3, #49200	; 0xc030
 8007ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cb2:	f107 0314 	add.w	r3, r7, #20
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4813      	ldr	r0, [pc, #76]	; (8007d08 <MX_GPIO_Init+0x158>)
 8007cba:	f7f9 ffb3 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007cce:	f107 0314 	add.w	r3, r7, #20
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	480d      	ldr	r0, [pc, #52]	; (8007d0c <MX_GPIO_Init+0x15c>)
 8007cd6:	f7f9 ffa5 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BATTERY_Pin;
 8007cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8007ce8:	f107 0314 	add.w	r3, r7, #20
 8007cec:	4619      	mov	r1, r3
 8007cee:	4806      	ldr	r0, [pc, #24]	; (8007d08 <MX_GPIO_Init+0x158>)
 8007cf0:	f7f9 ff98 	bl	8001c24 <HAL_GPIO_Init>

}
 8007cf4:	bf00      	nop
 8007cf6:	3728      	adds	r7, #40	; 0x28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40020800 	.word	0x40020800
 8007d04:	40020000 	.word	0x40020000
 8007d08:	40020400 	.word	0x40020400
 8007d0c:	40020c00 	.word	0x40020c00

08007d10 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int c) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b0a      	cmp	r3, #10
 8007d1c:	d108      	bne.n	8007d30 <__io_putchar+0x20>
    int _c = '\r';
 8007d1e:	230d      	movs	r3, #13
 8007d20:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8007d22:	f107 010c 	add.w	r1, r7, #12
 8007d26:	2301      	movs	r3, #1
 8007d28:	2201      	movs	r2, #1
 8007d2a:	4807      	ldr	r0, [pc, #28]	; (8007d48 <__io_putchar+0x38>)
 8007d2c:	f7fc f903 	bl	8003f36 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8007d30:	1d39      	adds	r1, r7, #4
 8007d32:	2301      	movs	r3, #1
 8007d34:	2201      	movs	r2, #1
 8007d36:	4804      	ldr	r0, [pc, #16]	; (8007d48 <__io_putchar+0x38>)
 8007d38:	f7fc f8fd 	bl	8003f36 <HAL_UART_Transmit>
  return 0;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000934 	.word	0x20000934

08007d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d50:	f7f9 fa08 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d54:	f000 f826 	bl	8007da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d58:	f7ff ff2a 	bl	8007bb0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007d5c:	f000 ff3a 	bl	8008bd4 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8007d60:	f000 f892 	bl	8007e88 <MX_SPI3_Init>
  MX_ADC1_Init();
 8007d64:	f7ff fe8e 	bl	8007a84 <MX_ADC1_Init>
  MX_TIM1_Init();
 8007d68:	f000 faa6 	bl	80082b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8007d6c:	f000 fb46 	bl	80083fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8007d70:	f000 fbba 	bl	80084e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007d74:	f000 fc0c 	bl	8008590 <MX_TIM4_Init>
  MX_TIM6_Init();
 8007d78:	f000 fc5e 	bl	8008638 <MX_TIM6_Init>
  MX_TIM8_Init();
 8007d7c:	f000 fc92 	bl	80086a4 <MX_TIM8_Init>
  MX_TIM11_Init();
 8007d80:	f000 fd12 	bl	80087a8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout,NULL);
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <main+0x54>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 fcc7 	bl	8009720 <setbuf>
  HAL_Delay(1);
 8007d92:	2001      	movs	r0, #1
 8007d94:	f7f9 fa58 	bl	8001248 <HAL_Delay>

  UtsutsuSystem();
 8007d98:	f7ff fd04 	bl	80077a4 <UtsutsuSystem>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007d9c:	e7fe      	b.n	8007d9c <main+0x50>
 8007d9e:	bf00      	nop
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b094      	sub	sp, #80	; 0x50
 8007da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007daa:	f107 0320 	add.w	r3, r7, #32
 8007dae:	2230      	movs	r2, #48	; 0x30
 8007db0:	2100      	movs	r1, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 ffd4 	bl	8008d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007db8:	f107 030c 	add.w	r3, r7, #12
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	609a      	str	r2, [r3, #8]
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60bb      	str	r3, [r7, #8]
 8007dcc:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <SystemClock_Config+0xcc>)
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <SystemClock_Config+0xcc>)
 8007dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8007dd8:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <SystemClock_Config+0xcc>)
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007de4:	2300      	movs	r3, #0
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	4b22      	ldr	r3, [pc, #136]	; (8007e74 <SystemClock_Config+0xd0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <SystemClock_Config+0xd0>)
 8007dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	4b1f      	ldr	r3, [pc, #124]	; (8007e74 <SystemClock_Config+0xd0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007e00:	2302      	movs	r3, #2
 8007e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e04:	2301      	movs	r3, #1
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e08:	2310      	movs	r3, #16
 8007e0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007e14:	2308      	movs	r3, #8
 8007e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007e18:	23a8      	movs	r3, #168	; 0xa8
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007e20:	2304      	movs	r3, #4
 8007e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e24:	f107 0320 	add.w	r3, r7, #32
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fa f8c7 	bl	8001fbc <HAL_RCC_OscConfig>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007e34:	f000 f820 	bl	8007e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e38:	230f      	movs	r3, #15
 8007e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007e44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8007e4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007e50:	f107 030c 	add.w	r3, r7, #12
 8007e54:	2105      	movs	r1, #5
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fa faf2 	bl	8002440 <HAL_RCC_ClockConfig>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007e62:	f000 f809 	bl	8007e78 <Error_Handler>
  }
}
 8007e66:	bf00      	nop
 8007e68:	3750      	adds	r7, #80	; 0x50
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40023800 	.word	0x40023800
 8007e74:	40007000 	.word	0x40007000

08007e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007e7c:	bf00      	nop
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <MX_SPI3_Init+0x64>)
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <MX_SPI3_Init+0x68>)
 8007e90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007e92:	4b16      	ldr	r3, [pc, #88]	; (8007eec <MX_SPI3_Init+0x64>)
 8007e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007e98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <MX_SPI3_Init+0x64>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ea0:	4b12      	ldr	r3, [pc, #72]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007ea6:	4b11      	ldr	r3, [pc, #68]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <MX_SPI3_Init+0x64>)
 8007eae:	2201      	movs	r2, #1
 8007eb0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <MX_SPI3_Init+0x64>)
 8007eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <MX_SPI3_Init+0x64>)
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007ed8:	4804      	ldr	r0, [pc, #16]	; (8007eec <MX_SPI3_Init+0x64>)
 8007eda:	f7fa fc79 	bl	80027d0 <HAL_SPI_Init>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007ee4:	f7ff ffc8 	bl	8007e78 <Error_Handler>
  }

}
 8007ee8:	bf00      	nop
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	2000071c 	.word	0x2000071c
 8007ef0:	40003c00 	.word	0x40003c00

08007ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	605a      	str	r2, [r3, #4]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a19      	ldr	r2, [pc, #100]	; (8007f78 <HAL_SPI_MspInit+0x84>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d12c      	bne.n	8007f70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <HAL_SPI_MspInit+0x88>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <HAL_SPI_MspInit+0x88>)
 8007f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f24:	6413      	str	r3, [r2, #64]	; 0x40
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <HAL_SPI_MspInit+0x88>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <HAL_SPI_MspInit+0x88>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <HAL_SPI_MspInit+0x88>)
 8007f3c:	f043 0304 	orr.w	r3, r3, #4
 8007f40:	6313      	str	r3, [r2, #48]	; 0x30
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <HAL_SPI_MspInit+0x88>)
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007f4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f54:	2302      	movs	r3, #2
 8007f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007f60:	2306      	movs	r3, #6
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f64:	f107 0314 	add.w	r3, r7, #20
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4805      	ldr	r0, [pc, #20]	; (8007f80 <HAL_SPI_MspInit+0x8c>)
 8007f6c:	f7f9 fe5a 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007f70:	bf00      	nop
 8007f72:	3728      	adds	r7, #40	; 0x28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40003c00 	.word	0x40003c00
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	40020800 	.word	0x40020800

08007f84 <ReadByte>:
//	RXの簡易SPI通信でジャイロとお話しするよ?�?�?
// 引数1?��受け取りた�?�?ータのアドレス
// 戻り�?�?��受け取りた�?�?ータの中身
//+++++++++++++++++++++++++++++++++++++++++++++++
uint8_t ReadByte(uint8_t addres)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
	uint8_t trans_addres[2];
	uint8_t receive_data[2];

	trans_addres[0] = addres | 0x80;
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	733b      	strb	r3, [r7, #12]
	trans_addres[1] = 0x00;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,RESET);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <ReadByte+0x4c>)
 8007fa2:	f7f9 fff1 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,trans_addres,receive_data,2,1);
 8007fa6:	f107 0208 	add.w	r2, r7, #8
 8007faa:	f107 010c 	add.w	r1, r7, #12
 8007fae:	2301      	movs	r3, #1
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	4807      	ldr	r0, [pc, #28]	; (8007fd4 <ReadByte+0x50>)
 8007fb6:	f7fa fc6f 	bl	8002898 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,SET);
 8007fba:	2201      	movs	r2, #1
 8007fbc:	2104      	movs	r1, #4
 8007fbe:	4804      	ldr	r0, [pc, #16]	; (8007fd0 <ReadByte+0x4c>)
 8007fc0:	f7f9 ffe2 	bl	8001f88 <HAL_GPIO_WritePin>

	return receive_data[1];
 8007fc4:	7a7b      	ldrb	r3, [r7, #9]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40020c00 	.word	0x40020c00
 8007fd4:	2000071c 	.word	0x2000071c

08007fd8 <WriteByte>:
//	RXの簡易SPI通信でジャイロとお話しするよ?�?�?
// 引数1?��書き込みたい�?ータのアドレス
// 引数2?��書き込みたい�?ータの�?容
//+++++++++++++++++++++++++++++++++++++++++++++++
void WriteByte(uint8_t addres,uint8_t data)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	4603      	mov	r3, r0
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	71fb      	strb	r3, [r7, #7]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	71bb      	strb	r3, [r7, #6]

	uint8_t trans_data[2];
	uint8_t receive_data[2];

	trans_data[0] = addres & 0x7f;
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	733b      	strb	r3, [r7, #12]
	trans_data[1] = data;
 8007ff2:	79bb      	ldrb	r3, [r7, #6]
 8007ff4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,RESET);
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	480b      	ldr	r0, [pc, #44]	; (8008028 <WriteByte+0x50>)
 8007ffc:	f7f9 ffc4 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,trans_data,receive_data,2,1);
 8008000:	f107 0208 	add.w	r2, r7, #8
 8008004:	f107 010c 	add.w	r1, r7, #12
 8008008:	2301      	movs	r3, #1
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2302      	movs	r3, #2
 800800e:	4807      	ldr	r0, [pc, #28]	; (800802c <WriteByte+0x54>)
 8008010:	f7fa fc42 	bl	8002898 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,SET);
 8008014:	2201      	movs	r2, #1
 8008016:	2104      	movs	r1, #4
 8008018:	4803      	ldr	r0, [pc, #12]	; (8008028 <WriteByte+0x50>)
 800801a:	f7f9 ffb5 	bl	8001f88 <HAL_GPIO_WritePin>

}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	40020c00 	.word	0x40020c00
 800802c:	2000071c 	.word	0x2000071c

08008030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	4b10      	ldr	r3, [pc, #64]	; (800807c <HAL_MspInit+0x4c>)
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	4a0f      	ldr	r2, [pc, #60]	; (800807c <HAL_MspInit+0x4c>)
 8008040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008044:	6453      	str	r3, [r2, #68]	; 0x44
 8008046:	4b0d      	ldr	r3, [pc, #52]	; (800807c <HAL_MspInit+0x4c>)
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008052:	2300      	movs	r3, #0
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <HAL_MspInit+0x4c>)
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	4a08      	ldr	r2, [pc, #32]	; (800807c <HAL_MspInit+0x4c>)
 800805c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008060:	6413      	str	r3, [r2, #64]	; 0x40
 8008062:	4b06      	ldr	r3, [pc, #24]	; (800807c <HAL_MspInit+0x4c>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40023800 	.word	0x40023800

08008080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008084:	bf00      	nop
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800808e:	b480      	push	{r7}
 8008090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008092:	e7fe      	b.n	8008092 <HardFault_Handler+0x4>

08008094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008098:	e7fe      	b.n	8008098 <MemManage_Handler+0x4>

0800809a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800809a:	b480      	push	{r7}
 800809c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800809e:	e7fe      	b.n	800809e <BusFault_Handler+0x4>

080080a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080a4:	e7fe      	b.n	80080a4 <UsageFault_Handler+0x4>

080080a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080a6:	b480      	push	{r7}
 80080a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080aa:	bf00      	nop
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80080b8:	bf00      	nop
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080c2:	b480      	push	{r7}
 80080c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080d4:	f7f9 f898 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080d8:	bf00      	nop
 80080da:	bd80      	pop	{r7, pc}

080080dc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80080e0:	4802      	ldr	r0, [pc, #8]	; (80080ec <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80080e2:	f7fb f873 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80080e6:	bf00      	nop
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	200008b4 	.word	0x200008b4

080080f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80080f4:	4802      	ldr	r0, [pc, #8]	; (8008100 <TIM2_IRQHandler+0x10>)
 80080f6:	f7fb f869 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	200008f4 	.word	0x200008f4

08008104 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008108:	4802      	ldr	r0, [pc, #8]	; (8008114 <TIM6_DAC_IRQHandler+0x10>)
 800810a:	f7fb f85f 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800810e:	bf00      	nop
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000874 	.word	0x20000874

08008118 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e00a      	b.n	8008140 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800812a:	f3af 8000 	nop.w
 800812e:	4601      	mov	r1, r0
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	60ba      	str	r2, [r7, #8]
 8008136:	b2ca      	uxtb	r2, r1
 8008138:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	3301      	adds	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	dbf0      	blt.n	800812a <_read+0x12>
	}

return len;
 8008148:	687b      	ldr	r3, [r7, #4]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	e009      	b.n	8008178 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	60ba      	str	r2, [r7, #8]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff fdcf 	bl	8007d10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	3301      	adds	r3, #1
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	dbf1      	blt.n	8008164 <_write+0x12>
	}
	return len;
 8008180:	687b      	ldr	r3, [r7, #4]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <_close>:

int _close(int file)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
	return -1;
 8008192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081b2:	605a      	str	r2, [r3, #4]
	return 0;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <_isatty>:

int _isatty(int file)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
	return 1;
 80081ca:	2301      	movs	r3, #1
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
	return 0;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
	...

080081f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <_sbrk+0x50>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <_sbrk+0x16>
		heap_end = &end;
 8008204:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <_sbrk+0x50>)
 8008206:	4a10      	ldr	r2, [pc, #64]	; (8008248 <_sbrk+0x54>)
 8008208:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <_sbrk+0x50>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <_sbrk+0x50>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4413      	add	r3, r2
 8008218:	466a      	mov	r2, sp
 800821a:	4293      	cmp	r3, r2
 800821c:	d907      	bls.n	800822e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800821e:	f000 fd75 	bl	8008d0c <__errno>
 8008222:	4602      	mov	r2, r0
 8008224:	230c      	movs	r3, #12
 8008226:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008228:	f04f 33ff 	mov.w	r3, #4294967295
 800822c:	e006      	b.n	800823c <_sbrk+0x48>
	}

	heap_end += incr;
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <_sbrk+0x50>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4413      	add	r3, r2
 8008236:	4a03      	ldr	r2, [pc, #12]	; (8008244 <_sbrk+0x50>)
 8008238:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	200001fc 	.word	0x200001fc
 8008248:	20000978 	.word	0x20000978

0800824c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008250:	4b16      	ldr	r3, [pc, #88]	; (80082ac <SystemInit+0x60>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	4a15      	ldr	r2, [pc, #84]	; (80082ac <SystemInit+0x60>)
 8008258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800825c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008260:	4b13      	ldr	r3, [pc, #76]	; (80082b0 <SystemInit+0x64>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a12      	ldr	r2, [pc, #72]	; (80082b0 <SystemInit+0x64>)
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800826c:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <SystemInit+0x64>)
 800826e:	2200      	movs	r2, #0
 8008270:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008272:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <SystemInit+0x64>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a0e      	ldr	r2, [pc, #56]	; (80082b0 <SystemInit+0x64>)
 8008278:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800827c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008280:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008282:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <SystemInit+0x64>)
 8008284:	4a0b      	ldr	r2, [pc, #44]	; (80082b4 <SystemInit+0x68>)
 8008286:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008288:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <SystemInit+0x64>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <SystemInit+0x64>)
 800828e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008292:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <SystemInit+0x64>)
 8008296:	2200      	movs	r2, #0
 8008298:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800829a:	4b04      	ldr	r3, [pc, #16]	; (80082ac <SystemInit+0x60>)
 800829c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082a0:	609a      	str	r2, [r3, #8]
#endif
}
 80082a2:	bf00      	nop
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	e000ed00 	.word	0xe000ed00
 80082b0:	40023800 	.word	0x40023800
 80082b4:	24003010 	.word	0x24003010

080082b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b096      	sub	sp, #88	; 0x58
 80082bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	605a      	str	r2, [r3, #4]
 80082c8:	609a      	str	r2, [r3, #8]
 80082ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	605a      	str	r2, [r3, #4]
 80082e0:	609a      	str	r2, [r3, #8]
 80082e2:	60da      	str	r2, [r3, #12]
 80082e4:	611a      	str	r2, [r3, #16]
 80082e6:	615a      	str	r2, [r3, #20]
 80082e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80082ea:	1d3b      	adds	r3, r7, #4
 80082ec:	2220      	movs	r2, #32
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fd35 	bl	8008d60 <memset>

  htim1.Instance = TIM1;
 80082f6:	4b3f      	ldr	r3, [pc, #252]	; (80083f4 <MX_TIM1_Init+0x13c>)
 80082f8:	4a3f      	ldr	r2, [pc, #252]	; (80083f8 <MX_TIM1_Init+0x140>)
 80082fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80082fc:	4b3d      	ldr	r3, [pc, #244]	; (80083f4 <MX_TIM1_Init+0x13c>)
 80082fe:	2200      	movs	r2, #0
 8008300:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008302:	4b3c      	ldr	r3, [pc, #240]	; (80083f4 <MX_TIM1_Init+0x13c>)
 8008304:	2200      	movs	r2, #0
 8008306:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8008308:	4b3a      	ldr	r3, [pc, #232]	; (80083f4 <MX_TIM1_Init+0x13c>)
 800830a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800830e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008310:	4b38      	ldr	r3, [pc, #224]	; (80083f4 <MX_TIM1_Init+0x13c>)
 8008312:	2200      	movs	r2, #0
 8008314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008316:	4b37      	ldr	r3, [pc, #220]	; (80083f4 <MX_TIM1_Init+0x13c>)
 8008318:	2200      	movs	r2, #0
 800831a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800831c:	4b35      	ldr	r3, [pc, #212]	; (80083f4 <MX_TIM1_Init+0x13c>)
 800831e:	2200      	movs	r2, #0
 8008320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008322:	4834      	ldr	r0, [pc, #208]	; (80083f4 <MX_TIM1_Init+0x13c>)
 8008324:	f7fa fd06 	bl	8002d34 <HAL_TIM_Base_Init>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800832e:	f7ff fda3 	bl	8007e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008336:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800833c:	4619      	mov	r1, r3
 800833e:	482d      	ldr	r0, [pc, #180]	; (80083f4 <MX_TIM1_Init+0x13c>)
 8008340:	f7fb f912 	bl	8003568 <HAL_TIM_ConfigClockSource>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800834a:	f7ff fd95 	bl	8007e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800834e:	4829      	ldr	r0, [pc, #164]	; (80083f4 <MX_TIM1_Init+0x13c>)
 8008350:	f7fa fd6a 	bl	8002e28 <HAL_TIM_PWM_Init>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800835a:	f7ff fd8d 	bl	8007e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800835e:	2300      	movs	r3, #0
 8008360:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008362:	2300      	movs	r3, #0
 8008364:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800836a:	4619      	mov	r1, r3
 800836c:	4821      	ldr	r0, [pc, #132]	; (80083f4 <MX_TIM1_Init+0x13c>)
 800836e:	f7fb fcea 	bl	8003d46 <HAL_TIMEx_MasterConfigSynchronization>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8008378:	f7ff fd7e 	bl	8007e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800837c:	2360      	movs	r3, #96	; 0x60
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8008380:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008386:	2300      	movs	r3, #0
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800838a:	2300      	movs	r3, #0
 800838c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800838e:	2300      	movs	r3, #0
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008392:	2300      	movs	r3, #0
 8008394:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008396:	2300      	movs	r3, #0
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800839a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800839e:	2200      	movs	r2, #0
 80083a0:	4619      	mov	r1, r3
 80083a2:	4814      	ldr	r0, [pc, #80]	; (80083f4 <MX_TIM1_Init+0x13c>)
 80083a4:	f7fb f81a 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80083ae:	f7ff fd63 	bl	8007e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80083c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80083d0:	1d3b      	adds	r3, r7, #4
 80083d2:	4619      	mov	r1, r3
 80083d4:	4807      	ldr	r0, [pc, #28]	; (80083f4 <MX_TIM1_Init+0x13c>)
 80083d6:	f7fb fcfb 	bl	8003dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80083e0:	f7ff fd4a 	bl	8007e78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80083e4:	4803      	ldr	r0, [pc, #12]	; (80083f4 <MX_TIM1_Init+0x13c>)
 80083e6:	f000 fb45 	bl	8008a74 <HAL_TIM_MspPostInit>

}
 80083ea:	bf00      	nop
 80083ec:	3758      	adds	r7, #88	; 0x58
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200008b4 	.word	0x200008b4
 80083f8:	40010000 	.word	0x40010000

080083fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	; 0x38
 8008400:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	605a      	str	r2, [r3, #4]
 800840c:	609a      	str	r2, [r3, #8]
 800840e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008410:	f107 0320 	add.w	r3, r7, #32
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	609a      	str	r2, [r3, #8]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	611a      	str	r2, [r3, #16]
 8008428:	615a      	str	r2, [r3, #20]
 800842a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <MX_TIM2_Init+0xe8>)
 800842e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008432:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008434:	4b2b      	ldr	r3, [pc, #172]	; (80084e4 <MX_TIM2_Init+0xe8>)
 8008436:	2200      	movs	r2, #0
 8008438:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800843a:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <MX_TIM2_Init+0xe8>)
 800843c:	2200      	movs	r2, #0
 800843e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8008440:	4b28      	ldr	r3, [pc, #160]	; (80084e4 <MX_TIM2_Init+0xe8>)
 8008442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008446:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008448:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <MX_TIM2_Init+0xe8>)
 800844a:	2200      	movs	r2, #0
 800844c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800844e:	4b25      	ldr	r3, [pc, #148]	; (80084e4 <MX_TIM2_Init+0xe8>)
 8008450:	2200      	movs	r2, #0
 8008452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008454:	4823      	ldr	r0, [pc, #140]	; (80084e4 <MX_TIM2_Init+0xe8>)
 8008456:	f7fa fc6d 	bl	8002d34 <HAL_TIM_Base_Init>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8008460:	f7ff fd0a 	bl	8007e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800846a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800846e:	4619      	mov	r1, r3
 8008470:	481c      	ldr	r0, [pc, #112]	; (80084e4 <MX_TIM2_Init+0xe8>)
 8008472:	f7fb f879 	bl	8003568 <HAL_TIM_ConfigClockSource>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800847c:	f7ff fcfc 	bl	8007e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008480:	4818      	ldr	r0, [pc, #96]	; (80084e4 <MX_TIM2_Init+0xe8>)
 8008482:	f7fa fcd1 	bl	8002e28 <HAL_TIM_PWM_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800848c:	f7ff fcf4 	bl	8007e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008490:	2300      	movs	r3, #0
 8008492:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008494:	2300      	movs	r3, #0
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008498:	f107 0320 	add.w	r3, r7, #32
 800849c:	4619      	mov	r1, r3
 800849e:	4811      	ldr	r0, [pc, #68]	; (80084e4 <MX_TIM2_Init+0xe8>)
 80084a0:	f7fb fc51 	bl	8003d46 <HAL_TIMEx_MasterConfigSynchronization>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80084aa:	f7ff fce5 	bl	8007e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084ae:	2360      	movs	r3, #96	; 0x60
 80084b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80084b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80084b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80084c0:	1d3b      	adds	r3, r7, #4
 80084c2:	2204      	movs	r2, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4807      	ldr	r0, [pc, #28]	; (80084e4 <MX_TIM2_Init+0xe8>)
 80084c8:	f7fa ff88 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80084d2:	f7ff fcd1 	bl	8007e78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80084d6:	4803      	ldr	r0, [pc, #12]	; (80084e4 <MX_TIM2_Init+0xe8>)
 80084d8:	f000 facc 	bl	8008a74 <HAL_TIM_MspPostInit>

}
 80084dc:	bf00      	nop
 80084de:	3738      	adds	r7, #56	; 0x38
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200008f4 	.word	0x200008f4

080084e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80084ee:	f107 030c 	add.w	r3, r7, #12
 80084f2:	2224      	movs	r2, #36	; 0x24
 80084f4:	2100      	movs	r1, #0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fc32 	bl	8008d60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084fc:	1d3b      	adds	r3, r7, #4
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8008504:	4b20      	ldr	r3, [pc, #128]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008506:	4a21      	ldr	r2, [pc, #132]	; (800858c <MX_TIM3_Init+0xa4>)
 8008508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800850a:	4b1f      	ldr	r3, [pc, #124]	; (8008588 <MX_TIM3_Init+0xa0>)
 800850c:	2200      	movs	r2, #0
 800850e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008510:	4b1d      	ldr	r3, [pc, #116]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008512:	2200      	movs	r2, #0
 8008514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008516:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800851c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800851e:	4b1a      	ldr	r3, [pc, #104]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008520:	2200      	movs	r2, #0
 8008522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008524:	4b18      	ldr	r3, [pc, #96]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008526:	2200      	movs	r2, #0
 8008528:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800852a:	2303      	movs	r3, #3
 800852c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008532:	2301      	movs	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008536:	2300      	movs	r3, #0
 8008538:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800853e:	2300      	movs	r3, #0
 8008540:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008542:	2301      	movs	r3, #1
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008546:	2300      	movs	r3, #0
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	4619      	mov	r1, r3
 8008554:	480c      	ldr	r0, [pc, #48]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008556:	f7fa fd29 	bl	8002fac <HAL_TIM_Encoder_Init>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8008560:	f7ff fc8a 	bl	8007e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008564:	2300      	movs	r3, #0
 8008566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008568:	2300      	movs	r3, #0
 800856a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4805      	ldr	r0, [pc, #20]	; (8008588 <MX_TIM3_Init+0xa0>)
 8008572:	f7fb fbe8 	bl	8003d46 <HAL_TIMEx_MasterConfigSynchronization>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800857c:	f7ff fc7c 	bl	8007e78 <Error_Handler>
  }

}
 8008580:	bf00      	nop
 8008582:	3730      	adds	r7, #48	; 0x30
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	200007f4 	.word	0x200007f4
 800858c:	40000400 	.word	0x40000400

08008590 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08c      	sub	sp, #48	; 0x30
 8008594:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008596:	f107 030c 	add.w	r3, r7, #12
 800859a:	2224      	movs	r2, #36	; 0x24
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fbde 	bl	8008d60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085a4:	1d3b      	adds	r3, r7, #4
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80085ac:	4b20      	ldr	r3, [pc, #128]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085ae:	4a21      	ldr	r2, [pc, #132]	; (8008634 <MX_TIM4_Init+0xa4>)
 80085b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80085b2:	4b1f      	ldr	r3, [pc, #124]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80085be:	4b1c      	ldr	r3, [pc, #112]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085cc:	4b18      	ldr	r3, [pc, #96]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80085d2:	2303      	movs	r3, #3
 80085d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80085da:	2301      	movs	r3, #1
 80085dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80085de:	2300      	movs	r3, #0
 80085e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80085e6:	2300      	movs	r3, #0
 80085e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80085ea:	2301      	movs	r3, #1
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80085ee:	2300      	movs	r3, #0
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	4619      	mov	r1, r3
 80085fc:	480c      	ldr	r0, [pc, #48]	; (8008630 <MX_TIM4_Init+0xa0>)
 80085fe:	f7fa fcd5 	bl	8002fac <HAL_TIM_Encoder_Init>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8008608:	f7ff fc36 	bl	8007e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800860c:	2300      	movs	r3, #0
 800860e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4805      	ldr	r0, [pc, #20]	; (8008630 <MX_TIM4_Init+0xa0>)
 800861a:	f7fb fb94 	bl	8003d46 <HAL_TIMEx_MasterConfigSynchronization>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8008624:	f7ff fc28 	bl	8007e78 <Error_Handler>
  }

}
 8008628:	bf00      	nop
 800862a:	3730      	adds	r7, #48	; 0x30
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	200007b4 	.word	0x200007b4
 8008634:	40000800 	.word	0x40000800

08008638 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800863e:	463b      	mov	r3, r7
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8008646:	4b15      	ldr	r3, [pc, #84]	; (800869c <MX_TIM6_Init+0x64>)
 8008648:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <MX_TIM6_Init+0x68>)
 800864a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800864c:	4b13      	ldr	r3, [pc, #76]	; (800869c <MX_TIM6_Init+0x64>)
 800864e:	2253      	movs	r2, #83	; 0x53
 8008650:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <MX_TIM6_Init+0x64>)
 8008654:	2200      	movs	r2, #0
 8008656:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8008658:	4b10      	ldr	r3, [pc, #64]	; (800869c <MX_TIM6_Init+0x64>)
 800865a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800865e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008660:	4b0e      	ldr	r3, [pc, #56]	; (800869c <MX_TIM6_Init+0x64>)
 8008662:	2200      	movs	r2, #0
 8008664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008666:	480d      	ldr	r0, [pc, #52]	; (800869c <MX_TIM6_Init+0x64>)
 8008668:	f7fa fb64 	bl	8002d34 <HAL_TIM_Base_Init>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8008672:	f7ff fc01 	bl	8007e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008676:	2300      	movs	r3, #0
 8008678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800867a:	2300      	movs	r3, #0
 800867c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800867e:	463b      	mov	r3, r7
 8008680:	4619      	mov	r1, r3
 8008682:	4806      	ldr	r0, [pc, #24]	; (800869c <MX_TIM6_Init+0x64>)
 8008684:	f7fb fb5f 	bl	8003d46 <HAL_TIMEx_MasterConfigSynchronization>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800868e:	f7ff fbf3 	bl	8007e78 <Error_Handler>
  }

}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000874 	.word	0x20000874
 80086a0:	40001000 	.word	0x40001000

080086a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b092      	sub	sp, #72	; 0x48
 80086a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80086b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	605a      	str	r2, [r3, #4]
 80086be:	609a      	str	r2, [r3, #8]
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	611a      	str	r2, [r3, #16]
 80086c4:	615a      	str	r2, [r3, #20]
 80086c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80086c8:	1d3b      	adds	r3, r7, #4
 80086ca:	2220      	movs	r2, #32
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fb46 	bl	8008d60 <memset>

  htim8.Instance = TIM8;
 80086d4:	4b32      	ldr	r3, [pc, #200]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086d6:	4a33      	ldr	r2, [pc, #204]	; (80087a4 <MX_TIM8_Init+0x100>)
 80086d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 80086da:	4b31      	ldr	r3, [pc, #196]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086dc:	2253      	movs	r2, #83	; 0x53
 80086de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086e0:	4b2f      	ldr	r3, [pc, #188]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80086ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086ee:	4b2c      	ldr	r3, [pc, #176]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80086f4:	4b2a      	ldr	r3, [pc, #168]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086fa:	4b29      	ldr	r3, [pc, #164]	; (80087a0 <MX_TIM8_Init+0xfc>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8008700:	4827      	ldr	r0, [pc, #156]	; (80087a0 <MX_TIM8_Init+0xfc>)
 8008702:	f7fa fb91 	bl	8002e28 <HAL_TIM_PWM_Init>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800870c:	f7ff fbb4 	bl	8007e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008710:	2300      	movs	r3, #0
 8008712:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008714:	2300      	movs	r3, #0
 8008716:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800871c:	4619      	mov	r1, r3
 800871e:	4820      	ldr	r0, [pc, #128]	; (80087a0 <MX_TIM8_Init+0xfc>)
 8008720:	f7fb fb11 	bl	8003d46 <HAL_TIMEx_MasterConfigSynchronization>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800872a:	f7ff fba5 	bl	8007e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800872e:	2360      	movs	r3, #96	; 0x60
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8008732:	2332      	movs	r3, #50	; 0x32
 8008734:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008736:	2300      	movs	r3, #0
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800873a:	2300      	movs	r3, #0
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800873e:	2300      	movs	r3, #0
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800874a:	220c      	movs	r2, #12
 800874c:	4619      	mov	r1, r3
 800874e:	4814      	ldr	r0, [pc, #80]	; (80087a0 <MX_TIM8_Init+0xfc>)
 8008750:	f7fa fe44 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 800875a:	f7ff fb8d 	bl	8007e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008776:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008778:	2300      	movs	r3, #0
 800877a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800877c:	1d3b      	adds	r3, r7, #4
 800877e:	4619      	mov	r1, r3
 8008780:	4807      	ldr	r0, [pc, #28]	; (80087a0 <MX_TIM8_Init+0xfc>)
 8008782:	f7fb fb25 	bl	8003dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 800878c:	f7ff fb74 	bl	8007e78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008790:	4803      	ldr	r0, [pc, #12]	; (80087a0 <MX_TIM8_Init+0xfc>)
 8008792:	f000 f96f 	bl	8008a74 <HAL_TIM_MspPostInit>

}
 8008796:	bf00      	nop
 8008798:	3748      	adds	r7, #72	; 0x48
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000774 	.word	0x20000774
 80087a4:	40010400 	.word	0x40010400

080087a8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80087ae:	1d3b      	adds	r3, r7, #4
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	611a      	str	r2, [r3, #16]
 80087bc:	615a      	str	r2, [r3, #20]
 80087be:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 80087c0:	4b1e      	ldr	r3, [pc, #120]	; (800883c <MX_TIM11_Init+0x94>)
 80087c2:	4a1f      	ldr	r2, [pc, #124]	; (8008840 <MX_TIM11_Init+0x98>)
 80087c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80087c6:	4b1d      	ldr	r3, [pc, #116]	; (800883c <MX_TIM11_Init+0x94>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087cc:	4b1b      	ldr	r3, [pc, #108]	; (800883c <MX_TIM11_Init+0x94>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <MX_TIM11_Init+0x94>)
 80087d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087da:	4b18      	ldr	r3, [pc, #96]	; (800883c <MX_TIM11_Init+0x94>)
 80087dc:	2200      	movs	r2, #0
 80087de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087e0:	4b16      	ldr	r3, [pc, #88]	; (800883c <MX_TIM11_Init+0x94>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80087e6:	4815      	ldr	r0, [pc, #84]	; (800883c <MX_TIM11_Init+0x94>)
 80087e8:	f7fa faa4 	bl	8002d34 <HAL_TIM_Base_Init>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80087f2:	f7ff fb41 	bl	8007e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80087f6:	4811      	ldr	r0, [pc, #68]	; (800883c <MX_TIM11_Init+0x94>)
 80087f8:	f7fa fb16 	bl	8002e28 <HAL_TIM_PWM_Init>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8008802:	f7ff fb39 	bl	8007e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008806:	2360      	movs	r3, #96	; 0x60
 8008808:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008816:	1d3b      	adds	r3, r7, #4
 8008818:	2200      	movs	r2, #0
 800881a:	4619      	mov	r1, r3
 800881c:	4807      	ldr	r0, [pc, #28]	; (800883c <MX_TIM11_Init+0x94>)
 800881e:	f7fa fddd 	bl	80033dc <HAL_TIM_PWM_ConfigChannel>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8008828:	f7ff fb26 	bl	8007e78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800882c:	4803      	ldr	r0, [pc, #12]	; (800883c <MX_TIM11_Init+0x94>)
 800882e:	f000 f921 	bl	8008a74 <HAL_TIM_MspPostInit>

}
 8008832:	bf00      	nop
 8008834:	3720      	adds	r7, #32
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20000834 	.word	0x20000834
 8008840:	40014800 	.word	0x40014800

08008844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a34      	ldr	r2, [pc, #208]	; (8008924 <HAL_TIM_Base_MspInit+0xe0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d116      	bne.n	8008884 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	4b33      	ldr	r3, [pc, #204]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 800885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885e:	4a32      	ldr	r2, [pc, #200]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	6453      	str	r3, [r2, #68]	; 0x44
 8008866:	4b30      	ldr	r3, [pc, #192]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8008872:	2200      	movs	r2, #0
 8008874:	2101      	movs	r1, #1
 8008876:	2018      	movs	r0, #24
 8008878:	f7f9 f99d 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800887c:	2018      	movs	r0, #24
 800887e:	f7f9 f9b6 	bl	8001bee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8008882:	e04a      	b.n	800891a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888c:	d116      	bne.n	80088bc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	4b25      	ldr	r3, [pc, #148]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	4a24      	ldr	r2, [pc, #144]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008898:	f043 0301 	orr.w	r3, r3, #1
 800889c:	6413      	str	r3, [r2, #64]	; 0x40
 800889e:	4b22      	ldr	r3, [pc, #136]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	613b      	str	r3, [r7, #16]
 80088a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2102      	movs	r1, #2
 80088ae:	201c      	movs	r0, #28
 80088b0:	f7f9 f981 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80088b4:	201c      	movs	r0, #28
 80088b6:	f7f9 f99a 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 80088ba:	e02e      	b.n	800891a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_TIM_Base_MspInit+0xe8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d116      	bne.n	80088f4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	4b17      	ldr	r3, [pc, #92]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	4a16      	ldr	r2, [pc, #88]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 80088d0:	f043 0310 	orr.w	r3, r3, #16
 80088d4:	6413      	str	r3, [r2, #64]	; 0x40
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f003 0310 	and.w	r3, r3, #16
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80088e2:	2200      	movs	r2, #0
 80088e4:	2103      	movs	r1, #3
 80088e6:	2036      	movs	r0, #54	; 0x36
 80088e8:	f7f9 f965 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80088ec:	2036      	movs	r0, #54	; 0x36
 80088ee:	f7f9 f97e 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 80088f2:	e012      	b.n	800891a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a0d      	ldr	r2, [pc, #52]	; (8008930 <HAL_TIM_Base_MspInit+0xec>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d10d      	bne.n	800891a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80088fe:	2300      	movs	r3, #0
 8008900:	60bb      	str	r3, [r7, #8]
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	4a08      	ldr	r2, [pc, #32]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800890c:	6453      	str	r3, [r2, #68]	; 0x44
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <HAL_TIM_Base_MspInit+0xe4>)
 8008910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008916:	60bb      	str	r3, [r7, #8]
 8008918:	68bb      	ldr	r3, [r7, #8]
}
 800891a:	bf00      	nop
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	40010000 	.word	0x40010000
 8008928:	40023800 	.word	0x40023800
 800892c:	40001000 	.word	0x40001000
 8008930:	40014800 	.word	0x40014800

08008934 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08c      	sub	sp, #48	; 0x30
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800893c:	f107 031c 	add.w	r3, r7, #28
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	605a      	str	r2, [r3, #4]
 8008946:	609a      	str	r2, [r3, #8]
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a32      	ldr	r2, [pc, #200]	; (8008a1c <HAL_TIM_Encoder_MspInit+0xe8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d12c      	bne.n	80089b0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008956:	2300      	movs	r3, #0
 8008958:	61bb      	str	r3, [r7, #24]
 800895a:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	4a30      	ldr	r2, [pc, #192]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 8008960:	f043 0302 	orr.w	r3, r3, #2
 8008964:	6413      	str	r3, [r2, #64]	; 0x40
 8008966:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	61bb      	str	r3, [r7, #24]
 8008970:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	4b2a      	ldr	r3, [pc, #168]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	4a29      	ldr	r2, [pc, #164]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 800897c:	f043 0304 	orr.w	r3, r3, #4
 8008980:	6313      	str	r3, [r2, #48]	; 0x30
 8008982:	4b27      	ldr	r3, [pc, #156]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_L_CH__Pin|ENCODER_L_CH2_Pin;
 800898e:	23c0      	movs	r3, #192	; 0xc0
 8008990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008992:	2302      	movs	r3, #2
 8008994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008996:	2300      	movs	r3, #0
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800899a:	2300      	movs	r3, #0
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800899e:	2302      	movs	r3, #2
 80089a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089a2:	f107 031c 	add.w	r3, r7, #28
 80089a6:	4619      	mov	r1, r3
 80089a8:	481e      	ldr	r0, [pc, #120]	; (8008a24 <HAL_TIM_Encoder_MspInit+0xf0>)
 80089aa:	f7f9 f93b 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80089ae:	e030      	b.n	8008a12 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <HAL_TIM_Encoder_MspInit+0xf4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d12b      	bne.n	8008a12 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	4a17      	ldr	r2, [pc, #92]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 80089c4:	f043 0304 	orr.w	r3, r3, #4
 80089c8:	6413      	str	r3, [r2, #64]	; 0x40
 80089ca:	4b15      	ldr	r3, [pc, #84]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	4b11      	ldr	r3, [pc, #68]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	4a10      	ldr	r2, [pc, #64]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	6313      	str	r3, [r2, #48]	; 0x30
 80089e6:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <HAL_TIM_Encoder_MspInit+0xec>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 80089f2:	23c0      	movs	r3, #192	; 0xc0
 80089f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f6:	2302      	movs	r3, #2
 80089f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089fe:	2300      	movs	r3, #0
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008a02:	2302      	movs	r3, #2
 8008a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a06:	f107 031c 	add.w	r3, r7, #28
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4807      	ldr	r0, [pc, #28]	; (8008a2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8008a0e:	f7f9 f909 	bl	8001c24 <HAL_GPIO_Init>
}
 8008a12:	bf00      	nop
 8008a14:	3730      	adds	r7, #48	; 0x30
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40000400 	.word	0x40000400
 8008a20:	40023800 	.word	0x40023800
 8008a24:	40020800 	.word	0x40020800
 8008a28:	40000800 	.word	0x40000800
 8008a2c:	40020400 	.word	0x40020400

08008a30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a0b      	ldr	r2, [pc, #44]	; (8008a6c <HAL_TIM_PWM_MspInit+0x3c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d10d      	bne.n	8008a5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <HAL_TIM_PWM_MspInit+0x40>)
 8008a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4a:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <HAL_TIM_PWM_MspInit+0x40>)
 8008a4c:	f043 0302 	orr.w	r3, r3, #2
 8008a50:	6453      	str	r3, [r2, #68]	; 0x44
 8008a52:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <HAL_TIM_PWM_MspInit+0x40>)
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010400 	.word	0x40010400
 8008a70:	40023800 	.word	0x40023800

08008a74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08c      	sub	sp, #48	; 0x30
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a7c:	f107 031c 	add.w	r3, r7, #28
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	609a      	str	r2, [r3, #8]
 8008a88:	60da      	str	r2, [r3, #12]
 8008a8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a49      	ldr	r2, [pc, #292]	; (8008bb8 <HAL_TIM_MspPostInit+0x144>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d11f      	bne.n	8008ad6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
 8008a9a:	4b48      	ldr	r3, [pc, #288]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9e:	4a47      	ldr	r2, [pc, #284]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008aa0:	f043 0301 	orr.w	r3, r3, #1
 8008aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8008aa6:	4b45      	ldr	r3, [pc, #276]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	61bb      	str	r3, [r7, #24]
 8008ab0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = MOTOR_L_PWM_Pin;
 8008ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8008ac8:	f107 031c 	add.w	r3, r7, #28
 8008acc:	4619      	mov	r1, r3
 8008ace:	483c      	ldr	r0, [pc, #240]	; (8008bc0 <HAL_TIM_MspPostInit+0x14c>)
 8008ad0:	f7f9 f8a8 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8008ad4:	e06c      	b.n	8008bb0 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM2)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ade:	d11e      	bne.n	8008b1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	4b35      	ldr	r3, [pc, #212]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	4a34      	ldr	r2, [pc, #208]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008aea:	f043 0302 	orr.w	r3, r3, #2
 8008aee:	6313      	str	r3, [r2, #48]	; 0x30
 8008af0:	4b32      	ldr	r3, [pc, #200]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR_R_PWM_Pin;
 8008afc:	2308      	movs	r3, #8
 8008afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b00:	2302      	movs	r3, #2
 8008b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b04:	2300      	movs	r3, #0
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTOR_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8008b10:	f107 031c 	add.w	r3, r7, #28
 8008b14:	4619      	mov	r1, r3
 8008b16:	482b      	ldr	r0, [pc, #172]	; (8008bc4 <HAL_TIM_MspPostInit+0x150>)
 8008b18:	f7f9 f884 	bl	8001c24 <HAL_GPIO_Init>
}
 8008b1c:	e048      	b.n	8008bb0 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a29      	ldr	r2, [pc, #164]	; (8008bc8 <HAL_TIM_MspPostInit+0x154>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d11f      	bne.n	8008b68 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
 8008b2c:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	4a22      	ldr	r2, [pc, #136]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008b32:	f043 0304 	orr.w	r3, r3, #4
 8008b36:	6313      	str	r3, [r2, #48]	; 0x30
 8008b38:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8008b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b52:	2300      	movs	r3, #0
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008b56:	2303      	movs	r3, #3
 8008b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8008b5a:	f107 031c 	add.w	r3, r7, #28
 8008b5e:	4619      	mov	r1, r3
 8008b60:	481a      	ldr	r0, [pc, #104]	; (8008bcc <HAL_TIM_MspPostInit+0x158>)
 8008b62:	f7f9 f85f 	bl	8001c24 <HAL_GPIO_Init>
}
 8008b66:	e023      	b.n	8008bb0 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a18      	ldr	r2, [pc, #96]	; (8008bd0 <HAL_TIM_MspPostInit+0x15c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d11e      	bne.n	8008bb0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	4a10      	ldr	r2, [pc, #64]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008b7c:	f043 0302 	orr.w	r3, r3, #2
 8008b80:	6313      	str	r3, [r2, #48]	; 0x30
 8008b82:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <HAL_TIM_MspPostInit+0x148>)
 8008b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FUN_Pin;
 8008b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b94:	2302      	movs	r3, #2
 8008b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FUN_GPIO_Port, &GPIO_InitStruct);
 8008ba4:	f107 031c 	add.w	r3, r7, #28
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4806      	ldr	r0, [pc, #24]	; (8008bc4 <HAL_TIM_MspPostInit+0x150>)
 8008bac:	f7f9 f83a 	bl	8001c24 <HAL_GPIO_Init>
}
 8008bb0:	bf00      	nop
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	40010000 	.word	0x40010000
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	40020000 	.word	0x40020000
 8008bc4:	40020400 	.word	0x40020400
 8008bc8:	40010400 	.word	0x40010400
 8008bcc:	40020800 	.word	0x40020800
 8008bd0:	40014800 	.word	0x40014800

08008bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008bd8:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008bda:	4a12      	ldr	r2, [pc, #72]	; (8008c24 <MX_USART1_UART_Init+0x50>)
 8008bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008bde:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bec:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008bf2:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008bfa:	220c      	movs	r2, #12
 8008bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bfe:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c0a:	4805      	ldr	r0, [pc, #20]	; (8008c20 <MX_USART1_UART_Init+0x4c>)
 8008c0c:	f7fb f946 	bl	8003e9c <HAL_UART_Init>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c16:	f7ff f92f 	bl	8007e78 <Error_Handler>
  }

}
 8008c1a:	bf00      	nop
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000934 	.word	0x20000934
 8008c24:	40011000 	.word	0x40011000

08008c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	605a      	str	r2, [r3, #4]
 8008c3a:	609a      	str	r2, [r3, #8]
 8008c3c:	60da      	str	r2, [r3, #12]
 8008c3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a19      	ldr	r2, [pc, #100]	; (8008cac <HAL_UART_MspInit+0x84>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d12c      	bne.n	8008ca4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <HAL_UART_MspInit+0x88>)
 8008c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c52:	4a17      	ldr	r2, [pc, #92]	; (8008cb0 <HAL_UART_MspInit+0x88>)
 8008c54:	f043 0310 	orr.w	r3, r3, #16
 8008c58:	6453      	str	r3, [r2, #68]	; 0x44
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <HAL_UART_MspInit+0x88>)
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <HAL_UART_MspInit+0x88>)
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	4a10      	ldr	r2, [pc, #64]	; (8008cb0 <HAL_UART_MspInit+0x88>)
 8008c70:	f043 0301 	orr.w	r3, r3, #1
 8008c74:	6313      	str	r3, [r2, #48]	; 0x30
 8008c76:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <HAL_UART_MspInit+0x88>)
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c90:	2303      	movs	r3, #3
 8008c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008c94:	2307      	movs	r3, #7
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <HAL_UART_MspInit+0x8c>)
 8008ca0:	f7f8 ffc0 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008ca4:	bf00      	nop
 8008ca6:	3728      	adds	r7, #40	; 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	40011000 	.word	0x40011000
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	40020000 	.word	0x40020000

08008cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008cbe:	e003      	b.n	8008cc8 <LoopCopyDataInit>

08008cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	; (8008cf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008cc6:	3104      	adds	r1, #4

08008cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008cc8:	480b      	ldr	r0, [pc, #44]	; (8008cf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008cca:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008cd0:	d3f6      	bcc.n	8008cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8008cd2:	4a0b      	ldr	r2, [pc, #44]	; (8008d00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008cd4:	e002      	b.n	8008cdc <LoopFillZerobss>

08008cd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008cd8:	f842 3b04 	str.w	r3, [r2], #4

08008cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008ce0:	d3f9      	bcc.n	8008cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008ce2:	f7ff fab3 	bl	800824c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ce6:	f000 f817 	bl	8008d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cea:	f7ff f82f 	bl	8007d4c <main>
  bx  lr    
 8008cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008cf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008cf4:	0800baa0 	.word	0x0800baa0
  ldr  r0, =_sdata
 8008cf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008cfc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008d00:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008d04:	20000978 	.word	0x20000978

08008d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d08:	e7fe      	b.n	8008d08 <ADC_IRQHandler>
	...

08008d0c <__errno>:
 8008d0c:	4b01      	ldr	r3, [pc, #4]	; (8008d14 <__errno+0x8>)
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	2000000c 	.word	0x2000000c

08008d18 <__libc_init_array>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	4e0d      	ldr	r6, [pc, #52]	; (8008d50 <__libc_init_array+0x38>)
 8008d1c:	4c0d      	ldr	r4, [pc, #52]	; (8008d54 <__libc_init_array+0x3c>)
 8008d1e:	1ba4      	subs	r4, r4, r6
 8008d20:	10a4      	asrs	r4, r4, #2
 8008d22:	2500      	movs	r5, #0
 8008d24:	42a5      	cmp	r5, r4
 8008d26:	d109      	bne.n	8008d3c <__libc_init_array+0x24>
 8008d28:	4e0b      	ldr	r6, [pc, #44]	; (8008d58 <__libc_init_array+0x40>)
 8008d2a:	4c0c      	ldr	r4, [pc, #48]	; (8008d5c <__libc_init_array+0x44>)
 8008d2c:	f002 fc62 	bl	800b5f4 <_init>
 8008d30:	1ba4      	subs	r4, r4, r6
 8008d32:	10a4      	asrs	r4, r4, #2
 8008d34:	2500      	movs	r5, #0
 8008d36:	42a5      	cmp	r5, r4
 8008d38:	d105      	bne.n	8008d46 <__libc_init_array+0x2e>
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d40:	4798      	blx	r3
 8008d42:	3501      	adds	r5, #1
 8008d44:	e7ee      	b.n	8008d24 <__libc_init_array+0xc>
 8008d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d4a:	4798      	blx	r3
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	e7f2      	b.n	8008d36 <__libc_init_array+0x1e>
 8008d50:	0800ba98 	.word	0x0800ba98
 8008d54:	0800ba98 	.word	0x0800ba98
 8008d58:	0800ba98 	.word	0x0800ba98
 8008d5c:	0800ba9c 	.word	0x0800ba9c

08008d60 <memset>:
 8008d60:	4402      	add	r2, r0
 8008d62:	4603      	mov	r3, r0
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d100      	bne.n	8008d6a <memset+0xa>
 8008d68:	4770      	bx	lr
 8008d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6e:	e7f9      	b.n	8008d64 <memset+0x4>

08008d70 <__cvt>:
 8008d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	ec55 4b10 	vmov	r4, r5, d0
 8008d78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008d7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d7e:	2d00      	cmp	r5, #0
 8008d80:	460e      	mov	r6, r1
 8008d82:	4691      	mov	r9, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	bfb8      	it	lt
 8008d88:	4622      	movlt	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	f027 0720 	bic.w	r7, r7, #32
 8008d90:	bfbb      	ittet	lt
 8008d92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d96:	461d      	movlt	r5, r3
 8008d98:	2300      	movge	r3, #0
 8008d9a:	232d      	movlt	r3, #45	; 0x2d
 8008d9c:	bfb8      	it	lt
 8008d9e:	4614      	movlt	r4, r2
 8008da0:	2f46      	cmp	r7, #70	; 0x46
 8008da2:	700b      	strb	r3, [r1, #0]
 8008da4:	d004      	beq.n	8008db0 <__cvt+0x40>
 8008da6:	2f45      	cmp	r7, #69	; 0x45
 8008da8:	d100      	bne.n	8008dac <__cvt+0x3c>
 8008daa:	3601      	adds	r6, #1
 8008dac:	2102      	movs	r1, #2
 8008dae:	e000      	b.n	8008db2 <__cvt+0x42>
 8008db0:	2103      	movs	r1, #3
 8008db2:	ab03      	add	r3, sp, #12
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	ab02      	add	r3, sp, #8
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	4632      	mov	r2, r6
 8008dbc:	4653      	mov	r3, sl
 8008dbe:	ec45 4b10 	vmov	d0, r4, r5
 8008dc2:	f000 feb1 	bl	8009b28 <_dtoa_r>
 8008dc6:	2f47      	cmp	r7, #71	; 0x47
 8008dc8:	4680      	mov	r8, r0
 8008dca:	d102      	bne.n	8008dd2 <__cvt+0x62>
 8008dcc:	f019 0f01 	tst.w	r9, #1
 8008dd0:	d026      	beq.n	8008e20 <__cvt+0xb0>
 8008dd2:	2f46      	cmp	r7, #70	; 0x46
 8008dd4:	eb08 0906 	add.w	r9, r8, r6
 8008dd8:	d111      	bne.n	8008dfe <__cvt+0x8e>
 8008dda:	f898 3000 	ldrb.w	r3, [r8]
 8008dde:	2b30      	cmp	r3, #48	; 0x30
 8008de0:	d10a      	bne.n	8008df8 <__cvt+0x88>
 8008de2:	2200      	movs	r2, #0
 8008de4:	2300      	movs	r3, #0
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dee:	b918      	cbnz	r0, 8008df8 <__cvt+0x88>
 8008df0:	f1c6 0601 	rsb	r6, r6, #1
 8008df4:	f8ca 6000 	str.w	r6, [sl]
 8008df8:	f8da 3000 	ldr.w	r3, [sl]
 8008dfc:	4499      	add	r9, r3
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2300      	movs	r3, #0
 8008e02:	4620      	mov	r0, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7f7 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e0a:	b938      	cbnz	r0, 8008e1c <__cvt+0xac>
 8008e0c:	2230      	movs	r2, #48	; 0x30
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	454b      	cmp	r3, r9
 8008e12:	d205      	bcs.n	8008e20 <__cvt+0xb0>
 8008e14:	1c59      	adds	r1, r3, #1
 8008e16:	9103      	str	r1, [sp, #12]
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	e7f8      	b.n	8008e0e <__cvt+0x9e>
 8008e1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e24:	eba3 0308 	sub.w	r3, r3, r8
 8008e28:	4640      	mov	r0, r8
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	b004      	add	sp, #16
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e32 <__exponent>:
 8008e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e34:	2900      	cmp	r1, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	bfba      	itte	lt
 8008e3a:	4249      	neglt	r1, r1
 8008e3c:	232d      	movlt	r3, #45	; 0x2d
 8008e3e:	232b      	movge	r3, #43	; 0x2b
 8008e40:	2909      	cmp	r1, #9
 8008e42:	f804 2b02 	strb.w	r2, [r4], #2
 8008e46:	7043      	strb	r3, [r0, #1]
 8008e48:	dd20      	ble.n	8008e8c <__exponent+0x5a>
 8008e4a:	f10d 0307 	add.w	r3, sp, #7
 8008e4e:	461f      	mov	r7, r3
 8008e50:	260a      	movs	r6, #10
 8008e52:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e56:	fb06 1115 	mls	r1, r6, r5, r1
 8008e5a:	3130      	adds	r1, #48	; 0x30
 8008e5c:	2d09      	cmp	r5, #9
 8008e5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e62:	f103 32ff 	add.w	r2, r3, #4294967295
 8008e66:	4629      	mov	r1, r5
 8008e68:	dc09      	bgt.n	8008e7e <__exponent+0x4c>
 8008e6a:	3130      	adds	r1, #48	; 0x30
 8008e6c:	3b02      	subs	r3, #2
 8008e6e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e72:	42bb      	cmp	r3, r7
 8008e74:	4622      	mov	r2, r4
 8008e76:	d304      	bcc.n	8008e82 <__exponent+0x50>
 8008e78:	1a10      	subs	r0, r2, r0
 8008e7a:	b003      	add	sp, #12
 8008e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e7e:	4613      	mov	r3, r2
 8008e80:	e7e7      	b.n	8008e52 <__exponent+0x20>
 8008e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e86:	f804 2b01 	strb.w	r2, [r4], #1
 8008e8a:	e7f2      	b.n	8008e72 <__exponent+0x40>
 8008e8c:	2330      	movs	r3, #48	; 0x30
 8008e8e:	4419      	add	r1, r3
 8008e90:	7083      	strb	r3, [r0, #2]
 8008e92:	1d02      	adds	r2, r0, #4
 8008e94:	70c1      	strb	r1, [r0, #3]
 8008e96:	e7ef      	b.n	8008e78 <__exponent+0x46>

08008e98 <_printf_float>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	b08d      	sub	sp, #52	; 0x34
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008ea4:	4616      	mov	r6, r2
 8008ea6:	461f      	mov	r7, r3
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	f001 fd6f 	bl	800a98c <_localeconv_r>
 8008eae:	6803      	ldr	r3, [r0, #0]
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f7 f98c 	bl	80001d0 <strlen>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	930a      	str	r3, [sp, #40]	; 0x28
 8008ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ec0:	9005      	str	r0, [sp, #20]
 8008ec2:	3307      	adds	r3, #7
 8008ec4:	f023 0307 	bic.w	r3, r3, #7
 8008ec8:	f103 0208 	add.w	r2, r3, #8
 8008ecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ed4:	f8c8 2000 	str.w	r2, [r8]
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ee0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ee4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	f8cd 8018 	str.w	r8, [sp, #24]
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	4ba7      	ldr	r3, [pc, #668]	; (8009190 <_printf_float+0x2f8>)
 8008ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ef8:	f7f7 fe18 	bl	8000b2c <__aeabi_dcmpun>
 8008efc:	bb70      	cbnz	r0, 8008f5c <_printf_float+0xc4>
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	4ba3      	ldr	r3, [pc, #652]	; (8009190 <_printf_float+0x2f8>)
 8008f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f08:	f7f7 fdf2 	bl	8000af0 <__aeabi_dcmple>
 8008f0c:	bb30      	cbnz	r0, 8008f5c <_printf_float+0xc4>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2300      	movs	r3, #0
 8008f12:	4640      	mov	r0, r8
 8008f14:	4649      	mov	r1, r9
 8008f16:	f7f7 fde1 	bl	8000adc <__aeabi_dcmplt>
 8008f1a:	b110      	cbz	r0, 8008f22 <_printf_float+0x8a>
 8008f1c:	232d      	movs	r3, #45	; 0x2d
 8008f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f22:	4a9c      	ldr	r2, [pc, #624]	; (8009194 <_printf_float+0x2fc>)
 8008f24:	4b9c      	ldr	r3, [pc, #624]	; (8009198 <_printf_float+0x300>)
 8008f26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008f2a:	bf8c      	ite	hi
 8008f2c:	4690      	movhi	r8, r2
 8008f2e:	4698      	movls	r8, r3
 8008f30:	2303      	movs	r3, #3
 8008f32:	f02b 0204 	bic.w	r2, fp, #4
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	6022      	str	r2, [r4, #0]
 8008f3a:	f04f 0900 	mov.w	r9, #0
 8008f3e:	9700      	str	r7, [sp, #0]
 8008f40:	4633      	mov	r3, r6
 8008f42:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f44:	4621      	mov	r1, r4
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 f9e6 	bl	8009318 <_printf_common>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f040 808d 	bne.w	800906c <_printf_float+0x1d4>
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295
 8008f56:	b00d      	add	sp, #52	; 0x34
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	4640      	mov	r0, r8
 8008f62:	4649      	mov	r1, r9
 8008f64:	f7f7 fde2 	bl	8000b2c <__aeabi_dcmpun>
 8008f68:	b110      	cbz	r0, 8008f70 <_printf_float+0xd8>
 8008f6a:	4a8c      	ldr	r2, [pc, #560]	; (800919c <_printf_float+0x304>)
 8008f6c:	4b8c      	ldr	r3, [pc, #560]	; (80091a0 <_printf_float+0x308>)
 8008f6e:	e7da      	b.n	8008f26 <_printf_float+0x8e>
 8008f70:	6861      	ldr	r1, [r4, #4]
 8008f72:	1c4b      	adds	r3, r1, #1
 8008f74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008f78:	a80a      	add	r0, sp, #40	; 0x28
 8008f7a:	d13e      	bne.n	8008ffa <_printf_float+0x162>
 8008f7c:	2306      	movs	r3, #6
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	2300      	movs	r3, #0
 8008f82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008f86:	ab09      	add	r3, sp, #36	; 0x24
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	ec49 8b10 	vmov	d0, r8, r9
 8008f8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	f8cd a004 	str.w	sl, [sp, #4]
 8008f98:	6861      	ldr	r1, [r4, #4]
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7ff fee8 	bl	8008d70 <__cvt>
 8008fa0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008fa4:	2b47      	cmp	r3, #71	; 0x47
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	d109      	bne.n	8008fbe <_printf_float+0x126>
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fac:	1cd8      	adds	r0, r3, #3
 8008fae:	db02      	blt.n	8008fb6 <_printf_float+0x11e>
 8008fb0:	6862      	ldr	r2, [r4, #4]
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	dd47      	ble.n	8009046 <_printf_float+0x1ae>
 8008fb6:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fba:	fa5f fa8a 	uxtb.w	sl, sl
 8008fbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008fc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fc4:	d824      	bhi.n	8009010 <_printf_float+0x178>
 8008fc6:	3901      	subs	r1, #1
 8008fc8:	4652      	mov	r2, sl
 8008fca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fce:	9109      	str	r1, [sp, #36]	; 0x24
 8008fd0:	f7ff ff2f 	bl	8008e32 <__exponent>
 8008fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd6:	1813      	adds	r3, r2, r0
 8008fd8:	2a01      	cmp	r2, #1
 8008fda:	4681      	mov	r9, r0
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	dc02      	bgt.n	8008fe6 <_printf_float+0x14e>
 8008fe0:	6822      	ldr	r2, [r4, #0]
 8008fe2:	07d1      	lsls	r1, r2, #31
 8008fe4:	d501      	bpl.n	8008fea <_printf_float+0x152>
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0a5      	beq.n	8008f3e <_printf_float+0xa6>
 8008ff2:	232d      	movs	r3, #45	; 0x2d
 8008ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff8:	e7a1      	b.n	8008f3e <_printf_float+0xa6>
 8008ffa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008ffe:	f000 8177 	beq.w	80092f0 <_printf_float+0x458>
 8009002:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009006:	d1bb      	bne.n	8008f80 <_printf_float+0xe8>
 8009008:	2900      	cmp	r1, #0
 800900a:	d1b9      	bne.n	8008f80 <_printf_float+0xe8>
 800900c:	2301      	movs	r3, #1
 800900e:	e7b6      	b.n	8008f7e <_printf_float+0xe6>
 8009010:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009014:	d119      	bne.n	800904a <_printf_float+0x1b2>
 8009016:	2900      	cmp	r1, #0
 8009018:	6863      	ldr	r3, [r4, #4]
 800901a:	dd0c      	ble.n	8009036 <_printf_float+0x19e>
 800901c:	6121      	str	r1, [r4, #16]
 800901e:	b913      	cbnz	r3, 8009026 <_printf_float+0x18e>
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	07d2      	lsls	r2, r2, #31
 8009024:	d502      	bpl.n	800902c <_printf_float+0x194>
 8009026:	3301      	adds	r3, #1
 8009028:	440b      	add	r3, r1
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	e7d9      	b.n	8008fea <_printf_float+0x152>
 8009036:	b913      	cbnz	r3, 800903e <_printf_float+0x1a6>
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	07d0      	lsls	r0, r2, #31
 800903c:	d501      	bpl.n	8009042 <_printf_float+0x1aa>
 800903e:	3302      	adds	r3, #2
 8009040:	e7f3      	b.n	800902a <_printf_float+0x192>
 8009042:	2301      	movs	r3, #1
 8009044:	e7f1      	b.n	800902a <_printf_float+0x192>
 8009046:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800904a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800904e:	4293      	cmp	r3, r2
 8009050:	db05      	blt.n	800905e <_printf_float+0x1c6>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	6123      	str	r3, [r4, #16]
 8009056:	07d1      	lsls	r1, r2, #31
 8009058:	d5e8      	bpl.n	800902c <_printf_float+0x194>
 800905a:	3301      	adds	r3, #1
 800905c:	e7e5      	b.n	800902a <_printf_float+0x192>
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfd4      	ite	le
 8009062:	f1c3 0302 	rsble	r3, r3, #2
 8009066:	2301      	movgt	r3, #1
 8009068:	4413      	add	r3, r2
 800906a:	e7de      	b.n	800902a <_printf_float+0x192>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	055a      	lsls	r2, r3, #21
 8009070:	d407      	bmi.n	8009082 <_printf_float+0x1ea>
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	4642      	mov	r2, r8
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	d12b      	bne.n	80090d8 <_printf_float+0x240>
 8009080:	e767      	b.n	8008f52 <_printf_float+0xba>
 8009082:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009086:	f240 80dc 	bls.w	8009242 <_printf_float+0x3aa>
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009092:	f7f7 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8009096:	2800      	cmp	r0, #0
 8009098:	d033      	beq.n	8009102 <_printf_float+0x26a>
 800909a:	2301      	movs	r3, #1
 800909c:	4a41      	ldr	r2, [pc, #260]	; (80091a4 <_printf_float+0x30c>)
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	f43f af54 	beq.w	8008f52 <_printf_float+0xba>
 80090aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ae:	429a      	cmp	r2, r3
 80090b0:	db02      	blt.n	80090b8 <_printf_float+0x220>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	07d8      	lsls	r0, r3, #31
 80090b6:	d50f      	bpl.n	80090d8 <_printf_float+0x240>
 80090b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090bc:	4631      	mov	r1, r6
 80090be:	4628      	mov	r0, r5
 80090c0:	47b8      	blx	r7
 80090c2:	3001      	adds	r0, #1
 80090c4:	f43f af45 	beq.w	8008f52 <_printf_float+0xba>
 80090c8:	f04f 0800 	mov.w	r8, #0
 80090cc:	f104 091a 	add.w	r9, r4, #26
 80090d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d2:	3b01      	subs	r3, #1
 80090d4:	4543      	cmp	r3, r8
 80090d6:	dc09      	bgt.n	80090ec <_printf_float+0x254>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	079b      	lsls	r3, r3, #30
 80090dc:	f100 8103 	bmi.w	80092e6 <_printf_float+0x44e>
 80090e0:	68e0      	ldr	r0, [r4, #12]
 80090e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e4:	4298      	cmp	r0, r3
 80090e6:	bfb8      	it	lt
 80090e8:	4618      	movlt	r0, r3
 80090ea:	e734      	b.n	8008f56 <_printf_float+0xbe>
 80090ec:	2301      	movs	r3, #1
 80090ee:	464a      	mov	r2, r9
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b8      	blx	r7
 80090f6:	3001      	adds	r0, #1
 80090f8:	f43f af2b 	beq.w	8008f52 <_printf_float+0xba>
 80090fc:	f108 0801 	add.w	r8, r8, #1
 8009100:	e7e6      	b.n	80090d0 <_printf_float+0x238>
 8009102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009104:	2b00      	cmp	r3, #0
 8009106:	dc2b      	bgt.n	8009160 <_printf_float+0x2c8>
 8009108:	2301      	movs	r3, #1
 800910a:	4a26      	ldr	r2, [pc, #152]	; (80091a4 <_printf_float+0x30c>)
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f af1d 	beq.w	8008f52 <_printf_float+0xba>
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	b923      	cbnz	r3, 8009126 <_printf_float+0x28e>
 800911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911e:	b913      	cbnz	r3, 8009126 <_printf_float+0x28e>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	07d9      	lsls	r1, r3, #31
 8009124:	d5d8      	bpl.n	80090d8 <_printf_float+0x240>
 8009126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800912a:	4631      	mov	r1, r6
 800912c:	4628      	mov	r0, r5
 800912e:	47b8      	blx	r7
 8009130:	3001      	adds	r0, #1
 8009132:	f43f af0e 	beq.w	8008f52 <_printf_float+0xba>
 8009136:	f04f 0900 	mov.w	r9, #0
 800913a:	f104 0a1a 	add.w	sl, r4, #26
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	425b      	negs	r3, r3
 8009142:	454b      	cmp	r3, r9
 8009144:	dc01      	bgt.n	800914a <_printf_float+0x2b2>
 8009146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009148:	e794      	b.n	8009074 <_printf_float+0x1dc>
 800914a:	2301      	movs	r3, #1
 800914c:	4652      	mov	r2, sl
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f aefc 	beq.w	8008f52 <_printf_float+0xba>
 800915a:	f109 0901 	add.w	r9, r9, #1
 800915e:	e7ee      	b.n	800913e <_printf_float+0x2a6>
 8009160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009164:	429a      	cmp	r2, r3
 8009166:	bfa8      	it	ge
 8009168:	461a      	movge	r2, r3
 800916a:	2a00      	cmp	r2, #0
 800916c:	4691      	mov	r9, r2
 800916e:	dd07      	ble.n	8009180 <_printf_float+0x2e8>
 8009170:	4613      	mov	r3, r2
 8009172:	4631      	mov	r1, r6
 8009174:	4642      	mov	r2, r8
 8009176:	4628      	mov	r0, r5
 8009178:	47b8      	blx	r7
 800917a:	3001      	adds	r0, #1
 800917c:	f43f aee9 	beq.w	8008f52 <_printf_float+0xba>
 8009180:	f104 031a 	add.w	r3, r4, #26
 8009184:	f04f 0b00 	mov.w	fp, #0
 8009188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800918c:	9306      	str	r3, [sp, #24]
 800918e:	e015      	b.n	80091bc <_printf_float+0x324>
 8009190:	7fefffff 	.word	0x7fefffff
 8009194:	0800b7d8 	.word	0x0800b7d8
 8009198:	0800b7d4 	.word	0x0800b7d4
 800919c:	0800b7e0 	.word	0x0800b7e0
 80091a0:	0800b7dc 	.word	0x0800b7dc
 80091a4:	0800b7e4 	.word	0x0800b7e4
 80091a8:	2301      	movs	r3, #1
 80091aa:	9a06      	ldr	r2, [sp, #24]
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	f43f aecd 	beq.w	8008f52 <_printf_float+0xba>
 80091b8:	f10b 0b01 	add.w	fp, fp, #1
 80091bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091c0:	ebaa 0309 	sub.w	r3, sl, r9
 80091c4:	455b      	cmp	r3, fp
 80091c6:	dcef      	bgt.n	80091a8 <_printf_float+0x310>
 80091c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091cc:	429a      	cmp	r2, r3
 80091ce:	44d0      	add	r8, sl
 80091d0:	db15      	blt.n	80091fe <_printf_float+0x366>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	07da      	lsls	r2, r3, #31
 80091d6:	d412      	bmi.n	80091fe <_printf_float+0x366>
 80091d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091dc:	eba3 020a 	sub.w	r2, r3, sl
 80091e0:	eba3 0a01 	sub.w	sl, r3, r1
 80091e4:	4592      	cmp	sl, r2
 80091e6:	bfa8      	it	ge
 80091e8:	4692      	movge	sl, r2
 80091ea:	f1ba 0f00 	cmp.w	sl, #0
 80091ee:	dc0e      	bgt.n	800920e <_printf_float+0x376>
 80091f0:	f04f 0800 	mov.w	r8, #0
 80091f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091f8:	f104 091a 	add.w	r9, r4, #26
 80091fc:	e019      	b.n	8009232 <_printf_float+0x39a>
 80091fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	d1e5      	bne.n	80091d8 <_printf_float+0x340>
 800920c:	e6a1      	b.n	8008f52 <_printf_float+0xba>
 800920e:	4653      	mov	r3, sl
 8009210:	4642      	mov	r2, r8
 8009212:	4631      	mov	r1, r6
 8009214:	4628      	mov	r0, r5
 8009216:	47b8      	blx	r7
 8009218:	3001      	adds	r0, #1
 800921a:	d1e9      	bne.n	80091f0 <_printf_float+0x358>
 800921c:	e699      	b.n	8008f52 <_printf_float+0xba>
 800921e:	2301      	movs	r3, #1
 8009220:	464a      	mov	r2, r9
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	f43f ae92 	beq.w	8008f52 <_printf_float+0xba>
 800922e:	f108 0801 	add.w	r8, r8, #1
 8009232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	eba3 030a 	sub.w	r3, r3, sl
 800923c:	4543      	cmp	r3, r8
 800923e:	dcee      	bgt.n	800921e <_printf_float+0x386>
 8009240:	e74a      	b.n	80090d8 <_printf_float+0x240>
 8009242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009244:	2a01      	cmp	r2, #1
 8009246:	dc01      	bgt.n	800924c <_printf_float+0x3b4>
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	d53a      	bpl.n	80092c2 <_printf_float+0x42a>
 800924c:	2301      	movs	r3, #1
 800924e:	4642      	mov	r2, r8
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	f43f ae7b 	beq.w	8008f52 <_printf_float+0xba>
 800925c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009260:	4631      	mov	r1, r6
 8009262:	4628      	mov	r0, r5
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	f108 0801 	add.w	r8, r8, #1
 800926c:	f43f ae71 	beq.w	8008f52 <_printf_float+0xba>
 8009270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009272:	2200      	movs	r2, #0
 8009274:	f103 3aff 	add.w	sl, r3, #4294967295
 8009278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800927c:	2300      	movs	r3, #0
 800927e:	f7f7 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8009282:	b9c8      	cbnz	r0, 80092b8 <_printf_float+0x420>
 8009284:	4653      	mov	r3, sl
 8009286:	4642      	mov	r2, r8
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	d10e      	bne.n	80092b0 <_printf_float+0x418>
 8009292:	e65e      	b.n	8008f52 <_printf_float+0xba>
 8009294:	2301      	movs	r3, #1
 8009296:	4652      	mov	r2, sl
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	47b8      	blx	r7
 800929e:	3001      	adds	r0, #1
 80092a0:	f43f ae57 	beq.w	8008f52 <_printf_float+0xba>
 80092a4:	f108 0801 	add.w	r8, r8, #1
 80092a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092aa:	3b01      	subs	r3, #1
 80092ac:	4543      	cmp	r3, r8
 80092ae:	dcf1      	bgt.n	8009294 <_printf_float+0x3fc>
 80092b0:	464b      	mov	r3, r9
 80092b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092b6:	e6de      	b.n	8009076 <_printf_float+0x1de>
 80092b8:	f04f 0800 	mov.w	r8, #0
 80092bc:	f104 0a1a 	add.w	sl, r4, #26
 80092c0:	e7f2      	b.n	80092a8 <_printf_float+0x410>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e7df      	b.n	8009286 <_printf_float+0x3ee>
 80092c6:	2301      	movs	r3, #1
 80092c8:	464a      	mov	r2, r9
 80092ca:	4631      	mov	r1, r6
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	f43f ae3e 	beq.w	8008f52 <_printf_float+0xba>
 80092d6:	f108 0801 	add.w	r8, r8, #1
 80092da:	68e3      	ldr	r3, [r4, #12]
 80092dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092de:	1a9b      	subs	r3, r3, r2
 80092e0:	4543      	cmp	r3, r8
 80092e2:	dcf0      	bgt.n	80092c6 <_printf_float+0x42e>
 80092e4:	e6fc      	b.n	80090e0 <_printf_float+0x248>
 80092e6:	f04f 0800 	mov.w	r8, #0
 80092ea:	f104 0919 	add.w	r9, r4, #25
 80092ee:	e7f4      	b.n	80092da <_printf_float+0x442>
 80092f0:	2900      	cmp	r1, #0
 80092f2:	f43f ae8b 	beq.w	800900c <_printf_float+0x174>
 80092f6:	2300      	movs	r3, #0
 80092f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80092fc:	ab09      	add	r3, sp, #36	; 0x24
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	ec49 8b10 	vmov	d0, r8, r9
 8009304:	6022      	str	r2, [r4, #0]
 8009306:	f8cd a004 	str.w	sl, [sp, #4]
 800930a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800930e:	4628      	mov	r0, r5
 8009310:	f7ff fd2e 	bl	8008d70 <__cvt>
 8009314:	4680      	mov	r8, r0
 8009316:	e648      	b.n	8008faa <_printf_float+0x112>

08009318 <_printf_common>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	4691      	mov	r9, r2
 800931e:	461f      	mov	r7, r3
 8009320:	688a      	ldr	r2, [r1, #8]
 8009322:	690b      	ldr	r3, [r1, #16]
 8009324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009328:	4293      	cmp	r3, r2
 800932a:	bfb8      	it	lt
 800932c:	4613      	movlt	r3, r2
 800932e:	f8c9 3000 	str.w	r3, [r9]
 8009332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009336:	4606      	mov	r6, r0
 8009338:	460c      	mov	r4, r1
 800933a:	b112      	cbz	r2, 8009342 <_printf_common+0x2a>
 800933c:	3301      	adds	r3, #1
 800933e:	f8c9 3000 	str.w	r3, [r9]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	0699      	lsls	r1, r3, #26
 8009346:	bf42      	ittt	mi
 8009348:	f8d9 3000 	ldrmi.w	r3, [r9]
 800934c:	3302      	addmi	r3, #2
 800934e:	f8c9 3000 	strmi.w	r3, [r9]
 8009352:	6825      	ldr	r5, [r4, #0]
 8009354:	f015 0506 	ands.w	r5, r5, #6
 8009358:	d107      	bne.n	800936a <_printf_common+0x52>
 800935a:	f104 0a19 	add.w	sl, r4, #25
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	f8d9 2000 	ldr.w	r2, [r9]
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	42ab      	cmp	r3, r5
 8009368:	dc28      	bgt.n	80093bc <_printf_common+0xa4>
 800936a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	3300      	adds	r3, #0
 8009372:	bf18      	it	ne
 8009374:	2301      	movne	r3, #1
 8009376:	0692      	lsls	r2, r2, #26
 8009378:	d42d      	bmi.n	80093d6 <_printf_common+0xbe>
 800937a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800937e:	4639      	mov	r1, r7
 8009380:	4630      	mov	r0, r6
 8009382:	47c0      	blx	r8
 8009384:	3001      	adds	r0, #1
 8009386:	d020      	beq.n	80093ca <_printf_common+0xb2>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	68e5      	ldr	r5, [r4, #12]
 800938c:	f8d9 2000 	ldr.w	r2, [r9]
 8009390:	f003 0306 	and.w	r3, r3, #6
 8009394:	2b04      	cmp	r3, #4
 8009396:	bf08      	it	eq
 8009398:	1aad      	subeq	r5, r5, r2
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	6922      	ldr	r2, [r4, #16]
 800939e:	bf0c      	ite	eq
 80093a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a4:	2500      	movne	r5, #0
 80093a6:	4293      	cmp	r3, r2
 80093a8:	bfc4      	itt	gt
 80093aa:	1a9b      	subgt	r3, r3, r2
 80093ac:	18ed      	addgt	r5, r5, r3
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	341a      	adds	r4, #26
 80093b4:	454d      	cmp	r5, r9
 80093b6:	d11a      	bne.n	80093ee <_printf_common+0xd6>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e008      	b.n	80093ce <_printf_common+0xb6>
 80093bc:	2301      	movs	r3, #1
 80093be:	4652      	mov	r2, sl
 80093c0:	4639      	mov	r1, r7
 80093c2:	4630      	mov	r0, r6
 80093c4:	47c0      	blx	r8
 80093c6:	3001      	adds	r0, #1
 80093c8:	d103      	bne.n	80093d2 <_printf_common+0xba>
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d2:	3501      	adds	r5, #1
 80093d4:	e7c3      	b.n	800935e <_printf_common+0x46>
 80093d6:	18e1      	adds	r1, r4, r3
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	2030      	movs	r0, #48	; 0x30
 80093dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093e0:	4422      	add	r2, r4
 80093e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ea:	3302      	adds	r3, #2
 80093ec:	e7c5      	b.n	800937a <_printf_common+0x62>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4622      	mov	r2, r4
 80093f2:	4639      	mov	r1, r7
 80093f4:	4630      	mov	r0, r6
 80093f6:	47c0      	blx	r8
 80093f8:	3001      	adds	r0, #1
 80093fa:	d0e6      	beq.n	80093ca <_printf_common+0xb2>
 80093fc:	f109 0901 	add.w	r9, r9, #1
 8009400:	e7d8      	b.n	80093b4 <_printf_common+0x9c>
	...

08009404 <_printf_i>:
 8009404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009408:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800940c:	460c      	mov	r4, r1
 800940e:	7e09      	ldrb	r1, [r1, #24]
 8009410:	b085      	sub	sp, #20
 8009412:	296e      	cmp	r1, #110	; 0x6e
 8009414:	4617      	mov	r7, r2
 8009416:	4606      	mov	r6, r0
 8009418:	4698      	mov	r8, r3
 800941a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800941c:	f000 80b3 	beq.w	8009586 <_printf_i+0x182>
 8009420:	d822      	bhi.n	8009468 <_printf_i+0x64>
 8009422:	2963      	cmp	r1, #99	; 0x63
 8009424:	d036      	beq.n	8009494 <_printf_i+0x90>
 8009426:	d80a      	bhi.n	800943e <_printf_i+0x3a>
 8009428:	2900      	cmp	r1, #0
 800942a:	f000 80b9 	beq.w	80095a0 <_printf_i+0x19c>
 800942e:	2958      	cmp	r1, #88	; 0x58
 8009430:	f000 8083 	beq.w	800953a <_printf_i+0x136>
 8009434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009438:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800943c:	e032      	b.n	80094a4 <_printf_i+0xa0>
 800943e:	2964      	cmp	r1, #100	; 0x64
 8009440:	d001      	beq.n	8009446 <_printf_i+0x42>
 8009442:	2969      	cmp	r1, #105	; 0x69
 8009444:	d1f6      	bne.n	8009434 <_printf_i+0x30>
 8009446:	6820      	ldr	r0, [r4, #0]
 8009448:	6813      	ldr	r3, [r2, #0]
 800944a:	0605      	lsls	r5, r0, #24
 800944c:	f103 0104 	add.w	r1, r3, #4
 8009450:	d52a      	bpl.n	80094a8 <_printf_i+0xa4>
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6011      	str	r1, [r2, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	da03      	bge.n	8009462 <_printf_i+0x5e>
 800945a:	222d      	movs	r2, #45	; 0x2d
 800945c:	425b      	negs	r3, r3
 800945e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009462:	486f      	ldr	r0, [pc, #444]	; (8009620 <_printf_i+0x21c>)
 8009464:	220a      	movs	r2, #10
 8009466:	e039      	b.n	80094dc <_printf_i+0xd8>
 8009468:	2973      	cmp	r1, #115	; 0x73
 800946a:	f000 809d 	beq.w	80095a8 <_printf_i+0x1a4>
 800946e:	d808      	bhi.n	8009482 <_printf_i+0x7e>
 8009470:	296f      	cmp	r1, #111	; 0x6f
 8009472:	d020      	beq.n	80094b6 <_printf_i+0xb2>
 8009474:	2970      	cmp	r1, #112	; 0x70
 8009476:	d1dd      	bne.n	8009434 <_printf_i+0x30>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	f043 0320 	orr.w	r3, r3, #32
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	e003      	b.n	800948a <_printf_i+0x86>
 8009482:	2975      	cmp	r1, #117	; 0x75
 8009484:	d017      	beq.n	80094b6 <_printf_i+0xb2>
 8009486:	2978      	cmp	r1, #120	; 0x78
 8009488:	d1d4      	bne.n	8009434 <_printf_i+0x30>
 800948a:	2378      	movs	r3, #120	; 0x78
 800948c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009490:	4864      	ldr	r0, [pc, #400]	; (8009624 <_printf_i+0x220>)
 8009492:	e055      	b.n	8009540 <_printf_i+0x13c>
 8009494:	6813      	ldr	r3, [r2, #0]
 8009496:	1d19      	adds	r1, r3, #4
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6011      	str	r1, [r2, #0]
 800949c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a4:	2301      	movs	r3, #1
 80094a6:	e08c      	b.n	80095c2 <_printf_i+0x1be>
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6011      	str	r1, [r2, #0]
 80094ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094b0:	bf18      	it	ne
 80094b2:	b21b      	sxthne	r3, r3
 80094b4:	e7cf      	b.n	8009456 <_printf_i+0x52>
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1d18      	adds	r0, r3, #4
 80094bc:	6010      	str	r0, [r2, #0]
 80094be:	0628      	lsls	r0, r5, #24
 80094c0:	d501      	bpl.n	80094c6 <_printf_i+0xc2>
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	e002      	b.n	80094cc <_printf_i+0xc8>
 80094c6:	0668      	lsls	r0, r5, #25
 80094c8:	d5fb      	bpl.n	80094c2 <_printf_i+0xbe>
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	4854      	ldr	r0, [pc, #336]	; (8009620 <_printf_i+0x21c>)
 80094ce:	296f      	cmp	r1, #111	; 0x6f
 80094d0:	bf14      	ite	ne
 80094d2:	220a      	movne	r2, #10
 80094d4:	2208      	moveq	r2, #8
 80094d6:	2100      	movs	r1, #0
 80094d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094dc:	6865      	ldr	r5, [r4, #4]
 80094de:	60a5      	str	r5, [r4, #8]
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	f2c0 8095 	blt.w	8009610 <_printf_i+0x20c>
 80094e6:	6821      	ldr	r1, [r4, #0]
 80094e8:	f021 0104 	bic.w	r1, r1, #4
 80094ec:	6021      	str	r1, [r4, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d13d      	bne.n	800956e <_printf_i+0x16a>
 80094f2:	2d00      	cmp	r5, #0
 80094f4:	f040 808e 	bne.w	8009614 <_printf_i+0x210>
 80094f8:	4665      	mov	r5, ip
 80094fa:	2a08      	cmp	r2, #8
 80094fc:	d10b      	bne.n	8009516 <_printf_i+0x112>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	07db      	lsls	r3, r3, #31
 8009502:	d508      	bpl.n	8009516 <_printf_i+0x112>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	6862      	ldr	r2, [r4, #4]
 8009508:	429a      	cmp	r2, r3
 800950a:	bfde      	ittt	le
 800950c:	2330      	movle	r3, #48	; 0x30
 800950e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009512:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009516:	ebac 0305 	sub.w	r3, ip, r5
 800951a:	6123      	str	r3, [r4, #16]
 800951c:	f8cd 8000 	str.w	r8, [sp]
 8009520:	463b      	mov	r3, r7
 8009522:	aa03      	add	r2, sp, #12
 8009524:	4621      	mov	r1, r4
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff fef6 	bl	8009318 <_printf_common>
 800952c:	3001      	adds	r0, #1
 800952e:	d14d      	bne.n	80095cc <_printf_i+0x1c8>
 8009530:	f04f 30ff 	mov.w	r0, #4294967295
 8009534:	b005      	add	sp, #20
 8009536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800953a:	4839      	ldr	r0, [pc, #228]	; (8009620 <_printf_i+0x21c>)
 800953c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009540:	6813      	ldr	r3, [r2, #0]
 8009542:	6821      	ldr	r1, [r4, #0]
 8009544:	1d1d      	adds	r5, r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6015      	str	r5, [r2, #0]
 800954a:	060a      	lsls	r2, r1, #24
 800954c:	d50b      	bpl.n	8009566 <_printf_i+0x162>
 800954e:	07ca      	lsls	r2, r1, #31
 8009550:	bf44      	itt	mi
 8009552:	f041 0120 	orrmi.w	r1, r1, #32
 8009556:	6021      	strmi	r1, [r4, #0]
 8009558:	b91b      	cbnz	r3, 8009562 <_printf_i+0x15e>
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	f022 0220 	bic.w	r2, r2, #32
 8009560:	6022      	str	r2, [r4, #0]
 8009562:	2210      	movs	r2, #16
 8009564:	e7b7      	b.n	80094d6 <_printf_i+0xd2>
 8009566:	064d      	lsls	r5, r1, #25
 8009568:	bf48      	it	mi
 800956a:	b29b      	uxthmi	r3, r3
 800956c:	e7ef      	b.n	800954e <_printf_i+0x14a>
 800956e:	4665      	mov	r5, ip
 8009570:	fbb3 f1f2 	udiv	r1, r3, r2
 8009574:	fb02 3311 	mls	r3, r2, r1, r3
 8009578:	5cc3      	ldrb	r3, [r0, r3]
 800957a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800957e:	460b      	mov	r3, r1
 8009580:	2900      	cmp	r1, #0
 8009582:	d1f5      	bne.n	8009570 <_printf_i+0x16c>
 8009584:	e7b9      	b.n	80094fa <_printf_i+0xf6>
 8009586:	6813      	ldr	r3, [r2, #0]
 8009588:	6825      	ldr	r5, [r4, #0]
 800958a:	6961      	ldr	r1, [r4, #20]
 800958c:	1d18      	adds	r0, r3, #4
 800958e:	6010      	str	r0, [r2, #0]
 8009590:	0628      	lsls	r0, r5, #24
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	d501      	bpl.n	800959a <_printf_i+0x196>
 8009596:	6019      	str	r1, [r3, #0]
 8009598:	e002      	b.n	80095a0 <_printf_i+0x19c>
 800959a:	066a      	lsls	r2, r5, #25
 800959c:	d5fb      	bpl.n	8009596 <_printf_i+0x192>
 800959e:	8019      	strh	r1, [r3, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	4665      	mov	r5, ip
 80095a6:	e7b9      	b.n	800951c <_printf_i+0x118>
 80095a8:	6813      	ldr	r3, [r2, #0]
 80095aa:	1d19      	adds	r1, r3, #4
 80095ac:	6011      	str	r1, [r2, #0]
 80095ae:	681d      	ldr	r5, [r3, #0]
 80095b0:	6862      	ldr	r2, [r4, #4]
 80095b2:	2100      	movs	r1, #0
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7f6 fe13 	bl	80001e0 <memchr>
 80095ba:	b108      	cbz	r0, 80095c0 <_printf_i+0x1bc>
 80095bc:	1b40      	subs	r0, r0, r5
 80095be:	6060      	str	r0, [r4, #4]
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	2300      	movs	r3, #0
 80095c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ca:	e7a7      	b.n	800951c <_printf_i+0x118>
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	462a      	mov	r2, r5
 80095d0:	4639      	mov	r1, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	47c0      	blx	r8
 80095d6:	3001      	adds	r0, #1
 80095d8:	d0aa      	beq.n	8009530 <_printf_i+0x12c>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	079b      	lsls	r3, r3, #30
 80095de:	d413      	bmi.n	8009608 <_printf_i+0x204>
 80095e0:	68e0      	ldr	r0, [r4, #12]
 80095e2:	9b03      	ldr	r3, [sp, #12]
 80095e4:	4298      	cmp	r0, r3
 80095e6:	bfb8      	it	lt
 80095e8:	4618      	movlt	r0, r3
 80095ea:	e7a3      	b.n	8009534 <_printf_i+0x130>
 80095ec:	2301      	movs	r3, #1
 80095ee:	464a      	mov	r2, r9
 80095f0:	4639      	mov	r1, r7
 80095f2:	4630      	mov	r0, r6
 80095f4:	47c0      	blx	r8
 80095f6:	3001      	adds	r0, #1
 80095f8:	d09a      	beq.n	8009530 <_printf_i+0x12c>
 80095fa:	3501      	adds	r5, #1
 80095fc:	68e3      	ldr	r3, [r4, #12]
 80095fe:	9a03      	ldr	r2, [sp, #12]
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	42ab      	cmp	r3, r5
 8009604:	dcf2      	bgt.n	80095ec <_printf_i+0x1e8>
 8009606:	e7eb      	b.n	80095e0 <_printf_i+0x1dc>
 8009608:	2500      	movs	r5, #0
 800960a:	f104 0919 	add.w	r9, r4, #25
 800960e:	e7f5      	b.n	80095fc <_printf_i+0x1f8>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1ac      	bne.n	800956e <_printf_i+0x16a>
 8009614:	7803      	ldrb	r3, [r0, #0]
 8009616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800961a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800961e:	e76c      	b.n	80094fa <_printf_i+0xf6>
 8009620:	0800b7e6 	.word	0x0800b7e6
 8009624:	0800b7f7 	.word	0x0800b7f7

08009628 <iprintf>:
 8009628:	b40f      	push	{r0, r1, r2, r3}
 800962a:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <iprintf+0x2c>)
 800962c:	b513      	push	{r0, r1, r4, lr}
 800962e:	681c      	ldr	r4, [r3, #0]
 8009630:	b124      	cbz	r4, 800963c <iprintf+0x14>
 8009632:	69a3      	ldr	r3, [r4, #24]
 8009634:	b913      	cbnz	r3, 800963c <iprintf+0x14>
 8009636:	4620      	mov	r0, r4
 8009638:	f001 f91e 	bl	800a878 <__sinit>
 800963c:	ab05      	add	r3, sp, #20
 800963e:	9a04      	ldr	r2, [sp, #16]
 8009640:	68a1      	ldr	r1, [r4, #8]
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	4620      	mov	r0, r4
 8009646:	f001 fde1 	bl	800b20c <_vfiprintf_r>
 800964a:	b002      	add	sp, #8
 800964c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009650:	b004      	add	sp, #16
 8009652:	4770      	bx	lr
 8009654:	2000000c 	.word	0x2000000c

08009658 <_puts_r>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	460e      	mov	r6, r1
 800965c:	4605      	mov	r5, r0
 800965e:	b118      	cbz	r0, 8009668 <_puts_r+0x10>
 8009660:	6983      	ldr	r3, [r0, #24]
 8009662:	b90b      	cbnz	r3, 8009668 <_puts_r+0x10>
 8009664:	f001 f908 	bl	800a878 <__sinit>
 8009668:	69ab      	ldr	r3, [r5, #24]
 800966a:	68ac      	ldr	r4, [r5, #8]
 800966c:	b913      	cbnz	r3, 8009674 <_puts_r+0x1c>
 800966e:	4628      	mov	r0, r5
 8009670:	f001 f902 	bl	800a878 <__sinit>
 8009674:	4b23      	ldr	r3, [pc, #140]	; (8009704 <_puts_r+0xac>)
 8009676:	429c      	cmp	r4, r3
 8009678:	d117      	bne.n	80096aa <_puts_r+0x52>
 800967a:	686c      	ldr	r4, [r5, #4]
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	071b      	lsls	r3, r3, #28
 8009680:	d51d      	bpl.n	80096be <_puts_r+0x66>
 8009682:	6923      	ldr	r3, [r4, #16]
 8009684:	b1db      	cbz	r3, 80096be <_puts_r+0x66>
 8009686:	3e01      	subs	r6, #1
 8009688:	68a3      	ldr	r3, [r4, #8]
 800968a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800968e:	3b01      	subs	r3, #1
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	b9e9      	cbnz	r1, 80096d0 <_puts_r+0x78>
 8009694:	2b00      	cmp	r3, #0
 8009696:	da2e      	bge.n	80096f6 <_puts_r+0x9e>
 8009698:	4622      	mov	r2, r4
 800969a:	210a      	movs	r1, #10
 800969c:	4628      	mov	r0, r5
 800969e:	f000 f8f5 	bl	800988c <__swbuf_r>
 80096a2:	3001      	adds	r0, #1
 80096a4:	d011      	beq.n	80096ca <_puts_r+0x72>
 80096a6:	200a      	movs	r0, #10
 80096a8:	e011      	b.n	80096ce <_puts_r+0x76>
 80096aa:	4b17      	ldr	r3, [pc, #92]	; (8009708 <_puts_r+0xb0>)
 80096ac:	429c      	cmp	r4, r3
 80096ae:	d101      	bne.n	80096b4 <_puts_r+0x5c>
 80096b0:	68ac      	ldr	r4, [r5, #8]
 80096b2:	e7e3      	b.n	800967c <_puts_r+0x24>
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <_puts_r+0xb4>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	bf08      	it	eq
 80096ba:	68ec      	ldreq	r4, [r5, #12]
 80096bc:	e7de      	b.n	800967c <_puts_r+0x24>
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f935 	bl	8009930 <__swsetup_r>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d0dd      	beq.n	8009686 <_puts_r+0x2e>
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da04      	bge.n	80096de <_puts_r+0x86>
 80096d4:	69a2      	ldr	r2, [r4, #24]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	dc06      	bgt.n	80096e8 <_puts_r+0x90>
 80096da:	290a      	cmp	r1, #10
 80096dc:	d004      	beq.n	80096e8 <_puts_r+0x90>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	7019      	strb	r1, [r3, #0]
 80096e6:	e7cf      	b.n	8009688 <_puts_r+0x30>
 80096e8:	4622      	mov	r2, r4
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f8ce 	bl	800988c <__swbuf_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d1c9      	bne.n	8009688 <_puts_r+0x30>
 80096f4:	e7e9      	b.n	80096ca <_puts_r+0x72>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	200a      	movs	r0, #10
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	6022      	str	r2, [r4, #0]
 80096fe:	7018      	strb	r0, [r3, #0]
 8009700:	e7e5      	b.n	80096ce <_puts_r+0x76>
 8009702:	bf00      	nop
 8009704:	0800b838 	.word	0x0800b838
 8009708:	0800b858 	.word	0x0800b858
 800970c:	0800b818 	.word	0x0800b818

08009710 <puts>:
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <puts+0xc>)
 8009712:	4601      	mov	r1, r0
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	f7ff bf9f 	b.w	8009658 <_puts_r>
 800971a:	bf00      	nop
 800971c:	2000000c 	.word	0x2000000c

08009720 <setbuf>:
 8009720:	2900      	cmp	r1, #0
 8009722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009726:	bf0c      	ite	eq
 8009728:	2202      	moveq	r2, #2
 800972a:	2200      	movne	r2, #0
 800972c:	f000 b800 	b.w	8009730 <setvbuf>

08009730 <setvbuf>:
 8009730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009734:	461d      	mov	r5, r3
 8009736:	4b51      	ldr	r3, [pc, #324]	; (800987c <setvbuf+0x14c>)
 8009738:	681e      	ldr	r6, [r3, #0]
 800973a:	4604      	mov	r4, r0
 800973c:	460f      	mov	r7, r1
 800973e:	4690      	mov	r8, r2
 8009740:	b126      	cbz	r6, 800974c <setvbuf+0x1c>
 8009742:	69b3      	ldr	r3, [r6, #24]
 8009744:	b913      	cbnz	r3, 800974c <setvbuf+0x1c>
 8009746:	4630      	mov	r0, r6
 8009748:	f001 f896 	bl	800a878 <__sinit>
 800974c:	4b4c      	ldr	r3, [pc, #304]	; (8009880 <setvbuf+0x150>)
 800974e:	429c      	cmp	r4, r3
 8009750:	d152      	bne.n	80097f8 <setvbuf+0xc8>
 8009752:	6874      	ldr	r4, [r6, #4]
 8009754:	f1b8 0f02 	cmp.w	r8, #2
 8009758:	d006      	beq.n	8009768 <setvbuf+0x38>
 800975a:	f1b8 0f01 	cmp.w	r8, #1
 800975e:	f200 8089 	bhi.w	8009874 <setvbuf+0x144>
 8009762:	2d00      	cmp	r5, #0
 8009764:	f2c0 8086 	blt.w	8009874 <setvbuf+0x144>
 8009768:	4621      	mov	r1, r4
 800976a:	4630      	mov	r0, r6
 800976c:	f001 f81a 	bl	800a7a4 <_fflush_r>
 8009770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009772:	b141      	cbz	r1, 8009786 <setvbuf+0x56>
 8009774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009778:	4299      	cmp	r1, r3
 800977a:	d002      	beq.n	8009782 <setvbuf+0x52>
 800977c:	4630      	mov	r0, r6
 800977e:	f001 fc73 	bl	800b068 <_free_r>
 8009782:	2300      	movs	r3, #0
 8009784:	6363      	str	r3, [r4, #52]	; 0x34
 8009786:	2300      	movs	r3, #0
 8009788:	61a3      	str	r3, [r4, #24]
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	061b      	lsls	r3, r3, #24
 8009790:	d503      	bpl.n	800979a <setvbuf+0x6a>
 8009792:	6921      	ldr	r1, [r4, #16]
 8009794:	4630      	mov	r0, r6
 8009796:	f001 fc67 	bl	800b068 <_free_r>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80097a0:	f023 0303 	bic.w	r3, r3, #3
 80097a4:	f1b8 0f02 	cmp.w	r8, #2
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	d05d      	beq.n	8009868 <setvbuf+0x138>
 80097ac:	ab01      	add	r3, sp, #4
 80097ae:	466a      	mov	r2, sp
 80097b0:	4621      	mov	r1, r4
 80097b2:	4630      	mov	r0, r6
 80097b4:	f001 f8f8 	bl	800a9a8 <__swhatbuf_r>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	4318      	orrs	r0, r3
 80097bc:	81a0      	strh	r0, [r4, #12]
 80097be:	bb2d      	cbnz	r5, 800980c <setvbuf+0xdc>
 80097c0:	9d00      	ldr	r5, [sp, #0]
 80097c2:	4628      	mov	r0, r5
 80097c4:	f001 f954 	bl	800aa70 <malloc>
 80097c8:	4607      	mov	r7, r0
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d14e      	bne.n	800986c <setvbuf+0x13c>
 80097ce:	f8dd 9000 	ldr.w	r9, [sp]
 80097d2:	45a9      	cmp	r9, r5
 80097d4:	d13c      	bne.n	8009850 <setvbuf+0x120>
 80097d6:	f04f 30ff 	mov.w	r0, #4294967295
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f043 0302 	orr.w	r3, r3, #2
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	2300      	movs	r3, #0
 80097e4:	60a3      	str	r3, [r4, #8]
 80097e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	2301      	movs	r3, #1
 80097f0:	6163      	str	r3, [r4, #20]
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097f8:	4b22      	ldr	r3, [pc, #136]	; (8009884 <setvbuf+0x154>)
 80097fa:	429c      	cmp	r4, r3
 80097fc:	d101      	bne.n	8009802 <setvbuf+0xd2>
 80097fe:	68b4      	ldr	r4, [r6, #8]
 8009800:	e7a8      	b.n	8009754 <setvbuf+0x24>
 8009802:	4b21      	ldr	r3, [pc, #132]	; (8009888 <setvbuf+0x158>)
 8009804:	429c      	cmp	r4, r3
 8009806:	bf08      	it	eq
 8009808:	68f4      	ldreq	r4, [r6, #12]
 800980a:	e7a3      	b.n	8009754 <setvbuf+0x24>
 800980c:	2f00      	cmp	r7, #0
 800980e:	d0d8      	beq.n	80097c2 <setvbuf+0x92>
 8009810:	69b3      	ldr	r3, [r6, #24]
 8009812:	b913      	cbnz	r3, 800981a <setvbuf+0xea>
 8009814:	4630      	mov	r0, r6
 8009816:	f001 f82f 	bl	800a878 <__sinit>
 800981a:	f1b8 0f01 	cmp.w	r8, #1
 800981e:	bf08      	it	eq
 8009820:	89a3      	ldrheq	r3, [r4, #12]
 8009822:	6027      	str	r7, [r4, #0]
 8009824:	bf04      	itt	eq
 8009826:	f043 0301 	orreq.w	r3, r3, #1
 800982a:	81a3      	strheq	r3, [r4, #12]
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f013 0008 	ands.w	r0, r3, #8
 8009832:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8009836:	d01b      	beq.n	8009870 <setvbuf+0x140>
 8009838:	f013 0001 	ands.w	r0, r3, #1
 800983c:	bf18      	it	ne
 800983e:	426d      	negne	r5, r5
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	bf1d      	ittte	ne
 8009846:	60a3      	strne	r3, [r4, #8]
 8009848:	61a5      	strne	r5, [r4, #24]
 800984a:	4618      	movne	r0, r3
 800984c:	60a5      	streq	r5, [r4, #8]
 800984e:	e7d0      	b.n	80097f2 <setvbuf+0xc2>
 8009850:	4648      	mov	r0, r9
 8009852:	f001 f90d 	bl	800aa70 <malloc>
 8009856:	4607      	mov	r7, r0
 8009858:	2800      	cmp	r0, #0
 800985a:	d0bc      	beq.n	80097d6 <setvbuf+0xa6>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	464d      	mov	r5, r9
 8009866:	e7d3      	b.n	8009810 <setvbuf+0xe0>
 8009868:	2000      	movs	r0, #0
 800986a:	e7b6      	b.n	80097da <setvbuf+0xaa>
 800986c:	46a9      	mov	r9, r5
 800986e:	e7f5      	b.n	800985c <setvbuf+0x12c>
 8009870:	60a0      	str	r0, [r4, #8]
 8009872:	e7be      	b.n	80097f2 <setvbuf+0xc2>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	e7bb      	b.n	80097f2 <setvbuf+0xc2>
 800987a:	bf00      	nop
 800987c:	2000000c 	.word	0x2000000c
 8009880:	0800b838 	.word	0x0800b838
 8009884:	0800b858 	.word	0x0800b858
 8009888:	0800b818 	.word	0x0800b818

0800988c <__swbuf_r>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	460e      	mov	r6, r1
 8009890:	4614      	mov	r4, r2
 8009892:	4605      	mov	r5, r0
 8009894:	b118      	cbz	r0, 800989e <__swbuf_r+0x12>
 8009896:	6983      	ldr	r3, [r0, #24]
 8009898:	b90b      	cbnz	r3, 800989e <__swbuf_r+0x12>
 800989a:	f000 ffed 	bl	800a878 <__sinit>
 800989e:	4b21      	ldr	r3, [pc, #132]	; (8009924 <__swbuf_r+0x98>)
 80098a0:	429c      	cmp	r4, r3
 80098a2:	d12a      	bne.n	80098fa <__swbuf_r+0x6e>
 80098a4:	686c      	ldr	r4, [r5, #4]
 80098a6:	69a3      	ldr	r3, [r4, #24]
 80098a8:	60a3      	str	r3, [r4, #8]
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	071a      	lsls	r2, r3, #28
 80098ae:	d52e      	bpl.n	800990e <__swbuf_r+0x82>
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	b363      	cbz	r3, 800990e <__swbuf_r+0x82>
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	6820      	ldr	r0, [r4, #0]
 80098b8:	1ac0      	subs	r0, r0, r3
 80098ba:	6963      	ldr	r3, [r4, #20]
 80098bc:	b2f6      	uxtb	r6, r6
 80098be:	4283      	cmp	r3, r0
 80098c0:	4637      	mov	r7, r6
 80098c2:	dc04      	bgt.n	80098ce <__swbuf_r+0x42>
 80098c4:	4621      	mov	r1, r4
 80098c6:	4628      	mov	r0, r5
 80098c8:	f000 ff6c 	bl	800a7a4 <_fflush_r>
 80098cc:	bb28      	cbnz	r0, 800991a <__swbuf_r+0x8e>
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	60a3      	str	r3, [r4, #8]
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	6022      	str	r2, [r4, #0]
 80098da:	701e      	strb	r6, [r3, #0]
 80098dc:	6963      	ldr	r3, [r4, #20]
 80098de:	3001      	adds	r0, #1
 80098e0:	4283      	cmp	r3, r0
 80098e2:	d004      	beq.n	80098ee <__swbuf_r+0x62>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	07db      	lsls	r3, r3, #31
 80098e8:	d519      	bpl.n	800991e <__swbuf_r+0x92>
 80098ea:	2e0a      	cmp	r6, #10
 80098ec:	d117      	bne.n	800991e <__swbuf_r+0x92>
 80098ee:	4621      	mov	r1, r4
 80098f0:	4628      	mov	r0, r5
 80098f2:	f000 ff57 	bl	800a7a4 <_fflush_r>
 80098f6:	b190      	cbz	r0, 800991e <__swbuf_r+0x92>
 80098f8:	e00f      	b.n	800991a <__swbuf_r+0x8e>
 80098fa:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <__swbuf_r+0x9c>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d101      	bne.n	8009904 <__swbuf_r+0x78>
 8009900:	68ac      	ldr	r4, [r5, #8]
 8009902:	e7d0      	b.n	80098a6 <__swbuf_r+0x1a>
 8009904:	4b09      	ldr	r3, [pc, #36]	; (800992c <__swbuf_r+0xa0>)
 8009906:	429c      	cmp	r4, r3
 8009908:	bf08      	it	eq
 800990a:	68ec      	ldreq	r4, [r5, #12]
 800990c:	e7cb      	b.n	80098a6 <__swbuf_r+0x1a>
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	f000 f80d 	bl	8009930 <__swsetup_r>
 8009916:	2800      	cmp	r0, #0
 8009918:	d0cc      	beq.n	80098b4 <__swbuf_r+0x28>
 800991a:	f04f 37ff 	mov.w	r7, #4294967295
 800991e:	4638      	mov	r0, r7
 8009920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009922:	bf00      	nop
 8009924:	0800b838 	.word	0x0800b838
 8009928:	0800b858 	.word	0x0800b858
 800992c:	0800b818 	.word	0x0800b818

08009930 <__swsetup_r>:
 8009930:	4b32      	ldr	r3, [pc, #200]	; (80099fc <__swsetup_r+0xcc>)
 8009932:	b570      	push	{r4, r5, r6, lr}
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	4606      	mov	r6, r0
 8009938:	460c      	mov	r4, r1
 800993a:	b125      	cbz	r5, 8009946 <__swsetup_r+0x16>
 800993c:	69ab      	ldr	r3, [r5, #24]
 800993e:	b913      	cbnz	r3, 8009946 <__swsetup_r+0x16>
 8009940:	4628      	mov	r0, r5
 8009942:	f000 ff99 	bl	800a878 <__sinit>
 8009946:	4b2e      	ldr	r3, [pc, #184]	; (8009a00 <__swsetup_r+0xd0>)
 8009948:	429c      	cmp	r4, r3
 800994a:	d10f      	bne.n	800996c <__swsetup_r+0x3c>
 800994c:	686c      	ldr	r4, [r5, #4]
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	b29a      	uxth	r2, r3
 8009954:	0715      	lsls	r5, r2, #28
 8009956:	d42c      	bmi.n	80099b2 <__swsetup_r+0x82>
 8009958:	06d0      	lsls	r0, r2, #27
 800995a:	d411      	bmi.n	8009980 <__swsetup_r+0x50>
 800995c:	2209      	movs	r2, #9
 800995e:	6032      	str	r2, [r6, #0]
 8009960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009964:	81a3      	strh	r3, [r4, #12]
 8009966:	f04f 30ff 	mov.w	r0, #4294967295
 800996a:	e03e      	b.n	80099ea <__swsetup_r+0xba>
 800996c:	4b25      	ldr	r3, [pc, #148]	; (8009a04 <__swsetup_r+0xd4>)
 800996e:	429c      	cmp	r4, r3
 8009970:	d101      	bne.n	8009976 <__swsetup_r+0x46>
 8009972:	68ac      	ldr	r4, [r5, #8]
 8009974:	e7eb      	b.n	800994e <__swsetup_r+0x1e>
 8009976:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <__swsetup_r+0xd8>)
 8009978:	429c      	cmp	r4, r3
 800997a:	bf08      	it	eq
 800997c:	68ec      	ldreq	r4, [r5, #12]
 800997e:	e7e6      	b.n	800994e <__swsetup_r+0x1e>
 8009980:	0751      	lsls	r1, r2, #29
 8009982:	d512      	bpl.n	80099aa <__swsetup_r+0x7a>
 8009984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009986:	b141      	cbz	r1, 800999a <__swsetup_r+0x6a>
 8009988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800998c:	4299      	cmp	r1, r3
 800998e:	d002      	beq.n	8009996 <__swsetup_r+0x66>
 8009990:	4630      	mov	r0, r6
 8009992:	f001 fb69 	bl	800b068 <_free_r>
 8009996:	2300      	movs	r3, #0
 8009998:	6363      	str	r3, [r4, #52]	; 0x34
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	2300      	movs	r3, #0
 80099a4:	6063      	str	r3, [r4, #4]
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f043 0308 	orr.w	r3, r3, #8
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	6923      	ldr	r3, [r4, #16]
 80099b4:	b94b      	cbnz	r3, 80099ca <__swsetup_r+0x9a>
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c0:	d003      	beq.n	80099ca <__swsetup_r+0x9a>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4630      	mov	r0, r6
 80099c6:	f001 f813 	bl	800a9f0 <__smakebuf_r>
 80099ca:	89a2      	ldrh	r2, [r4, #12]
 80099cc:	f012 0301 	ands.w	r3, r2, #1
 80099d0:	d00c      	beq.n	80099ec <__swsetup_r+0xbc>
 80099d2:	2300      	movs	r3, #0
 80099d4:	60a3      	str	r3, [r4, #8]
 80099d6:	6963      	ldr	r3, [r4, #20]
 80099d8:	425b      	negs	r3, r3
 80099da:	61a3      	str	r3, [r4, #24]
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	b953      	cbnz	r3, 80099f6 <__swsetup_r+0xc6>
 80099e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80099e8:	d1ba      	bne.n	8009960 <__swsetup_r+0x30>
 80099ea:	bd70      	pop	{r4, r5, r6, pc}
 80099ec:	0792      	lsls	r2, r2, #30
 80099ee:	bf58      	it	pl
 80099f0:	6963      	ldrpl	r3, [r4, #20]
 80099f2:	60a3      	str	r3, [r4, #8]
 80099f4:	e7f2      	b.n	80099dc <__swsetup_r+0xac>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e7f7      	b.n	80099ea <__swsetup_r+0xba>
 80099fa:	bf00      	nop
 80099fc:	2000000c 	.word	0x2000000c
 8009a00:	0800b838 	.word	0x0800b838
 8009a04:	0800b858 	.word	0x0800b858
 8009a08:	0800b818 	.word	0x0800b818

08009a0c <quorem>:
 8009a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	6903      	ldr	r3, [r0, #16]
 8009a12:	690c      	ldr	r4, [r1, #16]
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	4680      	mov	r8, r0
 8009a18:	f2c0 8082 	blt.w	8009b20 <quorem+0x114>
 8009a1c:	3c01      	subs	r4, #1
 8009a1e:	f101 0714 	add.w	r7, r1, #20
 8009a22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a26:	f100 0614 	add.w	r6, r0, #20
 8009a2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a32:	eb06 030c 	add.w	r3, r6, ip
 8009a36:	3501      	adds	r5, #1
 8009a38:	eb07 090c 	add.w	r9, r7, ip
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a42:	b395      	cbz	r5, 8009aaa <quorem+0x9e>
 8009a44:	f04f 0a00 	mov.w	sl, #0
 8009a48:	4638      	mov	r0, r7
 8009a4a:	46b6      	mov	lr, r6
 8009a4c:	46d3      	mov	fp, sl
 8009a4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a52:	b293      	uxth	r3, r2
 8009a54:	fb05 a303 	mla	r3, r5, r3, sl
 8009a58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	ebab 0303 	sub.w	r3, fp, r3
 8009a62:	0c12      	lsrs	r2, r2, #16
 8009a64:	f8de b000 	ldr.w	fp, [lr]
 8009a68:	fb05 a202 	mla	r2, r5, r2, sl
 8009a6c:	fa13 f38b 	uxtah	r3, r3, fp
 8009a70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a74:	fa1f fb82 	uxth.w	fp, r2
 8009a78:	f8de 2000 	ldr.w	r2, [lr]
 8009a7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a8a:	4581      	cmp	r9, r0
 8009a8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a90:	f84e 3b04 	str.w	r3, [lr], #4
 8009a94:	d2db      	bcs.n	8009a4e <quorem+0x42>
 8009a96:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a9a:	b933      	cbnz	r3, 8009aaa <quorem+0x9e>
 8009a9c:	9b01      	ldr	r3, [sp, #4]
 8009a9e:	3b04      	subs	r3, #4
 8009aa0:	429e      	cmp	r6, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	d330      	bcc.n	8009b08 <quorem+0xfc>
 8009aa6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f001 fa08 	bl	800aec0 <__mcmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	db25      	blt.n	8009b00 <quorem+0xf4>
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	f857 2b04 	ldr.w	r2, [r7], #4
 8009ac0:	f8d0 e000 	ldr.w	lr, [r0]
 8009ac4:	b293      	uxth	r3, r2
 8009ac6:	ebac 0303 	sub.w	r3, ip, r3
 8009aca:	0c12      	lsrs	r2, r2, #16
 8009acc:	fa13 f38e 	uxtah	r3, r3, lr
 8009ad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ade:	45b9      	cmp	r9, r7
 8009ae0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ae4:	f840 3b04 	str.w	r3, [r0], #4
 8009ae8:	d2e8      	bcs.n	8009abc <quorem+0xb0>
 8009aea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009aee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009af2:	b92a      	cbnz	r2, 8009b00 <quorem+0xf4>
 8009af4:	3b04      	subs	r3, #4
 8009af6:	429e      	cmp	r6, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	d30b      	bcc.n	8009b14 <quorem+0x108>
 8009afc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009b00:	4628      	mov	r0, r5
 8009b02:	b003      	add	sp, #12
 8009b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b08:	6812      	ldr	r2, [r2, #0]
 8009b0a:	3b04      	subs	r3, #4
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	d1ca      	bne.n	8009aa6 <quorem+0x9a>
 8009b10:	3c01      	subs	r4, #1
 8009b12:	e7c5      	b.n	8009aa0 <quorem+0x94>
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	3b04      	subs	r3, #4
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	d1ef      	bne.n	8009afc <quorem+0xf0>
 8009b1c:	3c01      	subs	r4, #1
 8009b1e:	e7ea      	b.n	8009af6 <quorem+0xea>
 8009b20:	2000      	movs	r0, #0
 8009b22:	e7ee      	b.n	8009b02 <quorem+0xf6>
 8009b24:	0000      	movs	r0, r0
	...

08009b28 <_dtoa_r>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	ec57 6b10 	vmov	r6, r7, d0
 8009b30:	b097      	sub	sp, #92	; 0x5c
 8009b32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b34:	9106      	str	r1, [sp, #24]
 8009b36:	4604      	mov	r4, r0
 8009b38:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009b3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b40:	e9cd 6700 	strd	r6, r7, [sp]
 8009b44:	b93d      	cbnz	r5, 8009b56 <_dtoa_r+0x2e>
 8009b46:	2010      	movs	r0, #16
 8009b48:	f000 ff92 	bl	800aa70 <malloc>
 8009b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009b4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b52:	6005      	str	r5, [r0, #0]
 8009b54:	60c5      	str	r5, [r0, #12]
 8009b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	b151      	cbz	r1, 8009b72 <_dtoa_r+0x4a>
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	604a      	str	r2, [r1, #4]
 8009b60:	2301      	movs	r3, #1
 8009b62:	4093      	lsls	r3, r2
 8009b64:	608b      	str	r3, [r1, #8]
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 ffc9 	bl	800aafe <_Bfree>
 8009b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	1e3b      	subs	r3, r7, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b7a:	9301      	strlt	r3, [sp, #4]
 8009b7c:	2300      	movge	r3, #0
 8009b7e:	2201      	movlt	r2, #1
 8009b80:	bfac      	ite	ge
 8009b82:	f8c8 3000 	strge.w	r3, [r8]
 8009b86:	f8c8 2000 	strlt.w	r2, [r8]
 8009b8a:	4baf      	ldr	r3, [pc, #700]	; (8009e48 <_dtoa_r+0x320>)
 8009b8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b90:	ea33 0308 	bics.w	r3, r3, r8
 8009b94:	d114      	bne.n	8009bc0 <_dtoa_r+0x98>
 8009b96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b98:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	9b00      	ldr	r3, [sp, #0]
 8009ba0:	b923      	cbnz	r3, 8009bac <_dtoa_r+0x84>
 8009ba2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f000 8542 	beq.w	800a630 <_dtoa_r+0xb08>
 8009bac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009e5c <_dtoa_r+0x334>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 8544 	beq.w	800a640 <_dtoa_r+0xb18>
 8009bb8:	f10b 0303 	add.w	r3, fp, #3
 8009bbc:	f000 bd3e 	b.w	800a63c <_dtoa_r+0xb14>
 8009bc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4639      	mov	r1, r7
 8009bcc:	f7f6 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd0:	4681      	mov	r9, r0
 8009bd2:	b168      	cbz	r0, 8009bf0 <_dtoa_r+0xc8>
 8009bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8524 	beq.w	800a62a <_dtoa_r+0xb02>
 8009be2:	4b9a      	ldr	r3, [pc, #616]	; (8009e4c <_dtoa_r+0x324>)
 8009be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009be6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	f000 bd28 	b.w	800a640 <_dtoa_r+0xb18>
 8009bf0:	aa14      	add	r2, sp, #80	; 0x50
 8009bf2:	a915      	add	r1, sp, #84	; 0x54
 8009bf4:	ec47 6b10 	vmov	d0, r6, r7
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f001 f9d8 	bl	800afae <__d2b>
 8009bfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c02:	9004      	str	r0, [sp, #16]
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	d07c      	beq.n	8009d02 <_dtoa_r+0x1da>
 8009c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009c10:	46b2      	mov	sl, r6
 8009c12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4b8b      	ldr	r3, [pc, #556]	; (8009e50 <_dtoa_r+0x328>)
 8009c22:	4650      	mov	r0, sl
 8009c24:	4659      	mov	r1, fp
 8009c26:	f7f6 fb2f 	bl	8000288 <__aeabi_dsub>
 8009c2a:	a381      	add	r3, pc, #516	; (adr r3, 8009e30 <_dtoa_r+0x308>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f7f6 fce2 	bl	80005f8 <__aeabi_dmul>
 8009c34:	a380      	add	r3, pc, #512	; (adr r3, 8009e38 <_dtoa_r+0x310>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f7f6 fb27 	bl	800028c <__adddf3>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	4628      	mov	r0, r5
 8009c42:	460f      	mov	r7, r1
 8009c44:	f7f6 fc6e 	bl	8000524 <__aeabi_i2d>
 8009c48:	a37d      	add	r3, pc, #500	; (adr r3, 8009e40 <_dtoa_r+0x318>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fcd3 	bl	80005f8 <__aeabi_dmul>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4630      	mov	r0, r6
 8009c58:	4639      	mov	r1, r7
 8009c5a:	f7f6 fb17 	bl	800028c <__adddf3>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460f      	mov	r7, r1
 8009c62:	f7f6 ff79 	bl	8000b58 <__aeabi_d2iz>
 8009c66:	2200      	movs	r2, #0
 8009c68:	4682      	mov	sl, r0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 ff34 	bl	8000adc <__aeabi_dcmplt>
 8009c74:	b148      	cbz	r0, 8009c8a <_dtoa_r+0x162>
 8009c76:	4650      	mov	r0, sl
 8009c78:	f7f6 fc54 	bl	8000524 <__aeabi_i2d>
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	f7f6 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c84:	b908      	cbnz	r0, 8009c8a <_dtoa_r+0x162>
 8009c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c8a:	f1ba 0f16 	cmp.w	sl, #22
 8009c8e:	d859      	bhi.n	8009d44 <_dtoa_r+0x21c>
 8009c90:	4970      	ldr	r1, [pc, #448]	; (8009e54 <_dtoa_r+0x32c>)
 8009c92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c9e:	f7f6 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d050      	beq.n	8009d48 <_dtoa_r+0x220>
 8009ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009caa:	2300      	movs	r3, #0
 8009cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb0:	1b5d      	subs	r5, r3, r5
 8009cb2:	f1b5 0801 	subs.w	r8, r5, #1
 8009cb6:	bf49      	itett	mi
 8009cb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cbc:	2300      	movpl	r3, #0
 8009cbe:	9305      	strmi	r3, [sp, #20]
 8009cc0:	f04f 0800 	movmi.w	r8, #0
 8009cc4:	bf58      	it	pl
 8009cc6:	9305      	strpl	r3, [sp, #20]
 8009cc8:	f1ba 0f00 	cmp.w	sl, #0
 8009ccc:	db3e      	blt.n	8009d4c <_dtoa_r+0x224>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	44d0      	add	r8, sl
 8009cd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	9b06      	ldr	r3, [sp, #24]
 8009cda:	2b09      	cmp	r3, #9
 8009cdc:	f200 8090 	bhi.w	8009e00 <_dtoa_r+0x2d8>
 8009ce0:	2b05      	cmp	r3, #5
 8009ce2:	bfc4      	itt	gt
 8009ce4:	3b04      	subgt	r3, #4
 8009ce6:	9306      	strgt	r3, [sp, #24]
 8009ce8:	9b06      	ldr	r3, [sp, #24]
 8009cea:	f1a3 0302 	sub.w	r3, r3, #2
 8009cee:	bfcc      	ite	gt
 8009cf0:	2500      	movgt	r5, #0
 8009cf2:	2501      	movle	r5, #1
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	f200 808f 	bhi.w	8009e18 <_dtoa_r+0x2f0>
 8009cfa:	e8df f003 	tbb	[pc, r3]
 8009cfe:	7f7d      	.short	0x7f7d
 8009d00:	7131      	.short	0x7131
 8009d02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009d06:	441d      	add	r5, r3
 8009d08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009d0c:	2820      	cmp	r0, #32
 8009d0e:	dd13      	ble.n	8009d38 <_dtoa_r+0x210>
 8009d10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	fa08 f800 	lsl.w	r8, r8, r0
 8009d1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d1e:	fa23 f000 	lsr.w	r0, r3, r0
 8009d22:	ea48 0000 	orr.w	r0, r8, r0
 8009d26:	f7f6 fbed 	bl	8000504 <__aeabi_ui2d>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009d32:	3d01      	subs	r5, #1
 8009d34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d36:	e772      	b.n	8009c1e <_dtoa_r+0xf6>
 8009d38:	9b00      	ldr	r3, [sp, #0]
 8009d3a:	f1c0 0020 	rsb	r0, r0, #32
 8009d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d42:	e7f0      	b.n	8009d26 <_dtoa_r+0x1fe>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e7b1      	b.n	8009cac <_dtoa_r+0x184>
 8009d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d4a:	e7b0      	b.n	8009cae <_dtoa_r+0x186>
 8009d4c:	9b05      	ldr	r3, [sp, #20]
 8009d4e:	eba3 030a 	sub.w	r3, r3, sl
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	f1ca 0300 	rsb	r3, sl, #0
 8009d58:	9307      	str	r3, [sp, #28]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d5e:	e7bb      	b.n	8009cd8 <_dtoa_r+0x1b0>
 8009d60:	2301      	movs	r3, #1
 8009d62:	930a      	str	r3, [sp, #40]	; 0x28
 8009d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd59      	ble.n	8009e1e <_dtoa_r+0x2f6>
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	4699      	mov	r9, r3
 8009d6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d70:	2200      	movs	r2, #0
 8009d72:	6072      	str	r2, [r6, #4]
 8009d74:	2204      	movs	r2, #4
 8009d76:	f102 0014 	add.w	r0, r2, #20
 8009d7a:	4298      	cmp	r0, r3
 8009d7c:	6871      	ldr	r1, [r6, #4]
 8009d7e:	d953      	bls.n	8009e28 <_dtoa_r+0x300>
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fe88 	bl	800aa96 <_Balloc>
 8009d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d88:	6030      	str	r0, [r6, #0]
 8009d8a:	f1b9 0f0e 	cmp.w	r9, #14
 8009d8e:	f8d3 b000 	ldr.w	fp, [r3]
 8009d92:	f200 80e6 	bhi.w	8009f62 <_dtoa_r+0x43a>
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	f000 80e3 	beq.w	8009f62 <_dtoa_r+0x43a>
 8009d9c:	ed9d 7b00 	vldr	d7, [sp]
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009da8:	dd74      	ble.n	8009e94 <_dtoa_r+0x36c>
 8009daa:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <_dtoa_r+0x32c>)
 8009dac:	f00a 030f 	and.w	r3, sl, #15
 8009db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009db4:	ed93 7b00 	vldr	d7, [r3]
 8009db8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009dbc:	06f0      	lsls	r0, r6, #27
 8009dbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009dc2:	d565      	bpl.n	8009e90 <_dtoa_r+0x368>
 8009dc4:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <_dtoa_r+0x330>)
 8009dc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8009dd6:	f006 060f 	and.w	r6, r6, #15
 8009dda:	2503      	movs	r5, #3
 8009ddc:	4f1e      	ldr	r7, [pc, #120]	; (8009e58 <_dtoa_r+0x330>)
 8009dde:	e04c      	b.n	8009e7a <_dtoa_r+0x352>
 8009de0:	2301      	movs	r3, #1
 8009de2:	930a      	str	r3, [sp, #40]	; 0x28
 8009de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de6:	4453      	add	r3, sl
 8009de8:	f103 0901 	add.w	r9, r3, #1
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	464b      	mov	r3, r9
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	bfb8      	it	lt
 8009df4:	2301      	movlt	r3, #1
 8009df6:	e7ba      	b.n	8009d6e <_dtoa_r+0x246>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e7b2      	b.n	8009d62 <_dtoa_r+0x23a>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e7f0      	b.n	8009de2 <_dtoa_r+0x2ba>
 8009e00:	2501      	movs	r5, #1
 8009e02:	2300      	movs	r3, #0
 8009e04:	9306      	str	r3, [sp, #24]
 8009e06:	950a      	str	r5, [sp, #40]	; 0x28
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	9302      	str	r3, [sp, #8]
 8009e0e:	4699      	mov	r9, r3
 8009e10:	2200      	movs	r2, #0
 8009e12:	2312      	movs	r3, #18
 8009e14:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e16:	e7aa      	b.n	8009d6e <_dtoa_r+0x246>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e1c:	e7f4      	b.n	8009e08 <_dtoa_r+0x2e0>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	9302      	str	r3, [sp, #8]
 8009e22:	4699      	mov	r9, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	e7f5      	b.n	8009e14 <_dtoa_r+0x2ec>
 8009e28:	3101      	adds	r1, #1
 8009e2a:	6071      	str	r1, [r6, #4]
 8009e2c:	0052      	lsls	r2, r2, #1
 8009e2e:	e7a2      	b.n	8009d76 <_dtoa_r+0x24e>
 8009e30:	636f4361 	.word	0x636f4361
 8009e34:	3fd287a7 	.word	0x3fd287a7
 8009e38:	8b60c8b3 	.word	0x8b60c8b3
 8009e3c:	3fc68a28 	.word	0x3fc68a28
 8009e40:	509f79fb 	.word	0x509f79fb
 8009e44:	3fd34413 	.word	0x3fd34413
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	0800b7e5 	.word	0x0800b7e5
 8009e50:	3ff80000 	.word	0x3ff80000
 8009e54:	0800b8a0 	.word	0x0800b8a0
 8009e58:	0800b878 	.word	0x0800b878
 8009e5c:	0800b811 	.word	0x0800b811
 8009e60:	07f1      	lsls	r1, r6, #31
 8009e62:	d508      	bpl.n	8009e76 <_dtoa_r+0x34e>
 8009e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e6c:	f7f6 fbc4 	bl	80005f8 <__aeabi_dmul>
 8009e70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e74:	3501      	adds	r5, #1
 8009e76:	1076      	asrs	r6, r6, #1
 8009e78:	3708      	adds	r7, #8
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d1f0      	bne.n	8009e60 <_dtoa_r+0x338>
 8009e7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e86:	f7f6 fce1 	bl	800084c <__aeabi_ddiv>
 8009e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8009e8e:	e01a      	b.n	8009ec6 <_dtoa_r+0x39e>
 8009e90:	2502      	movs	r5, #2
 8009e92:	e7a3      	b.n	8009ddc <_dtoa_r+0x2b4>
 8009e94:	f000 80a0 	beq.w	8009fd8 <_dtoa_r+0x4b0>
 8009e98:	f1ca 0600 	rsb	r6, sl, #0
 8009e9c:	4b9f      	ldr	r3, [pc, #636]	; (800a11c <_dtoa_r+0x5f4>)
 8009e9e:	4fa0      	ldr	r7, [pc, #640]	; (800a120 <_dtoa_r+0x5f8>)
 8009ea0:	f006 020f 	and.w	r2, r6, #15
 8009ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eb0:	f7f6 fba2 	bl	80005f8 <__aeabi_dmul>
 8009eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb8:	1136      	asrs	r6, r6, #4
 8009eba:	2300      	movs	r3, #0
 8009ebc:	2502      	movs	r5, #2
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d17f      	bne.n	8009fc2 <_dtoa_r+0x49a>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e1      	bne.n	8009e8a <_dtoa_r+0x362>
 8009ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 8087 	beq.w	8009fdc <_dtoa_r+0x4b4>
 8009ece:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4b93      	ldr	r3, [pc, #588]	; (800a124 <_dtoa_r+0x5fc>)
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fdff 	bl	8000adc <__aeabi_dcmplt>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d07c      	beq.n	8009fdc <_dtoa_r+0x4b4>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d079      	beq.n	8009fdc <_dtoa_r+0x4b4>
 8009ee8:	9b02      	ldr	r3, [sp, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	dd35      	ble.n	8009f5a <_dtoa_r+0x432>
 8009eee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b8b      	ldr	r3, [pc, #556]	; (800a128 <_dtoa_r+0x600>)
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	e9cd 0100 	strd	r0, r1, [sp]
 8009f04:	9f02      	ldr	r7, [sp, #8]
 8009f06:	3501      	adds	r5, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7f6 fb0b 	bl	8000524 <__aeabi_i2d>
 8009f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f12:	f7f6 fb71 	bl	80005f8 <__aeabi_dmul>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4b84      	ldr	r3, [pc, #528]	; (800a12c <_dtoa_r+0x604>)
 8009f1a:	f7f6 f9b7 	bl	800028c <__adddf3>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f24:	2f00      	cmp	r7, #0
 8009f26:	d15d      	bne.n	8009fe4 <_dtoa_r+0x4bc>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4b81      	ldr	r3, [pc, #516]	; (800a130 <_dtoa_r+0x608>)
 8009f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f30:	f7f6 f9aa 	bl	8000288 <__aeabi_dsub>
 8009f34:	462a      	mov	r2, r5
 8009f36:	4633      	mov	r3, r6
 8009f38:	e9cd 0100 	strd	r0, r1, [sp]
 8009f3c:	f7f6 fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f040 8288 	bne.w	800a456 <_dtoa_r+0x92e>
 8009f46:	462a      	mov	r2, r5
 8009f48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f50:	f7f6 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f040 827c 	bne.w	800a452 <_dtoa_r+0x92a>
 8009f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f2c0 8150 	blt.w	800a20a <_dtoa_r+0x6e2>
 8009f6a:	f1ba 0f0e 	cmp.w	sl, #14
 8009f6e:	f300 814c 	bgt.w	800a20a <_dtoa_r+0x6e2>
 8009f72:	4b6a      	ldr	r3, [pc, #424]	; (800a11c <_dtoa_r+0x5f4>)
 8009f74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f78:	ed93 7b00 	vldr	d7, [r3]
 8009f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f84:	f280 80d8 	bge.w	800a138 <_dtoa_r+0x610>
 8009f88:	f1b9 0f00 	cmp.w	r9, #0
 8009f8c:	f300 80d4 	bgt.w	800a138 <_dtoa_r+0x610>
 8009f90:	f040 825e 	bne.w	800a450 <_dtoa_r+0x928>
 8009f94:	2200      	movs	r2, #0
 8009f96:	4b66      	ldr	r3, [pc, #408]	; (800a130 <_dtoa_r+0x608>)
 8009f98:	ec51 0b17 	vmov	r0, r1, d7
 8009f9c:	f7f6 fb2c 	bl	80005f8 <__aeabi_dmul>
 8009fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa4:	f7f6 fdae 	bl	8000b04 <__aeabi_dcmpge>
 8009fa8:	464f      	mov	r7, r9
 8009faa:	464e      	mov	r6, r9
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f040 8234 	bne.w	800a41a <_dtoa_r+0x8f2>
 8009fb2:	2331      	movs	r3, #49	; 0x31
 8009fb4:	f10b 0501 	add.w	r5, fp, #1
 8009fb8:	f88b 3000 	strb.w	r3, [fp]
 8009fbc:	f10a 0a01 	add.w	sl, sl, #1
 8009fc0:	e22f      	b.n	800a422 <_dtoa_r+0x8fa>
 8009fc2:	07f2      	lsls	r2, r6, #31
 8009fc4:	d505      	bpl.n	8009fd2 <_dtoa_r+0x4aa>
 8009fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	3501      	adds	r5, #1
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	1076      	asrs	r6, r6, #1
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	e772      	b.n	8009ebe <_dtoa_r+0x396>
 8009fd8:	2502      	movs	r5, #2
 8009fda:	e774      	b.n	8009ec6 <_dtoa_r+0x39e>
 8009fdc:	f8cd a020 	str.w	sl, [sp, #32]
 8009fe0:	464f      	mov	r7, r9
 8009fe2:	e791      	b.n	8009f08 <_dtoa_r+0x3e0>
 8009fe4:	4b4d      	ldr	r3, [pc, #308]	; (800a11c <_dtoa_r+0x5f4>)
 8009fe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d047      	beq.n	800a084 <_dtoa_r+0x55c>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	494e      	ldr	r1, [pc, #312]	; (800a134 <_dtoa_r+0x60c>)
 8009ffc:	f7f6 fc26 	bl	800084c <__aeabi_ddiv>
 800a000:	462a      	mov	r2, r5
 800a002:	4633      	mov	r3, r6
 800a004:	f7f6 f940 	bl	8000288 <__aeabi_dsub>
 800a008:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a00c:	465d      	mov	r5, fp
 800a00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a012:	f7f6 fda1 	bl	8000b58 <__aeabi_d2iz>
 800a016:	4606      	mov	r6, r0
 800a018:	f7f6 fa84 	bl	8000524 <__aeabi_i2d>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	3630      	adds	r6, #48	; 0x30
 800a02a:	f805 6b01 	strb.w	r6, [r5], #1
 800a02e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a032:	e9cd 0100 	strd	r0, r1, [sp]
 800a036:	f7f6 fd51 	bl	8000adc <__aeabi_dcmplt>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d163      	bne.n	800a106 <_dtoa_r+0x5de>
 800a03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a042:	2000      	movs	r0, #0
 800a044:	4937      	ldr	r1, [pc, #220]	; (800a124 <_dtoa_r+0x5fc>)
 800a046:	f7f6 f91f 	bl	8000288 <__aeabi_dsub>
 800a04a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a04e:	f7f6 fd45 	bl	8000adc <__aeabi_dcmplt>
 800a052:	2800      	cmp	r0, #0
 800a054:	f040 80b7 	bne.w	800a1c6 <_dtoa_r+0x69e>
 800a058:	eba5 030b 	sub.w	r3, r5, fp
 800a05c:	429f      	cmp	r7, r3
 800a05e:	f77f af7c 	ble.w	8009f5a <_dtoa_r+0x432>
 800a062:	2200      	movs	r2, #0
 800a064:	4b30      	ldr	r3, [pc, #192]	; (800a128 <_dtoa_r+0x600>)
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a06a:	f7f6 fac5 	bl	80005f8 <__aeabi_dmul>
 800a06e:	2200      	movs	r2, #0
 800a070:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a074:	4b2c      	ldr	r3, [pc, #176]	; (800a128 <_dtoa_r+0x600>)
 800a076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	e9cd 0100 	strd	r0, r1, [sp]
 800a082:	e7c4      	b.n	800a00e <_dtoa_r+0x4e6>
 800a084:	462a      	mov	r2, r5
 800a086:	4633      	mov	r3, r6
 800a088:	f7f6 fab6 	bl	80005f8 <__aeabi_dmul>
 800a08c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a090:	eb0b 0507 	add.w	r5, fp, r7
 800a094:	465e      	mov	r6, fp
 800a096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a09a:	f7f6 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f7f6 fa40 	bl	8000524 <__aeabi_i2d>
 800a0a4:	3730      	adds	r7, #48	; 0x30
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ae:	f7f6 f8eb 	bl	8000288 <__aeabi_dsub>
 800a0b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a0b6:	42ae      	cmp	r6, r5
 800a0b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	d126      	bne.n	800a110 <_dtoa_r+0x5e8>
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <_dtoa_r+0x60c>)
 800a0c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c8:	f7f6 f8e0 	bl	800028c <__adddf3>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0d4:	f7f6 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d174      	bne.n	800a1c6 <_dtoa_r+0x69e>
 800a0dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	4914      	ldr	r1, [pc, #80]	; (800a134 <_dtoa_r+0x60c>)
 800a0e4:	f7f6 f8d0 	bl	8000288 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0f0:	f7f6 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f af30 	beq.w	8009f5a <_dtoa_r+0x432>
 800a0fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0fe:	2b30      	cmp	r3, #48	; 0x30
 800a100:	f105 32ff 	add.w	r2, r5, #4294967295
 800a104:	d002      	beq.n	800a10c <_dtoa_r+0x5e4>
 800a106:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a10a:	e04a      	b.n	800a1a2 <_dtoa_r+0x67a>
 800a10c:	4615      	mov	r5, r2
 800a10e:	e7f4      	b.n	800a0fa <_dtoa_r+0x5d2>
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <_dtoa_r+0x600>)
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	e9cd 0100 	strd	r0, r1, [sp]
 800a11a:	e7bc      	b.n	800a096 <_dtoa_r+0x56e>
 800a11c:	0800b8a0 	.word	0x0800b8a0
 800a120:	0800b878 	.word	0x0800b878
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	40240000 	.word	0x40240000
 800a12c:	401c0000 	.word	0x401c0000
 800a130:	40140000 	.word	0x40140000
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a13c:	465d      	mov	r5, fp
 800a13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	f7f6 fb81 	bl	800084c <__aeabi_ddiv>
 800a14a:	f7f6 fd05 	bl	8000b58 <__aeabi_d2iz>
 800a14e:	4680      	mov	r8, r0
 800a150:	f7f6 f9e8 	bl	8000524 <__aeabi_i2d>
 800a154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a158:	f7f6 fa4e 	bl	80005f8 <__aeabi_dmul>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4630      	mov	r0, r6
 800a162:	4639      	mov	r1, r7
 800a164:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a168:	f7f6 f88e 	bl	8000288 <__aeabi_dsub>
 800a16c:	f805 6b01 	strb.w	r6, [r5], #1
 800a170:	eba5 060b 	sub.w	r6, r5, fp
 800a174:	45b1      	cmp	r9, r6
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	d139      	bne.n	800a1f0 <_dtoa_r+0x6c8>
 800a17c:	f7f6 f886 	bl	800028c <__adddf3>
 800a180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a184:	4606      	mov	r6, r0
 800a186:	460f      	mov	r7, r1
 800a188:	f7f6 fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800a18c:	b9c8      	cbnz	r0, 800a1c2 <_dtoa_r+0x69a>
 800a18e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19a:	b110      	cbz	r0, 800a1a2 <_dtoa_r+0x67a>
 800a19c:	f018 0f01 	tst.w	r8, #1
 800a1a0:	d10f      	bne.n	800a1c2 <_dtoa_r+0x69a>
 800a1a2:	9904      	ldr	r1, [sp, #16]
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fcaa 	bl	800aafe <_Bfree>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1ae:	702b      	strb	r3, [r5, #0]
 800a1b0:	f10a 0301 	add.w	r3, sl, #1
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8241 	beq.w	800a640 <_dtoa_r+0xb18>
 800a1be:	601d      	str	r5, [r3, #0]
 800a1c0:	e23e      	b.n	800a640 <_dtoa_r+0xb18>
 800a1c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a1c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1ca:	2a39      	cmp	r2, #57	; 0x39
 800a1cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a1d0:	d108      	bne.n	800a1e4 <_dtoa_r+0x6bc>
 800a1d2:	459b      	cmp	fp, r3
 800a1d4:	d10a      	bne.n	800a1ec <_dtoa_r+0x6c4>
 800a1d6:	9b08      	ldr	r3, [sp, #32]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	9308      	str	r3, [sp, #32]
 800a1dc:	2330      	movs	r3, #48	; 0x30
 800a1de:	f88b 3000 	strb.w	r3, [fp]
 800a1e2:	465b      	mov	r3, fp
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	3201      	adds	r2, #1
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	e78c      	b.n	800a106 <_dtoa_r+0x5de>
 800a1ec:	461d      	mov	r5, r3
 800a1ee:	e7ea      	b.n	800a1c6 <_dtoa_r+0x69e>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4b9b      	ldr	r3, [pc, #620]	; (800a460 <_dtoa_r+0x938>)
 800a1f4:	f7f6 fa00 	bl	80005f8 <__aeabi_dmul>
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	f7f6 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 800a204:	2800      	cmp	r0, #0
 800a206:	d09a      	beq.n	800a13e <_dtoa_r+0x616>
 800a208:	e7cb      	b.n	800a1a2 <_dtoa_r+0x67a>
 800a20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	f000 808b 	beq.w	800a328 <_dtoa_r+0x800>
 800a212:	9a06      	ldr	r2, [sp, #24]
 800a214:	2a01      	cmp	r2, #1
 800a216:	dc6e      	bgt.n	800a2f6 <_dtoa_r+0x7ce>
 800a218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	d067      	beq.n	800a2ee <_dtoa_r+0x7c6>
 800a21e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a222:	9f07      	ldr	r7, [sp, #28]
 800a224:	9d05      	ldr	r5, [sp, #20]
 800a226:	9a05      	ldr	r2, [sp, #20]
 800a228:	2101      	movs	r1, #1
 800a22a:	441a      	add	r2, r3
 800a22c:	4620      	mov	r0, r4
 800a22e:	9205      	str	r2, [sp, #20]
 800a230:	4498      	add	r8, r3
 800a232:	f000 fd04 	bl	800ac3e <__i2b>
 800a236:	4606      	mov	r6, r0
 800a238:	2d00      	cmp	r5, #0
 800a23a:	dd0c      	ble.n	800a256 <_dtoa_r+0x72e>
 800a23c:	f1b8 0f00 	cmp.w	r8, #0
 800a240:	dd09      	ble.n	800a256 <_dtoa_r+0x72e>
 800a242:	4545      	cmp	r5, r8
 800a244:	9a05      	ldr	r2, [sp, #20]
 800a246:	462b      	mov	r3, r5
 800a248:	bfa8      	it	ge
 800a24a:	4643      	movge	r3, r8
 800a24c:	1ad2      	subs	r2, r2, r3
 800a24e:	9205      	str	r2, [sp, #20]
 800a250:	1aed      	subs	r5, r5, r3
 800a252:	eba8 0803 	sub.w	r8, r8, r3
 800a256:	9b07      	ldr	r3, [sp, #28]
 800a258:	b1eb      	cbz	r3, 800a296 <_dtoa_r+0x76e>
 800a25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d067      	beq.n	800a330 <_dtoa_r+0x808>
 800a260:	b18f      	cbz	r7, 800a286 <_dtoa_r+0x75e>
 800a262:	4631      	mov	r1, r6
 800a264:	463a      	mov	r2, r7
 800a266:	4620      	mov	r0, r4
 800a268:	f000 fd88 	bl	800ad7c <__pow5mult>
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	4601      	mov	r1, r0
 800a270:	4606      	mov	r6, r0
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fcec 	bl	800ac50 <__multiply>
 800a278:	9904      	ldr	r1, [sp, #16]
 800a27a:	9008      	str	r0, [sp, #32]
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fc3e 	bl	800aafe <_Bfree>
 800a282:	9b08      	ldr	r3, [sp, #32]
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	9b07      	ldr	r3, [sp, #28]
 800a288:	1bda      	subs	r2, r3, r7
 800a28a:	d004      	beq.n	800a296 <_dtoa_r+0x76e>
 800a28c:	9904      	ldr	r1, [sp, #16]
 800a28e:	4620      	mov	r0, r4
 800a290:	f000 fd74 	bl	800ad7c <__pow5mult>
 800a294:	9004      	str	r0, [sp, #16]
 800a296:	2101      	movs	r1, #1
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fcd0 	bl	800ac3e <__i2b>
 800a29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 81d0 	beq.w	800a648 <_dtoa_r+0xb20>
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fd65 	bl	800ad7c <__pow5mult>
 800a2b2:	9b06      	ldr	r3, [sp, #24]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	dc40      	bgt.n	800a33c <_dtoa_r+0x814>
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d139      	bne.n	800a334 <_dtoa_r+0x80c>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d136      	bne.n	800a338 <_dtoa_r+0x810>
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d0:	0d1b      	lsrs	r3, r3, #20
 800a2d2:	051b      	lsls	r3, r3, #20
 800a2d4:	b12b      	cbz	r3, 800a2e2 <_dtoa_r+0x7ba>
 800a2d6:	9b05      	ldr	r3, [sp, #20]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f108 0801 	add.w	r8, r8, #1
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d12a      	bne.n	800a340 <_dtoa_r+0x818>
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	e030      	b.n	800a350 <_dtoa_r+0x828>
 800a2ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2f4:	e795      	b.n	800a222 <_dtoa_r+0x6fa>
 800a2f6:	9b07      	ldr	r3, [sp, #28]
 800a2f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a2fc:	42bb      	cmp	r3, r7
 800a2fe:	bfbf      	itttt	lt
 800a300:	9b07      	ldrlt	r3, [sp, #28]
 800a302:	9707      	strlt	r7, [sp, #28]
 800a304:	1afa      	sublt	r2, r7, r3
 800a306:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a308:	bfbb      	ittet	lt
 800a30a:	189b      	addlt	r3, r3, r2
 800a30c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a30e:	1bdf      	subge	r7, r3, r7
 800a310:	2700      	movlt	r7, #0
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	bfb5      	itete	lt
 800a318:	9b05      	ldrlt	r3, [sp, #20]
 800a31a:	9d05      	ldrge	r5, [sp, #20]
 800a31c:	eba3 0509 	sublt.w	r5, r3, r9
 800a320:	464b      	movge	r3, r9
 800a322:	bfb8      	it	lt
 800a324:	2300      	movlt	r3, #0
 800a326:	e77e      	b.n	800a226 <_dtoa_r+0x6fe>
 800a328:	9f07      	ldr	r7, [sp, #28]
 800a32a:	9d05      	ldr	r5, [sp, #20]
 800a32c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a32e:	e783      	b.n	800a238 <_dtoa_r+0x710>
 800a330:	9a07      	ldr	r2, [sp, #28]
 800a332:	e7ab      	b.n	800a28c <_dtoa_r+0x764>
 800a334:	2300      	movs	r3, #0
 800a336:	e7d4      	b.n	800a2e2 <_dtoa_r+0x7ba>
 800a338:	9b00      	ldr	r3, [sp, #0]
 800a33a:	e7d2      	b.n	800a2e2 <_dtoa_r+0x7ba>
 800a33c:	2300      	movs	r3, #0
 800a33e:	9307      	str	r3, [sp, #28]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a346:	6918      	ldr	r0, [r3, #16]
 800a348:	f000 fc2b 	bl	800aba2 <__hi0bits>
 800a34c:	f1c0 0020 	rsb	r0, r0, #32
 800a350:	4440      	add	r0, r8
 800a352:	f010 001f 	ands.w	r0, r0, #31
 800a356:	d047      	beq.n	800a3e8 <_dtoa_r+0x8c0>
 800a358:	f1c0 0320 	rsb	r3, r0, #32
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	dd3b      	ble.n	800a3d8 <_dtoa_r+0x8b0>
 800a360:	9b05      	ldr	r3, [sp, #20]
 800a362:	f1c0 001c 	rsb	r0, r0, #28
 800a366:	4403      	add	r3, r0
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	4405      	add	r5, r0
 800a36c:	4480      	add	r8, r0
 800a36e:	9b05      	ldr	r3, [sp, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	dd05      	ble.n	800a380 <_dtoa_r+0x858>
 800a374:	461a      	mov	r2, r3
 800a376:	9904      	ldr	r1, [sp, #16]
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fd4d 	bl	800ae18 <__lshift>
 800a37e:	9004      	str	r0, [sp, #16]
 800a380:	f1b8 0f00 	cmp.w	r8, #0
 800a384:	dd05      	ble.n	800a392 <_dtoa_r+0x86a>
 800a386:	4639      	mov	r1, r7
 800a388:	4642      	mov	r2, r8
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fd44 	bl	800ae18 <__lshift>
 800a390:	4607      	mov	r7, r0
 800a392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a394:	b353      	cbz	r3, 800a3ec <_dtoa_r+0x8c4>
 800a396:	4639      	mov	r1, r7
 800a398:	9804      	ldr	r0, [sp, #16]
 800a39a:	f000 fd91 	bl	800aec0 <__mcmp>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	da24      	bge.n	800a3ec <_dtoa_r+0x8c4>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	9904      	ldr	r1, [sp, #16]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fbbf 	bl	800ab2c <__multadd>
 800a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b0:	9004      	str	r0, [sp, #16]
 800a3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 814d 	beq.w	800a656 <_dtoa_r+0xb2e>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4631      	mov	r1, r6
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fbb2 	bl	800ab2c <__multadd>
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	dc4f      	bgt.n	800a470 <_dtoa_r+0x948>
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	dd4c      	ble.n	800a470 <_dtoa_r+0x948>
 800a3d6:	e011      	b.n	800a3fc <_dtoa_r+0x8d4>
 800a3d8:	d0c9      	beq.n	800a36e <_dtoa_r+0x846>
 800a3da:	9a05      	ldr	r2, [sp, #20]
 800a3dc:	331c      	adds	r3, #28
 800a3de:	441a      	add	r2, r3
 800a3e0:	9205      	str	r2, [sp, #20]
 800a3e2:	441d      	add	r5, r3
 800a3e4:	4498      	add	r8, r3
 800a3e6:	e7c2      	b.n	800a36e <_dtoa_r+0x846>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	e7f6      	b.n	800a3da <_dtoa_r+0x8b2>
 800a3ec:	f1b9 0f00 	cmp.w	r9, #0
 800a3f0:	dc38      	bgt.n	800a464 <_dtoa_r+0x93c>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	dd35      	ble.n	800a464 <_dtoa_r+0x93c>
 800a3f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3fc:	9b02      	ldr	r3, [sp, #8]
 800a3fe:	b963      	cbnz	r3, 800a41a <_dtoa_r+0x8f2>
 800a400:	4639      	mov	r1, r7
 800a402:	2205      	movs	r2, #5
 800a404:	4620      	mov	r0, r4
 800a406:	f000 fb91 	bl	800ab2c <__multadd>
 800a40a:	4601      	mov	r1, r0
 800a40c:	4607      	mov	r7, r0
 800a40e:	9804      	ldr	r0, [sp, #16]
 800a410:	f000 fd56 	bl	800aec0 <__mcmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	f73f adcc 	bgt.w	8009fb2 <_dtoa_r+0x48a>
 800a41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a41c:	465d      	mov	r5, fp
 800a41e:	ea6f 0a03 	mvn.w	sl, r3
 800a422:	f04f 0900 	mov.w	r9, #0
 800a426:	4639      	mov	r1, r7
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fb68 	bl	800aafe <_Bfree>
 800a42e:	2e00      	cmp	r6, #0
 800a430:	f43f aeb7 	beq.w	800a1a2 <_dtoa_r+0x67a>
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	d005      	beq.n	800a446 <_dtoa_r+0x91e>
 800a43a:	45b1      	cmp	r9, r6
 800a43c:	d003      	beq.n	800a446 <_dtoa_r+0x91e>
 800a43e:	4649      	mov	r1, r9
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fb5c 	bl	800aafe <_Bfree>
 800a446:	4631      	mov	r1, r6
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fb58 	bl	800aafe <_Bfree>
 800a44e:	e6a8      	b.n	800a1a2 <_dtoa_r+0x67a>
 800a450:	2700      	movs	r7, #0
 800a452:	463e      	mov	r6, r7
 800a454:	e7e1      	b.n	800a41a <_dtoa_r+0x8f2>
 800a456:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a45a:	463e      	mov	r6, r7
 800a45c:	e5a9      	b.n	8009fb2 <_dtoa_r+0x48a>
 800a45e:	bf00      	nop
 800a460:	40240000 	.word	0x40240000
 800a464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a466:	f8cd 9008 	str.w	r9, [sp, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80fa 	beq.w	800a664 <_dtoa_r+0xb3c>
 800a470:	2d00      	cmp	r5, #0
 800a472:	dd05      	ble.n	800a480 <_dtoa_r+0x958>
 800a474:	4631      	mov	r1, r6
 800a476:	462a      	mov	r2, r5
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 fccd 	bl	800ae18 <__lshift>
 800a47e:	4606      	mov	r6, r0
 800a480:	9b07      	ldr	r3, [sp, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d04c      	beq.n	800a520 <_dtoa_r+0x9f8>
 800a486:	6871      	ldr	r1, [r6, #4]
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fb04 	bl	800aa96 <_Balloc>
 800a48e:	6932      	ldr	r2, [r6, #16]
 800a490:	3202      	adds	r2, #2
 800a492:	4605      	mov	r5, r0
 800a494:	0092      	lsls	r2, r2, #2
 800a496:	f106 010c 	add.w	r1, r6, #12
 800a49a:	300c      	adds	r0, #12
 800a49c:	f000 faf0 	bl	800aa80 <memcpy>
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 fcb7 	bl	800ae18 <__lshift>
 800a4aa:	9b00      	ldr	r3, [sp, #0]
 800a4ac:	f8cd b014 	str.w	fp, [sp, #20]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	46b1      	mov	r9, r6
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	9804      	ldr	r0, [sp, #16]
 800a4be:	f7ff faa5 	bl	8009a0c <quorem>
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a4ca:	9804      	ldr	r0, [sp, #16]
 800a4cc:	f000 fcf8 	bl	800aec0 <__mcmp>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	9000      	str	r0, [sp, #0]
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fd0c 	bl	800aef4 <__mdiff>
 800a4dc:	68c3      	ldr	r3, [r0, #12]
 800a4de:	4602      	mov	r2, r0
 800a4e0:	bb03      	cbnz	r3, 800a524 <_dtoa_r+0x9fc>
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	9008      	str	r0, [sp, #32]
 800a4e6:	9804      	ldr	r0, [sp, #16]
 800a4e8:	f000 fcea 	bl	800aec0 <__mcmp>
 800a4ec:	9a08      	ldr	r2, [sp, #32]
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	9308      	str	r3, [sp, #32]
 800a4f6:	f000 fb02 	bl	800aafe <_Bfree>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	b9a3      	cbnz	r3, 800a528 <_dtoa_r+0xa00>
 800a4fe:	9a06      	ldr	r2, [sp, #24]
 800a500:	b992      	cbnz	r2, 800a528 <_dtoa_r+0xa00>
 800a502:	9a07      	ldr	r2, [sp, #28]
 800a504:	b982      	cbnz	r2, 800a528 <_dtoa_r+0xa00>
 800a506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a50a:	d029      	beq.n	800a560 <_dtoa_r+0xa38>
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dd01      	ble.n	800a516 <_dtoa_r+0x9ee>
 800a512:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a516:	9b05      	ldr	r3, [sp, #20]
 800a518:	1c5d      	adds	r5, r3, #1
 800a51a:	f883 8000 	strb.w	r8, [r3]
 800a51e:	e782      	b.n	800a426 <_dtoa_r+0x8fe>
 800a520:	4630      	mov	r0, r6
 800a522:	e7c2      	b.n	800a4aa <_dtoa_r+0x982>
 800a524:	2301      	movs	r3, #1
 800a526:	e7e3      	b.n	800a4f0 <_dtoa_r+0x9c8>
 800a528:	9a00      	ldr	r2, [sp, #0]
 800a52a:	2a00      	cmp	r2, #0
 800a52c:	db04      	blt.n	800a538 <_dtoa_r+0xa10>
 800a52e:	d125      	bne.n	800a57c <_dtoa_r+0xa54>
 800a530:	9a06      	ldr	r2, [sp, #24]
 800a532:	bb1a      	cbnz	r2, 800a57c <_dtoa_r+0xa54>
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	bb0a      	cbnz	r2, 800a57c <_dtoa_r+0xa54>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	ddec      	ble.n	800a516 <_dtoa_r+0x9ee>
 800a53c:	2201      	movs	r2, #1
 800a53e:	9904      	ldr	r1, [sp, #16]
 800a540:	4620      	mov	r0, r4
 800a542:	f000 fc69 	bl	800ae18 <__lshift>
 800a546:	4639      	mov	r1, r7
 800a548:	9004      	str	r0, [sp, #16]
 800a54a:	f000 fcb9 	bl	800aec0 <__mcmp>
 800a54e:	2800      	cmp	r0, #0
 800a550:	dc03      	bgt.n	800a55a <_dtoa_r+0xa32>
 800a552:	d1e0      	bne.n	800a516 <_dtoa_r+0x9ee>
 800a554:	f018 0f01 	tst.w	r8, #1
 800a558:	d0dd      	beq.n	800a516 <_dtoa_r+0x9ee>
 800a55a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a55e:	d1d8      	bne.n	800a512 <_dtoa_r+0x9ea>
 800a560:	9b05      	ldr	r3, [sp, #20]
 800a562:	9a05      	ldr	r2, [sp, #20]
 800a564:	1c5d      	adds	r5, r3, #1
 800a566:	2339      	movs	r3, #57	; 0x39
 800a568:	7013      	strb	r3, [r2, #0]
 800a56a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a56e:	2b39      	cmp	r3, #57	; 0x39
 800a570:	f105 32ff 	add.w	r2, r5, #4294967295
 800a574:	d04f      	beq.n	800a616 <_dtoa_r+0xaee>
 800a576:	3301      	adds	r3, #1
 800a578:	7013      	strb	r3, [r2, #0]
 800a57a:	e754      	b.n	800a426 <_dtoa_r+0x8fe>
 800a57c:	9a05      	ldr	r2, [sp, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f102 0501 	add.w	r5, r2, #1
 800a584:	dd06      	ble.n	800a594 <_dtoa_r+0xa6c>
 800a586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a58a:	d0e9      	beq.n	800a560 <_dtoa_r+0xa38>
 800a58c:	f108 0801 	add.w	r8, r8, #1
 800a590:	9b05      	ldr	r3, [sp, #20]
 800a592:	e7c2      	b.n	800a51a <_dtoa_r+0x9f2>
 800a594:	9a02      	ldr	r2, [sp, #8]
 800a596:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a59a:	eba5 030b 	sub.w	r3, r5, fp
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d021      	beq.n	800a5e6 <_dtoa_r+0xabe>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	9904      	ldr	r1, [sp, #16]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fabf 	bl	800ab2c <__multadd>
 800a5ae:	45b1      	cmp	r9, r6
 800a5b0:	9004      	str	r0, [sp, #16]
 800a5b2:	f04f 0300 	mov.w	r3, #0
 800a5b6:	f04f 020a 	mov.w	r2, #10
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4620      	mov	r0, r4
 800a5be:	d105      	bne.n	800a5cc <_dtoa_r+0xaa4>
 800a5c0:	f000 fab4 	bl	800ab2c <__multadd>
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	9505      	str	r5, [sp, #20]
 800a5ca:	e776      	b.n	800a4ba <_dtoa_r+0x992>
 800a5cc:	f000 faae 	bl	800ab2c <__multadd>
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4681      	mov	r9, r0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 faa7 	bl	800ab2c <__multadd>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	e7f2      	b.n	800a5c8 <_dtoa_r+0xaa0>
 800a5e2:	f04f 0900 	mov.w	r9, #0
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	9904      	ldr	r1, [sp, #16]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fc14 	bl	800ae18 <__lshift>
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	9004      	str	r0, [sp, #16]
 800a5f4:	f000 fc64 	bl	800aec0 <__mcmp>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dcb6      	bgt.n	800a56a <_dtoa_r+0xa42>
 800a5fc:	d102      	bne.n	800a604 <_dtoa_r+0xadc>
 800a5fe:	f018 0f01 	tst.w	r8, #1
 800a602:	d1b2      	bne.n	800a56a <_dtoa_r+0xa42>
 800a604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a608:	2b30      	cmp	r3, #48	; 0x30
 800a60a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a60e:	f47f af0a 	bne.w	800a426 <_dtoa_r+0x8fe>
 800a612:	4615      	mov	r5, r2
 800a614:	e7f6      	b.n	800a604 <_dtoa_r+0xadc>
 800a616:	4593      	cmp	fp, r2
 800a618:	d105      	bne.n	800a626 <_dtoa_r+0xafe>
 800a61a:	2331      	movs	r3, #49	; 0x31
 800a61c:	f10a 0a01 	add.w	sl, sl, #1
 800a620:	f88b 3000 	strb.w	r3, [fp]
 800a624:	e6ff      	b.n	800a426 <_dtoa_r+0x8fe>
 800a626:	4615      	mov	r5, r2
 800a628:	e79f      	b.n	800a56a <_dtoa_r+0xa42>
 800a62a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a690 <_dtoa_r+0xb68>
 800a62e:	e007      	b.n	800a640 <_dtoa_r+0xb18>
 800a630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a632:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a694 <_dtoa_r+0xb6c>
 800a636:	b11b      	cbz	r3, 800a640 <_dtoa_r+0xb18>
 800a638:	f10b 0308 	add.w	r3, fp, #8
 800a63c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	4658      	mov	r0, fp
 800a642:	b017      	add	sp, #92	; 0x5c
 800a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a648:	9b06      	ldr	r3, [sp, #24]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	f77f ae35 	ble.w	800a2ba <_dtoa_r+0x792>
 800a650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	e649      	b.n	800a2ea <_dtoa_r+0x7c2>
 800a656:	9b02      	ldr	r3, [sp, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dc03      	bgt.n	800a664 <_dtoa_r+0xb3c>
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	f73f aecc 	bgt.w	800a3fc <_dtoa_r+0x8d4>
 800a664:	465d      	mov	r5, fp
 800a666:	4639      	mov	r1, r7
 800a668:	9804      	ldr	r0, [sp, #16]
 800a66a:	f7ff f9cf 	bl	8009a0c <quorem>
 800a66e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a672:	f805 8b01 	strb.w	r8, [r5], #1
 800a676:	9a02      	ldr	r2, [sp, #8]
 800a678:	eba5 030b 	sub.w	r3, r5, fp
 800a67c:	429a      	cmp	r2, r3
 800a67e:	ddb0      	ble.n	800a5e2 <_dtoa_r+0xaba>
 800a680:	2300      	movs	r3, #0
 800a682:	220a      	movs	r2, #10
 800a684:	9904      	ldr	r1, [sp, #16]
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fa50 	bl	800ab2c <__multadd>
 800a68c:	9004      	str	r0, [sp, #16]
 800a68e:	e7ea      	b.n	800a666 <_dtoa_r+0xb3e>
 800a690:	0800b7e4 	.word	0x0800b7e4
 800a694:	0800b808 	.word	0x0800b808

0800a698 <__sflush_r>:
 800a698:	898a      	ldrh	r2, [r1, #12]
 800a69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69e:	4605      	mov	r5, r0
 800a6a0:	0710      	lsls	r0, r2, #28
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	d458      	bmi.n	800a758 <__sflush_r+0xc0>
 800a6a6:	684b      	ldr	r3, [r1, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dc05      	bgt.n	800a6b8 <__sflush_r+0x20>
 800a6ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	dc02      	bgt.n	800a6b8 <__sflush_r+0x20>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ba:	2e00      	cmp	r6, #0
 800a6bc:	d0f9      	beq.n	800a6b2 <__sflush_r+0x1a>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6c4:	682f      	ldr	r7, [r5, #0]
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	602b      	str	r3, [r5, #0]
 800a6ca:	d032      	beq.n	800a732 <__sflush_r+0x9a>
 800a6cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	075a      	lsls	r2, r3, #29
 800a6d2:	d505      	bpl.n	800a6e0 <__sflush_r+0x48>
 800a6d4:	6863      	ldr	r3, [r4, #4]
 800a6d6:	1ac0      	subs	r0, r0, r3
 800a6d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6da:	b10b      	cbz	r3, 800a6e0 <__sflush_r+0x48>
 800a6dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6de:	1ac0      	subs	r0, r0, r3
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6e6:	6a21      	ldr	r1, [r4, #32]
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b0      	blx	r6
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	d106      	bne.n	800a700 <__sflush_r+0x68>
 800a6f2:	6829      	ldr	r1, [r5, #0]
 800a6f4:	291d      	cmp	r1, #29
 800a6f6:	d848      	bhi.n	800a78a <__sflush_r+0xf2>
 800a6f8:	4a29      	ldr	r2, [pc, #164]	; (800a7a0 <__sflush_r+0x108>)
 800a6fa:	40ca      	lsrs	r2, r1
 800a6fc:	07d6      	lsls	r6, r2, #31
 800a6fe:	d544      	bpl.n	800a78a <__sflush_r+0xf2>
 800a700:	2200      	movs	r2, #0
 800a702:	6062      	str	r2, [r4, #4]
 800a704:	04d9      	lsls	r1, r3, #19
 800a706:	6922      	ldr	r2, [r4, #16]
 800a708:	6022      	str	r2, [r4, #0]
 800a70a:	d504      	bpl.n	800a716 <__sflush_r+0x7e>
 800a70c:	1c42      	adds	r2, r0, #1
 800a70e:	d101      	bne.n	800a714 <__sflush_r+0x7c>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b903      	cbnz	r3, 800a716 <__sflush_r+0x7e>
 800a714:	6560      	str	r0, [r4, #84]	; 0x54
 800a716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a718:	602f      	str	r7, [r5, #0]
 800a71a:	2900      	cmp	r1, #0
 800a71c:	d0c9      	beq.n	800a6b2 <__sflush_r+0x1a>
 800a71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a722:	4299      	cmp	r1, r3
 800a724:	d002      	beq.n	800a72c <__sflush_r+0x94>
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fc9e 	bl	800b068 <_free_r>
 800a72c:	2000      	movs	r0, #0
 800a72e:	6360      	str	r0, [r4, #52]	; 0x34
 800a730:	e7c0      	b.n	800a6b4 <__sflush_r+0x1c>
 800a732:	2301      	movs	r3, #1
 800a734:	4628      	mov	r0, r5
 800a736:	47b0      	blx	r6
 800a738:	1c41      	adds	r1, r0, #1
 800a73a:	d1c8      	bne.n	800a6ce <__sflush_r+0x36>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0c5      	beq.n	800a6ce <__sflush_r+0x36>
 800a742:	2b1d      	cmp	r3, #29
 800a744:	d001      	beq.n	800a74a <__sflush_r+0xb2>
 800a746:	2b16      	cmp	r3, #22
 800a748:	d101      	bne.n	800a74e <__sflush_r+0xb6>
 800a74a:	602f      	str	r7, [r5, #0]
 800a74c:	e7b1      	b.n	800a6b2 <__sflush_r+0x1a>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a754:	81a3      	strh	r3, [r4, #12]
 800a756:	e7ad      	b.n	800a6b4 <__sflush_r+0x1c>
 800a758:	690f      	ldr	r7, [r1, #16]
 800a75a:	2f00      	cmp	r7, #0
 800a75c:	d0a9      	beq.n	800a6b2 <__sflush_r+0x1a>
 800a75e:	0793      	lsls	r3, r2, #30
 800a760:	680e      	ldr	r6, [r1, #0]
 800a762:	bf08      	it	eq
 800a764:	694b      	ldreq	r3, [r1, #20]
 800a766:	600f      	str	r7, [r1, #0]
 800a768:	bf18      	it	ne
 800a76a:	2300      	movne	r3, #0
 800a76c:	eba6 0807 	sub.w	r8, r6, r7
 800a770:	608b      	str	r3, [r1, #8]
 800a772:	f1b8 0f00 	cmp.w	r8, #0
 800a776:	dd9c      	ble.n	800a6b2 <__sflush_r+0x1a>
 800a778:	4643      	mov	r3, r8
 800a77a:	463a      	mov	r2, r7
 800a77c:	6a21      	ldr	r1, [r4, #32]
 800a77e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a780:	4628      	mov	r0, r5
 800a782:	47b0      	blx	r6
 800a784:	2800      	cmp	r0, #0
 800a786:	dc06      	bgt.n	800a796 <__sflush_r+0xfe>
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	f04f 30ff 	mov.w	r0, #4294967295
 800a794:	e78e      	b.n	800a6b4 <__sflush_r+0x1c>
 800a796:	4407      	add	r7, r0
 800a798:	eba8 0800 	sub.w	r8, r8, r0
 800a79c:	e7e9      	b.n	800a772 <__sflush_r+0xda>
 800a79e:	bf00      	nop
 800a7a0:	20400001 	.word	0x20400001

0800a7a4 <_fflush_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	690b      	ldr	r3, [r1, #16]
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	b1db      	cbz	r3, 800a7e6 <_fflush_r+0x42>
 800a7ae:	b118      	cbz	r0, 800a7b8 <_fflush_r+0x14>
 800a7b0:	6983      	ldr	r3, [r0, #24]
 800a7b2:	b90b      	cbnz	r3, 800a7b8 <_fflush_r+0x14>
 800a7b4:	f000 f860 	bl	800a878 <__sinit>
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <_fflush_r+0x48>)
 800a7ba:	429c      	cmp	r4, r3
 800a7bc:	d109      	bne.n	800a7d2 <_fflush_r+0x2e>
 800a7be:	686c      	ldr	r4, [r5, #4]
 800a7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c4:	b17b      	cbz	r3, 800a7e6 <_fflush_r+0x42>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ce:	f7ff bf63 	b.w	800a698 <__sflush_r>
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <_fflush_r+0x4c>)
 800a7d4:	429c      	cmp	r4, r3
 800a7d6:	d101      	bne.n	800a7dc <_fflush_r+0x38>
 800a7d8:	68ac      	ldr	r4, [r5, #8]
 800a7da:	e7f1      	b.n	800a7c0 <_fflush_r+0x1c>
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <_fflush_r+0x50>)
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	bf08      	it	eq
 800a7e2:	68ec      	ldreq	r4, [r5, #12]
 800a7e4:	e7ec      	b.n	800a7c0 <_fflush_r+0x1c>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0800b838 	.word	0x0800b838
 800a7f0:	0800b858 	.word	0x0800b858
 800a7f4:	0800b818 	.word	0x0800b818

0800a7f8 <std>:
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	b510      	push	{r4, lr}
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a802:	6083      	str	r3, [r0, #8]
 800a804:	8181      	strh	r1, [r0, #12]
 800a806:	6643      	str	r3, [r0, #100]	; 0x64
 800a808:	81c2      	strh	r2, [r0, #14]
 800a80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a80e:	6183      	str	r3, [r0, #24]
 800a810:	4619      	mov	r1, r3
 800a812:	2208      	movs	r2, #8
 800a814:	305c      	adds	r0, #92	; 0x5c
 800a816:	f7fe faa3 	bl	8008d60 <memset>
 800a81a:	4b05      	ldr	r3, [pc, #20]	; (800a830 <std+0x38>)
 800a81c:	6263      	str	r3, [r4, #36]	; 0x24
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <std+0x3c>)
 800a820:	62a3      	str	r3, [r4, #40]	; 0x28
 800a822:	4b05      	ldr	r3, [pc, #20]	; (800a838 <std+0x40>)
 800a824:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <std+0x44>)
 800a828:	6224      	str	r4, [r4, #32]
 800a82a:	6323      	str	r3, [r4, #48]	; 0x30
 800a82c:	bd10      	pop	{r4, pc}
 800a82e:	bf00      	nop
 800a830:	0800b459 	.word	0x0800b459
 800a834:	0800b47b 	.word	0x0800b47b
 800a838:	0800b4b3 	.word	0x0800b4b3
 800a83c:	0800b4d7 	.word	0x0800b4d7

0800a840 <_cleanup_r>:
 800a840:	4901      	ldr	r1, [pc, #4]	; (800a848 <_cleanup_r+0x8>)
 800a842:	f000 b885 	b.w	800a950 <_fwalk_reent>
 800a846:	bf00      	nop
 800a848:	0800a7a5 	.word	0x0800a7a5

0800a84c <__sfmoreglue>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	1e4a      	subs	r2, r1, #1
 800a850:	2568      	movs	r5, #104	; 0x68
 800a852:	4355      	muls	r5, r2
 800a854:	460e      	mov	r6, r1
 800a856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a85a:	f000 fc53 	bl	800b104 <_malloc_r>
 800a85e:	4604      	mov	r4, r0
 800a860:	b140      	cbz	r0, 800a874 <__sfmoreglue+0x28>
 800a862:	2100      	movs	r1, #0
 800a864:	e9c0 1600 	strd	r1, r6, [r0]
 800a868:	300c      	adds	r0, #12
 800a86a:	60a0      	str	r0, [r4, #8]
 800a86c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a870:	f7fe fa76 	bl	8008d60 <memset>
 800a874:	4620      	mov	r0, r4
 800a876:	bd70      	pop	{r4, r5, r6, pc}

0800a878 <__sinit>:
 800a878:	6983      	ldr	r3, [r0, #24]
 800a87a:	b510      	push	{r4, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	bb33      	cbnz	r3, 800a8ce <__sinit+0x56>
 800a880:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a884:	6503      	str	r3, [r0, #80]	; 0x50
 800a886:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <__sinit+0x58>)
 800a888:	4a12      	ldr	r2, [pc, #72]	; (800a8d4 <__sinit+0x5c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6282      	str	r2, [r0, #40]	; 0x28
 800a88e:	4298      	cmp	r0, r3
 800a890:	bf04      	itt	eq
 800a892:	2301      	moveq	r3, #1
 800a894:	6183      	streq	r3, [r0, #24]
 800a896:	f000 f81f 	bl	800a8d8 <__sfp>
 800a89a:	6060      	str	r0, [r4, #4]
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 f81b 	bl	800a8d8 <__sfp>
 800a8a2:	60a0      	str	r0, [r4, #8]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 f817 	bl	800a8d8 <__sfp>
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	60e0      	str	r0, [r4, #12]
 800a8ae:	2104      	movs	r1, #4
 800a8b0:	6860      	ldr	r0, [r4, #4]
 800a8b2:	f7ff ffa1 	bl	800a7f8 <std>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	2109      	movs	r1, #9
 800a8ba:	68a0      	ldr	r0, [r4, #8]
 800a8bc:	f7ff ff9c 	bl	800a7f8 <std>
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	2112      	movs	r1, #18
 800a8c4:	68e0      	ldr	r0, [r4, #12]
 800a8c6:	f7ff ff97 	bl	800a7f8 <std>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	61a3      	str	r3, [r4, #24]
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	0800b7d0 	.word	0x0800b7d0
 800a8d4:	0800a841 	.word	0x0800a841

0800a8d8 <__sfp>:
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8da:	4b1b      	ldr	r3, [pc, #108]	; (800a948 <__sfp+0x70>)
 800a8dc:	681e      	ldr	r6, [r3, #0]
 800a8de:	69b3      	ldr	r3, [r6, #24]
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	b913      	cbnz	r3, 800a8ea <__sfp+0x12>
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f7ff ffc7 	bl	800a878 <__sinit>
 800a8ea:	3648      	adds	r6, #72	; 0x48
 800a8ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	d503      	bpl.n	800a8fc <__sfp+0x24>
 800a8f4:	6833      	ldr	r3, [r6, #0]
 800a8f6:	b133      	cbz	r3, 800a906 <__sfp+0x2e>
 800a8f8:	6836      	ldr	r6, [r6, #0]
 800a8fa:	e7f7      	b.n	800a8ec <__sfp+0x14>
 800a8fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a900:	b16d      	cbz	r5, 800a91e <__sfp+0x46>
 800a902:	3468      	adds	r4, #104	; 0x68
 800a904:	e7f4      	b.n	800a8f0 <__sfp+0x18>
 800a906:	2104      	movs	r1, #4
 800a908:	4638      	mov	r0, r7
 800a90a:	f7ff ff9f 	bl	800a84c <__sfmoreglue>
 800a90e:	6030      	str	r0, [r6, #0]
 800a910:	2800      	cmp	r0, #0
 800a912:	d1f1      	bne.n	800a8f8 <__sfp+0x20>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	4604      	mov	r4, r0
 800a91a:	4620      	mov	r0, r4
 800a91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a91e:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <__sfp+0x74>)
 800a920:	6665      	str	r5, [r4, #100]	; 0x64
 800a922:	e9c4 5500 	strd	r5, r5, [r4]
 800a926:	60a5      	str	r5, [r4, #8]
 800a928:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a92c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a930:	2208      	movs	r2, #8
 800a932:	4629      	mov	r1, r5
 800a934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a938:	f7fe fa12 	bl	8008d60 <memset>
 800a93c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a944:	e7e9      	b.n	800a91a <__sfp+0x42>
 800a946:	bf00      	nop
 800a948:	0800b7d0 	.word	0x0800b7d0
 800a94c:	ffff0001 	.word	0xffff0001

0800a950 <_fwalk_reent>:
 800a950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a954:	4680      	mov	r8, r0
 800a956:	4689      	mov	r9, r1
 800a958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a95c:	2600      	movs	r6, #0
 800a95e:	b914      	cbnz	r4, 800a966 <_fwalk_reent+0x16>
 800a960:	4630      	mov	r0, r6
 800a962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a966:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a96a:	3f01      	subs	r7, #1
 800a96c:	d501      	bpl.n	800a972 <_fwalk_reent+0x22>
 800a96e:	6824      	ldr	r4, [r4, #0]
 800a970:	e7f5      	b.n	800a95e <_fwalk_reent+0xe>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d907      	bls.n	800a988 <_fwalk_reent+0x38>
 800a978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a97c:	3301      	adds	r3, #1
 800a97e:	d003      	beq.n	800a988 <_fwalk_reent+0x38>
 800a980:	4629      	mov	r1, r5
 800a982:	4640      	mov	r0, r8
 800a984:	47c8      	blx	r9
 800a986:	4306      	orrs	r6, r0
 800a988:	3568      	adds	r5, #104	; 0x68
 800a98a:	e7ee      	b.n	800a96a <_fwalk_reent+0x1a>

0800a98c <_localeconv_r>:
 800a98c:	4b04      	ldr	r3, [pc, #16]	; (800a9a0 <_localeconv_r+0x14>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a18      	ldr	r0, [r3, #32]
 800a992:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <_localeconv_r+0x18>)
 800a994:	2800      	cmp	r0, #0
 800a996:	bf08      	it	eq
 800a998:	4618      	moveq	r0, r3
 800a99a:	30f0      	adds	r0, #240	; 0xf0
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	2000000c 	.word	0x2000000c
 800a9a4:	20000070 	.word	0x20000070

0800a9a8 <__swhatbuf_r>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	460e      	mov	r6, r1
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	b096      	sub	sp, #88	; 0x58
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	461d      	mov	r5, r3
 800a9b8:	da07      	bge.n	800a9ca <__swhatbuf_r+0x22>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	89b3      	ldrh	r3, [r6, #12]
 800a9c0:	061a      	lsls	r2, r3, #24
 800a9c2:	d410      	bmi.n	800a9e6 <__swhatbuf_r+0x3e>
 800a9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c8:	e00e      	b.n	800a9e8 <__swhatbuf_r+0x40>
 800a9ca:	466a      	mov	r2, sp
 800a9cc:	f000 fdaa 	bl	800b524 <_fstat_r>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	dbf2      	blt.n	800a9ba <__swhatbuf_r+0x12>
 800a9d4:	9a01      	ldr	r2, [sp, #4]
 800a9d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9de:	425a      	negs	r2, r3
 800a9e0:	415a      	adcs	r2, r3
 800a9e2:	602a      	str	r2, [r5, #0]
 800a9e4:	e7ee      	b.n	800a9c4 <__swhatbuf_r+0x1c>
 800a9e6:	2340      	movs	r3, #64	; 0x40
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	b016      	add	sp, #88	; 0x58
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}

0800a9f0 <__smakebuf_r>:
 800a9f0:	898b      	ldrh	r3, [r1, #12]
 800a9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9f4:	079d      	lsls	r5, r3, #30
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	d507      	bpl.n	800aa0c <__smakebuf_r+0x1c>
 800a9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	6123      	str	r3, [r4, #16]
 800aa04:	2301      	movs	r3, #1
 800aa06:	6163      	str	r3, [r4, #20]
 800aa08:	b002      	add	sp, #8
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	ab01      	add	r3, sp, #4
 800aa0e:	466a      	mov	r2, sp
 800aa10:	f7ff ffca 	bl	800a9a8 <__swhatbuf_r>
 800aa14:	9900      	ldr	r1, [sp, #0]
 800aa16:	4605      	mov	r5, r0
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f000 fb73 	bl	800b104 <_malloc_r>
 800aa1e:	b948      	cbnz	r0, 800aa34 <__smakebuf_r+0x44>
 800aa20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa24:	059a      	lsls	r2, r3, #22
 800aa26:	d4ef      	bmi.n	800aa08 <__smakebuf_r+0x18>
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	f043 0302 	orr.w	r3, r3, #2
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	e7e3      	b.n	800a9fc <__smakebuf_r+0xc>
 800aa34:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <__smakebuf_r+0x7c>)
 800aa36:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	6020      	str	r0, [r4, #0]
 800aa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	9b00      	ldr	r3, [sp, #0]
 800aa44:	6163      	str	r3, [r4, #20]
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	6120      	str	r0, [r4, #16]
 800aa4a:	b15b      	cbz	r3, 800aa64 <__smakebuf_r+0x74>
 800aa4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa50:	4630      	mov	r0, r6
 800aa52:	f000 fd79 	bl	800b548 <_isatty_r>
 800aa56:	b128      	cbz	r0, 800aa64 <__smakebuf_r+0x74>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	f043 0301 	orr.w	r3, r3, #1
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	431d      	orrs	r5, r3
 800aa68:	81a5      	strh	r5, [r4, #12]
 800aa6a:	e7cd      	b.n	800aa08 <__smakebuf_r+0x18>
 800aa6c:	0800a841 	.word	0x0800a841

0800aa70 <malloc>:
 800aa70:	4b02      	ldr	r3, [pc, #8]	; (800aa7c <malloc+0xc>)
 800aa72:	4601      	mov	r1, r0
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f000 bb45 	b.w	800b104 <_malloc_r>
 800aa7a:	bf00      	nop
 800aa7c:	2000000c 	.word	0x2000000c

0800aa80 <memcpy>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	1e43      	subs	r3, r0, #1
 800aa84:	440a      	add	r2, r1
 800aa86:	4291      	cmp	r1, r2
 800aa88:	d100      	bne.n	800aa8c <memcpy+0xc>
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa94:	e7f7      	b.n	800aa86 <memcpy+0x6>

0800aa96 <_Balloc>:
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	460e      	mov	r6, r1
 800aa9e:	b93d      	cbnz	r5, 800aab0 <_Balloc+0x1a>
 800aaa0:	2010      	movs	r0, #16
 800aaa2:	f7ff ffe5 	bl	800aa70 <malloc>
 800aaa6:	6260      	str	r0, [r4, #36]	; 0x24
 800aaa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aaac:	6005      	str	r5, [r0, #0]
 800aaae:	60c5      	str	r5, [r0, #12]
 800aab0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aab2:	68eb      	ldr	r3, [r5, #12]
 800aab4:	b183      	cbz	r3, 800aad8 <_Balloc+0x42>
 800aab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aabe:	b9b8      	cbnz	r0, 800aaf0 <_Balloc+0x5a>
 800aac0:	2101      	movs	r1, #1
 800aac2:	fa01 f506 	lsl.w	r5, r1, r6
 800aac6:	1d6a      	adds	r2, r5, #5
 800aac8:	0092      	lsls	r2, r2, #2
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fabe 	bl	800b04c <_calloc_r>
 800aad0:	b160      	cbz	r0, 800aaec <_Balloc+0x56>
 800aad2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aad6:	e00e      	b.n	800aaf6 <_Balloc+0x60>
 800aad8:	2221      	movs	r2, #33	; 0x21
 800aada:	2104      	movs	r1, #4
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 fab5 	bl	800b04c <_calloc_r>
 800aae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae4:	60e8      	str	r0, [r5, #12]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e4      	bne.n	800aab6 <_Balloc+0x20>
 800aaec:	2000      	movs	r0, #0
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	6802      	ldr	r2, [r0, #0]
 800aaf2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aafc:	e7f7      	b.n	800aaee <_Balloc+0x58>

0800aafe <_Bfree>:
 800aafe:	b570      	push	{r4, r5, r6, lr}
 800ab00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab02:	4606      	mov	r6, r0
 800ab04:	460d      	mov	r5, r1
 800ab06:	b93c      	cbnz	r4, 800ab18 <_Bfree+0x1a>
 800ab08:	2010      	movs	r0, #16
 800ab0a:	f7ff ffb1 	bl	800aa70 <malloc>
 800ab0e:	6270      	str	r0, [r6, #36]	; 0x24
 800ab10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab14:	6004      	str	r4, [r0, #0]
 800ab16:	60c4      	str	r4, [r0, #12]
 800ab18:	b13d      	cbz	r5, 800ab2a <_Bfree+0x2c>
 800ab1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab1c:	686a      	ldr	r2, [r5, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab24:	6029      	str	r1, [r5, #0]
 800ab26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}

0800ab2c <__multadd>:
 800ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab30:	690d      	ldr	r5, [r1, #16]
 800ab32:	461f      	mov	r7, r3
 800ab34:	4606      	mov	r6, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	f101 0c14 	add.w	ip, r1, #20
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f8dc 0000 	ldr.w	r0, [ip]
 800ab42:	b281      	uxth	r1, r0
 800ab44:	fb02 7101 	mla	r1, r2, r1, r7
 800ab48:	0c0f      	lsrs	r7, r1, #16
 800ab4a:	0c00      	lsrs	r0, r0, #16
 800ab4c:	fb02 7000 	mla	r0, r2, r0, r7
 800ab50:	b289      	uxth	r1, r1
 800ab52:	3301      	adds	r3, #1
 800ab54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ab5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab62:	dcec      	bgt.n	800ab3e <__multadd+0x12>
 800ab64:	b1d7      	cbz	r7, 800ab9c <__multadd+0x70>
 800ab66:	68a3      	ldr	r3, [r4, #8]
 800ab68:	42ab      	cmp	r3, r5
 800ab6a:	dc12      	bgt.n	800ab92 <__multadd+0x66>
 800ab6c:	6861      	ldr	r1, [r4, #4]
 800ab6e:	4630      	mov	r0, r6
 800ab70:	3101      	adds	r1, #1
 800ab72:	f7ff ff90 	bl	800aa96 <_Balloc>
 800ab76:	6922      	ldr	r2, [r4, #16]
 800ab78:	3202      	adds	r2, #2
 800ab7a:	f104 010c 	add.w	r1, r4, #12
 800ab7e:	4680      	mov	r8, r0
 800ab80:	0092      	lsls	r2, r2, #2
 800ab82:	300c      	adds	r0, #12
 800ab84:	f7ff ff7c 	bl	800aa80 <memcpy>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ffb7 	bl	800aafe <_Bfree>
 800ab90:	4644      	mov	r4, r8
 800ab92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab96:	3501      	adds	r5, #1
 800ab98:	615f      	str	r7, [r3, #20]
 800ab9a:	6125      	str	r5, [r4, #16]
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aba2 <__hi0bits>:
 800aba2:	0c02      	lsrs	r2, r0, #16
 800aba4:	0412      	lsls	r2, r2, #16
 800aba6:	4603      	mov	r3, r0
 800aba8:	b9b2      	cbnz	r2, 800abd8 <__hi0bits+0x36>
 800abaa:	0403      	lsls	r3, r0, #16
 800abac:	2010      	movs	r0, #16
 800abae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800abb2:	bf04      	itt	eq
 800abb4:	021b      	lsleq	r3, r3, #8
 800abb6:	3008      	addeq	r0, #8
 800abb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800abbc:	bf04      	itt	eq
 800abbe:	011b      	lsleq	r3, r3, #4
 800abc0:	3004      	addeq	r0, #4
 800abc2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800abc6:	bf04      	itt	eq
 800abc8:	009b      	lsleq	r3, r3, #2
 800abca:	3002      	addeq	r0, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	db06      	blt.n	800abde <__hi0bits+0x3c>
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	d503      	bpl.n	800abdc <__hi0bits+0x3a>
 800abd4:	3001      	adds	r0, #1
 800abd6:	4770      	bx	lr
 800abd8:	2000      	movs	r0, #0
 800abda:	e7e8      	b.n	800abae <__hi0bits+0xc>
 800abdc:	2020      	movs	r0, #32
 800abde:	4770      	bx	lr

0800abe0 <__lo0bits>:
 800abe0:	6803      	ldr	r3, [r0, #0]
 800abe2:	f013 0207 	ands.w	r2, r3, #7
 800abe6:	4601      	mov	r1, r0
 800abe8:	d00b      	beq.n	800ac02 <__lo0bits+0x22>
 800abea:	07da      	lsls	r2, r3, #31
 800abec:	d423      	bmi.n	800ac36 <__lo0bits+0x56>
 800abee:	0798      	lsls	r0, r3, #30
 800abf0:	bf49      	itett	mi
 800abf2:	085b      	lsrmi	r3, r3, #1
 800abf4:	089b      	lsrpl	r3, r3, #2
 800abf6:	2001      	movmi	r0, #1
 800abf8:	600b      	strmi	r3, [r1, #0]
 800abfa:	bf5c      	itt	pl
 800abfc:	600b      	strpl	r3, [r1, #0]
 800abfe:	2002      	movpl	r0, #2
 800ac00:	4770      	bx	lr
 800ac02:	b298      	uxth	r0, r3
 800ac04:	b9a8      	cbnz	r0, 800ac32 <__lo0bits+0x52>
 800ac06:	0c1b      	lsrs	r3, r3, #16
 800ac08:	2010      	movs	r0, #16
 800ac0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac0e:	bf04      	itt	eq
 800ac10:	0a1b      	lsreq	r3, r3, #8
 800ac12:	3008      	addeq	r0, #8
 800ac14:	071a      	lsls	r2, r3, #28
 800ac16:	bf04      	itt	eq
 800ac18:	091b      	lsreq	r3, r3, #4
 800ac1a:	3004      	addeq	r0, #4
 800ac1c:	079a      	lsls	r2, r3, #30
 800ac1e:	bf04      	itt	eq
 800ac20:	089b      	lsreq	r3, r3, #2
 800ac22:	3002      	addeq	r0, #2
 800ac24:	07da      	lsls	r2, r3, #31
 800ac26:	d402      	bmi.n	800ac2e <__lo0bits+0x4e>
 800ac28:	085b      	lsrs	r3, r3, #1
 800ac2a:	d006      	beq.n	800ac3a <__lo0bits+0x5a>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	600b      	str	r3, [r1, #0]
 800ac30:	4770      	bx	lr
 800ac32:	4610      	mov	r0, r2
 800ac34:	e7e9      	b.n	800ac0a <__lo0bits+0x2a>
 800ac36:	2000      	movs	r0, #0
 800ac38:	4770      	bx	lr
 800ac3a:	2020      	movs	r0, #32
 800ac3c:	4770      	bx	lr

0800ac3e <__i2b>:
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	460c      	mov	r4, r1
 800ac42:	2101      	movs	r1, #1
 800ac44:	f7ff ff27 	bl	800aa96 <_Balloc>
 800ac48:	2201      	movs	r2, #1
 800ac4a:	6144      	str	r4, [r0, #20]
 800ac4c:	6102      	str	r2, [r0, #16]
 800ac4e:	bd10      	pop	{r4, pc}

0800ac50 <__multiply>:
 800ac50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	4614      	mov	r4, r2
 800ac56:	690a      	ldr	r2, [r1, #16]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	bfb8      	it	lt
 800ac5e:	460b      	movlt	r3, r1
 800ac60:	4688      	mov	r8, r1
 800ac62:	bfbc      	itt	lt
 800ac64:	46a0      	movlt	r8, r4
 800ac66:	461c      	movlt	r4, r3
 800ac68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac78:	eb07 0609 	add.w	r6, r7, r9
 800ac7c:	42b3      	cmp	r3, r6
 800ac7e:	bfb8      	it	lt
 800ac80:	3101      	addlt	r1, #1
 800ac82:	f7ff ff08 	bl	800aa96 <_Balloc>
 800ac86:	f100 0514 	add.w	r5, r0, #20
 800ac8a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ac8e:	462b      	mov	r3, r5
 800ac90:	2200      	movs	r2, #0
 800ac92:	4573      	cmp	r3, lr
 800ac94:	d316      	bcc.n	800acc4 <__multiply+0x74>
 800ac96:	f104 0214 	add.w	r2, r4, #20
 800ac9a:	f108 0114 	add.w	r1, r8, #20
 800ac9e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aca2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	9b00      	ldr	r3, [sp, #0]
 800acaa:	9201      	str	r2, [sp, #4]
 800acac:	4293      	cmp	r3, r2
 800acae:	d80c      	bhi.n	800acca <__multiply+0x7a>
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	dd03      	ble.n	800acbc <__multiply+0x6c>
 800acb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d05d      	beq.n	800ad78 <__multiply+0x128>
 800acbc:	6106      	str	r6, [r0, #16]
 800acbe:	b003      	add	sp, #12
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	f843 2b04 	str.w	r2, [r3], #4
 800acc8:	e7e3      	b.n	800ac92 <__multiply+0x42>
 800acca:	f8b2 b000 	ldrh.w	fp, [r2]
 800acce:	f1bb 0f00 	cmp.w	fp, #0
 800acd2:	d023      	beq.n	800ad1c <__multiply+0xcc>
 800acd4:	4689      	mov	r9, r1
 800acd6:	46ac      	mov	ip, r5
 800acd8:	f04f 0800 	mov.w	r8, #0
 800acdc:	f859 4b04 	ldr.w	r4, [r9], #4
 800ace0:	f8dc a000 	ldr.w	sl, [ip]
 800ace4:	b2a3      	uxth	r3, r4
 800ace6:	fa1f fa8a 	uxth.w	sl, sl
 800acea:	fb0b a303 	mla	r3, fp, r3, sl
 800acee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800acf2:	f8dc 4000 	ldr.w	r4, [ip]
 800acf6:	4443      	add	r3, r8
 800acf8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800acfc:	fb0b 840a 	mla	r4, fp, sl, r8
 800ad00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ad04:	46e2      	mov	sl, ip
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad0c:	454f      	cmp	r7, r9
 800ad0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad12:	f84a 3b04 	str.w	r3, [sl], #4
 800ad16:	d82b      	bhi.n	800ad70 <__multiply+0x120>
 800ad18:	f8cc 8004 	str.w	r8, [ip, #4]
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ad22:	3204      	adds	r2, #4
 800ad24:	f1ba 0f00 	cmp.w	sl, #0
 800ad28:	d020      	beq.n	800ad6c <__multiply+0x11c>
 800ad2a:	682b      	ldr	r3, [r5, #0]
 800ad2c:	4689      	mov	r9, r1
 800ad2e:	46a8      	mov	r8, r5
 800ad30:	f04f 0b00 	mov.w	fp, #0
 800ad34:	f8b9 c000 	ldrh.w	ip, [r9]
 800ad38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ad3c:	fb0a 440c 	mla	r4, sl, ip, r4
 800ad40:	445c      	add	r4, fp
 800ad42:	46c4      	mov	ip, r8
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad4a:	f84c 3b04 	str.w	r3, [ip], #4
 800ad4e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	fb0a b303 	mla	r3, sl, r3, fp
 800ad5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ad60:	454f      	cmp	r7, r9
 800ad62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ad66:	d805      	bhi.n	800ad74 <__multiply+0x124>
 800ad68:	f8c8 3004 	str.w	r3, [r8, #4]
 800ad6c:	3504      	adds	r5, #4
 800ad6e:	e79b      	b.n	800aca8 <__multiply+0x58>
 800ad70:	46d4      	mov	ip, sl
 800ad72:	e7b3      	b.n	800acdc <__multiply+0x8c>
 800ad74:	46e0      	mov	r8, ip
 800ad76:	e7dd      	b.n	800ad34 <__multiply+0xe4>
 800ad78:	3e01      	subs	r6, #1
 800ad7a:	e799      	b.n	800acb0 <__multiply+0x60>

0800ad7c <__pow5mult>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	4615      	mov	r5, r2
 800ad82:	f012 0203 	ands.w	r2, r2, #3
 800ad86:	4606      	mov	r6, r0
 800ad88:	460f      	mov	r7, r1
 800ad8a:	d007      	beq.n	800ad9c <__pow5mult+0x20>
 800ad8c:	3a01      	subs	r2, #1
 800ad8e:	4c21      	ldr	r4, [pc, #132]	; (800ae14 <__pow5mult+0x98>)
 800ad90:	2300      	movs	r3, #0
 800ad92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad96:	f7ff fec9 	bl	800ab2c <__multadd>
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	10ad      	asrs	r5, r5, #2
 800ad9e:	d035      	beq.n	800ae0c <__pow5mult+0x90>
 800ada0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ada2:	b93c      	cbnz	r4, 800adb4 <__pow5mult+0x38>
 800ada4:	2010      	movs	r0, #16
 800ada6:	f7ff fe63 	bl	800aa70 <malloc>
 800adaa:	6270      	str	r0, [r6, #36]	; 0x24
 800adac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adb0:	6004      	str	r4, [r0, #0]
 800adb2:	60c4      	str	r4, [r0, #12]
 800adb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adbc:	b94c      	cbnz	r4, 800add2 <__pow5mult+0x56>
 800adbe:	f240 2171 	movw	r1, #625	; 0x271
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff ff3b 	bl	800ac3e <__i2b>
 800adc8:	2300      	movs	r3, #0
 800adca:	f8c8 0008 	str.w	r0, [r8, #8]
 800adce:	4604      	mov	r4, r0
 800add0:	6003      	str	r3, [r0, #0]
 800add2:	f04f 0800 	mov.w	r8, #0
 800add6:	07eb      	lsls	r3, r5, #31
 800add8:	d50a      	bpl.n	800adf0 <__pow5mult+0x74>
 800adda:	4639      	mov	r1, r7
 800addc:	4622      	mov	r2, r4
 800adde:	4630      	mov	r0, r6
 800ade0:	f7ff ff36 	bl	800ac50 <__multiply>
 800ade4:	4639      	mov	r1, r7
 800ade6:	4681      	mov	r9, r0
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff fe88 	bl	800aafe <_Bfree>
 800adee:	464f      	mov	r7, r9
 800adf0:	106d      	asrs	r5, r5, #1
 800adf2:	d00b      	beq.n	800ae0c <__pow5mult+0x90>
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	b938      	cbnz	r0, 800ae08 <__pow5mult+0x8c>
 800adf8:	4622      	mov	r2, r4
 800adfa:	4621      	mov	r1, r4
 800adfc:	4630      	mov	r0, r6
 800adfe:	f7ff ff27 	bl	800ac50 <__multiply>
 800ae02:	6020      	str	r0, [r4, #0]
 800ae04:	f8c0 8000 	str.w	r8, [r0]
 800ae08:	4604      	mov	r4, r0
 800ae0a:	e7e4      	b.n	800add6 <__pow5mult+0x5a>
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae12:	bf00      	nop
 800ae14:	0800b968 	.word	0x0800b968

0800ae18 <__lshift>:
 800ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	6849      	ldr	r1, [r1, #4]
 800ae26:	eb0a 0903 	add.w	r9, sl, r3
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	4616      	mov	r6, r2
 800ae30:	f109 0501 	add.w	r5, r9, #1
 800ae34:	42ab      	cmp	r3, r5
 800ae36:	db32      	blt.n	800ae9e <__lshift+0x86>
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7ff fe2c 	bl	800aa96 <_Balloc>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4680      	mov	r8, r0
 800ae42:	f100 0114 	add.w	r1, r0, #20
 800ae46:	461a      	mov	r2, r3
 800ae48:	4553      	cmp	r3, sl
 800ae4a:	db2b      	blt.n	800aea4 <__lshift+0x8c>
 800ae4c:	6920      	ldr	r0, [r4, #16]
 800ae4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae52:	f104 0314 	add.w	r3, r4, #20
 800ae56:	f016 021f 	ands.w	r2, r6, #31
 800ae5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae62:	d025      	beq.n	800aeb0 <__lshift+0x98>
 800ae64:	f1c2 0e20 	rsb	lr, r2, #32
 800ae68:	2000      	movs	r0, #0
 800ae6a:	681e      	ldr	r6, [r3, #0]
 800ae6c:	468a      	mov	sl, r1
 800ae6e:	4096      	lsls	r6, r2
 800ae70:	4330      	orrs	r0, r6
 800ae72:	f84a 0b04 	str.w	r0, [sl], #4
 800ae76:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae7a:	459c      	cmp	ip, r3
 800ae7c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ae80:	d814      	bhi.n	800aeac <__lshift+0x94>
 800ae82:	6048      	str	r0, [r1, #4]
 800ae84:	b108      	cbz	r0, 800ae8a <__lshift+0x72>
 800ae86:	f109 0502 	add.w	r5, r9, #2
 800ae8a:	3d01      	subs	r5, #1
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ae92:	4621      	mov	r1, r4
 800ae94:	f7ff fe33 	bl	800aafe <_Bfree>
 800ae98:	4640      	mov	r0, r8
 800ae9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9e:	3101      	adds	r1, #1
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	e7c7      	b.n	800ae34 <__lshift+0x1c>
 800aea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	e7cd      	b.n	800ae48 <__lshift+0x30>
 800aeac:	4651      	mov	r1, sl
 800aeae:	e7dc      	b.n	800ae6a <__lshift+0x52>
 800aeb0:	3904      	subs	r1, #4
 800aeb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800aeba:	459c      	cmp	ip, r3
 800aebc:	d8f9      	bhi.n	800aeb2 <__lshift+0x9a>
 800aebe:	e7e4      	b.n	800ae8a <__lshift+0x72>

0800aec0 <__mcmp>:
 800aec0:	6903      	ldr	r3, [r0, #16]
 800aec2:	690a      	ldr	r2, [r1, #16]
 800aec4:	1a9b      	subs	r3, r3, r2
 800aec6:	b530      	push	{r4, r5, lr}
 800aec8:	d10c      	bne.n	800aee4 <__mcmp+0x24>
 800aeca:	0092      	lsls	r2, r2, #2
 800aecc:	3014      	adds	r0, #20
 800aece:	3114      	adds	r1, #20
 800aed0:	1884      	adds	r4, r0, r2
 800aed2:	4411      	add	r1, r2
 800aed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aedc:	4295      	cmp	r5, r2
 800aede:	d003      	beq.n	800aee8 <__mcmp+0x28>
 800aee0:	d305      	bcc.n	800aeee <__mcmp+0x2e>
 800aee2:	2301      	movs	r3, #1
 800aee4:	4618      	mov	r0, r3
 800aee6:	bd30      	pop	{r4, r5, pc}
 800aee8:	42a0      	cmp	r0, r4
 800aeea:	d3f3      	bcc.n	800aed4 <__mcmp+0x14>
 800aeec:	e7fa      	b.n	800aee4 <__mcmp+0x24>
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295
 800aef2:	e7f7      	b.n	800aee4 <__mcmp+0x24>

0800aef4 <__mdiff>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460d      	mov	r5, r1
 800aefa:	4607      	mov	r7, r0
 800aefc:	4611      	mov	r1, r2
 800aefe:	4628      	mov	r0, r5
 800af00:	4614      	mov	r4, r2
 800af02:	f7ff ffdd 	bl	800aec0 <__mcmp>
 800af06:	1e06      	subs	r6, r0, #0
 800af08:	d108      	bne.n	800af1c <__mdiff+0x28>
 800af0a:	4631      	mov	r1, r6
 800af0c:	4638      	mov	r0, r7
 800af0e:	f7ff fdc2 	bl	800aa96 <_Balloc>
 800af12:	2301      	movs	r3, #1
 800af14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1c:	bfa4      	itt	ge
 800af1e:	4623      	movge	r3, r4
 800af20:	462c      	movge	r4, r5
 800af22:	4638      	mov	r0, r7
 800af24:	6861      	ldr	r1, [r4, #4]
 800af26:	bfa6      	itte	ge
 800af28:	461d      	movge	r5, r3
 800af2a:	2600      	movge	r6, #0
 800af2c:	2601      	movlt	r6, #1
 800af2e:	f7ff fdb2 	bl	800aa96 <_Balloc>
 800af32:	692b      	ldr	r3, [r5, #16]
 800af34:	60c6      	str	r6, [r0, #12]
 800af36:	6926      	ldr	r6, [r4, #16]
 800af38:	f105 0914 	add.w	r9, r5, #20
 800af3c:	f104 0214 	add.w	r2, r4, #20
 800af40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800af44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800af48:	f100 0514 	add.w	r5, r0, #20
 800af4c:	f04f 0e00 	mov.w	lr, #0
 800af50:	f852 ab04 	ldr.w	sl, [r2], #4
 800af54:	f859 4b04 	ldr.w	r4, [r9], #4
 800af58:	fa1e f18a 	uxtah	r1, lr, sl
 800af5c:	b2a3      	uxth	r3, r4
 800af5e:	1ac9      	subs	r1, r1, r3
 800af60:	0c23      	lsrs	r3, r4, #16
 800af62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800af66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800af6a:	b289      	uxth	r1, r1
 800af6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800af70:	45c8      	cmp	r8, r9
 800af72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800af76:	4694      	mov	ip, r2
 800af78:	f845 3b04 	str.w	r3, [r5], #4
 800af7c:	d8e8      	bhi.n	800af50 <__mdiff+0x5c>
 800af7e:	45bc      	cmp	ip, r7
 800af80:	d304      	bcc.n	800af8c <__mdiff+0x98>
 800af82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800af86:	b183      	cbz	r3, 800afaa <__mdiff+0xb6>
 800af88:	6106      	str	r6, [r0, #16]
 800af8a:	e7c5      	b.n	800af18 <__mdiff+0x24>
 800af8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af90:	fa1e f381 	uxtah	r3, lr, r1
 800af94:	141a      	asrs	r2, r3, #16
 800af96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afa0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800afa4:	f845 3b04 	str.w	r3, [r5], #4
 800afa8:	e7e9      	b.n	800af7e <__mdiff+0x8a>
 800afaa:	3e01      	subs	r6, #1
 800afac:	e7e9      	b.n	800af82 <__mdiff+0x8e>

0800afae <__d2b>:
 800afae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afb2:	460e      	mov	r6, r1
 800afb4:	2101      	movs	r1, #1
 800afb6:	ec59 8b10 	vmov	r8, r9, d0
 800afba:	4615      	mov	r5, r2
 800afbc:	f7ff fd6b 	bl	800aa96 <_Balloc>
 800afc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800afc4:	4607      	mov	r7, r0
 800afc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afca:	bb34      	cbnz	r4, 800b01a <__d2b+0x6c>
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	f1b8 0300 	subs.w	r3, r8, #0
 800afd2:	d027      	beq.n	800b024 <__d2b+0x76>
 800afd4:	a802      	add	r0, sp, #8
 800afd6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800afda:	f7ff fe01 	bl	800abe0 <__lo0bits>
 800afde:	9900      	ldr	r1, [sp, #0]
 800afe0:	b1f0      	cbz	r0, 800b020 <__d2b+0x72>
 800afe2:	9a01      	ldr	r2, [sp, #4]
 800afe4:	f1c0 0320 	rsb	r3, r0, #32
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	430b      	orrs	r3, r1
 800afee:	40c2      	lsrs	r2, r0
 800aff0:	617b      	str	r3, [r7, #20]
 800aff2:	9201      	str	r2, [sp, #4]
 800aff4:	9b01      	ldr	r3, [sp, #4]
 800aff6:	61bb      	str	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	bf14      	ite	ne
 800affc:	2102      	movne	r1, #2
 800affe:	2101      	moveq	r1, #1
 800b000:	6139      	str	r1, [r7, #16]
 800b002:	b1c4      	cbz	r4, 800b036 <__d2b+0x88>
 800b004:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b008:	4404      	add	r4, r0
 800b00a:	6034      	str	r4, [r6, #0]
 800b00c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b010:	6028      	str	r0, [r5, #0]
 800b012:	4638      	mov	r0, r7
 800b014:	b003      	add	sp, #12
 800b016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b01e:	e7d5      	b.n	800afcc <__d2b+0x1e>
 800b020:	6179      	str	r1, [r7, #20]
 800b022:	e7e7      	b.n	800aff4 <__d2b+0x46>
 800b024:	a801      	add	r0, sp, #4
 800b026:	f7ff fddb 	bl	800abe0 <__lo0bits>
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	617b      	str	r3, [r7, #20]
 800b02e:	2101      	movs	r1, #1
 800b030:	6139      	str	r1, [r7, #16]
 800b032:	3020      	adds	r0, #32
 800b034:	e7e5      	b.n	800b002 <__d2b+0x54>
 800b036:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b03a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b03e:	6030      	str	r0, [r6, #0]
 800b040:	6918      	ldr	r0, [r3, #16]
 800b042:	f7ff fdae 	bl	800aba2 <__hi0bits>
 800b046:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b04a:	e7e1      	b.n	800b010 <__d2b+0x62>

0800b04c <_calloc_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	fb02 f401 	mul.w	r4, r2, r1
 800b052:	4621      	mov	r1, r4
 800b054:	f000 f856 	bl	800b104 <_malloc_r>
 800b058:	4605      	mov	r5, r0
 800b05a:	b118      	cbz	r0, 800b064 <_calloc_r+0x18>
 800b05c:	4622      	mov	r2, r4
 800b05e:	2100      	movs	r1, #0
 800b060:	f7fd fe7e 	bl	8008d60 <memset>
 800b064:	4628      	mov	r0, r5
 800b066:	bd38      	pop	{r3, r4, r5, pc}

0800b068 <_free_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4605      	mov	r5, r0
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d045      	beq.n	800b0fc <_free_r+0x94>
 800b070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b074:	1f0c      	subs	r4, r1, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	bfb8      	it	lt
 800b07a:	18e4      	addlt	r4, r4, r3
 800b07c:	f000 fa98 	bl	800b5b0 <__malloc_lock>
 800b080:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <_free_r+0x98>)
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	4610      	mov	r0, r2
 800b086:	b933      	cbnz	r3, 800b096 <_free_r+0x2e>
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	6014      	str	r4, [r2, #0]
 800b08c:	4628      	mov	r0, r5
 800b08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b092:	f000 ba8e 	b.w	800b5b2 <__malloc_unlock>
 800b096:	42a3      	cmp	r3, r4
 800b098:	d90c      	bls.n	800b0b4 <_free_r+0x4c>
 800b09a:	6821      	ldr	r1, [r4, #0]
 800b09c:	1862      	adds	r2, r4, r1
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	bf04      	itt	eq
 800b0a2:	681a      	ldreq	r2, [r3, #0]
 800b0a4:	685b      	ldreq	r3, [r3, #4]
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	bf04      	itt	eq
 800b0aa:	1852      	addeq	r2, r2, r1
 800b0ac:	6022      	streq	r2, [r4, #0]
 800b0ae:	6004      	str	r4, [r0, #0]
 800b0b0:	e7ec      	b.n	800b08c <_free_r+0x24>
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	b10a      	cbz	r2, 800b0bc <_free_r+0x54>
 800b0b8:	42a2      	cmp	r2, r4
 800b0ba:	d9fa      	bls.n	800b0b2 <_free_r+0x4a>
 800b0bc:	6819      	ldr	r1, [r3, #0]
 800b0be:	1858      	adds	r0, r3, r1
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d10b      	bne.n	800b0dc <_free_r+0x74>
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	4401      	add	r1, r0
 800b0c8:	1858      	adds	r0, r3, r1
 800b0ca:	4282      	cmp	r2, r0
 800b0cc:	6019      	str	r1, [r3, #0]
 800b0ce:	d1dd      	bne.n	800b08c <_free_r+0x24>
 800b0d0:	6810      	ldr	r0, [r2, #0]
 800b0d2:	6852      	ldr	r2, [r2, #4]
 800b0d4:	605a      	str	r2, [r3, #4]
 800b0d6:	4401      	add	r1, r0
 800b0d8:	6019      	str	r1, [r3, #0]
 800b0da:	e7d7      	b.n	800b08c <_free_r+0x24>
 800b0dc:	d902      	bls.n	800b0e4 <_free_r+0x7c>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	602b      	str	r3, [r5, #0]
 800b0e2:	e7d3      	b.n	800b08c <_free_r+0x24>
 800b0e4:	6820      	ldr	r0, [r4, #0]
 800b0e6:	1821      	adds	r1, r4, r0
 800b0e8:	428a      	cmp	r2, r1
 800b0ea:	bf04      	itt	eq
 800b0ec:	6811      	ldreq	r1, [r2, #0]
 800b0ee:	6852      	ldreq	r2, [r2, #4]
 800b0f0:	6062      	str	r2, [r4, #4]
 800b0f2:	bf04      	itt	eq
 800b0f4:	1809      	addeq	r1, r1, r0
 800b0f6:	6021      	streq	r1, [r4, #0]
 800b0f8:	605c      	str	r4, [r3, #4]
 800b0fa:	e7c7      	b.n	800b08c <_free_r+0x24>
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	20000200 	.word	0x20000200

0800b104 <_malloc_r>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	1ccd      	adds	r5, r1, #3
 800b108:	f025 0503 	bic.w	r5, r5, #3
 800b10c:	3508      	adds	r5, #8
 800b10e:	2d0c      	cmp	r5, #12
 800b110:	bf38      	it	cc
 800b112:	250c      	movcc	r5, #12
 800b114:	2d00      	cmp	r5, #0
 800b116:	4606      	mov	r6, r0
 800b118:	db01      	blt.n	800b11e <_malloc_r+0x1a>
 800b11a:	42a9      	cmp	r1, r5
 800b11c:	d903      	bls.n	800b126 <_malloc_r+0x22>
 800b11e:	230c      	movs	r3, #12
 800b120:	6033      	str	r3, [r6, #0]
 800b122:	2000      	movs	r0, #0
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	f000 fa43 	bl	800b5b0 <__malloc_lock>
 800b12a:	4a21      	ldr	r2, [pc, #132]	; (800b1b0 <_malloc_r+0xac>)
 800b12c:	6814      	ldr	r4, [r2, #0]
 800b12e:	4621      	mov	r1, r4
 800b130:	b991      	cbnz	r1, 800b158 <_malloc_r+0x54>
 800b132:	4c20      	ldr	r4, [pc, #128]	; (800b1b4 <_malloc_r+0xb0>)
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	b91b      	cbnz	r3, 800b140 <_malloc_r+0x3c>
 800b138:	4630      	mov	r0, r6
 800b13a:	f000 f97d 	bl	800b438 <_sbrk_r>
 800b13e:	6020      	str	r0, [r4, #0]
 800b140:	4629      	mov	r1, r5
 800b142:	4630      	mov	r0, r6
 800b144:	f000 f978 	bl	800b438 <_sbrk_r>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d124      	bne.n	800b196 <_malloc_r+0x92>
 800b14c:	230c      	movs	r3, #12
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	4630      	mov	r0, r6
 800b152:	f000 fa2e 	bl	800b5b2 <__malloc_unlock>
 800b156:	e7e4      	b.n	800b122 <_malloc_r+0x1e>
 800b158:	680b      	ldr	r3, [r1, #0]
 800b15a:	1b5b      	subs	r3, r3, r5
 800b15c:	d418      	bmi.n	800b190 <_malloc_r+0x8c>
 800b15e:	2b0b      	cmp	r3, #11
 800b160:	d90f      	bls.n	800b182 <_malloc_r+0x7e>
 800b162:	600b      	str	r3, [r1, #0]
 800b164:	50cd      	str	r5, [r1, r3]
 800b166:	18cc      	adds	r4, r1, r3
 800b168:	4630      	mov	r0, r6
 800b16a:	f000 fa22 	bl	800b5b2 <__malloc_unlock>
 800b16e:	f104 000b 	add.w	r0, r4, #11
 800b172:	1d23      	adds	r3, r4, #4
 800b174:	f020 0007 	bic.w	r0, r0, #7
 800b178:	1ac3      	subs	r3, r0, r3
 800b17a:	d0d3      	beq.n	800b124 <_malloc_r+0x20>
 800b17c:	425a      	negs	r2, r3
 800b17e:	50e2      	str	r2, [r4, r3]
 800b180:	e7d0      	b.n	800b124 <_malloc_r+0x20>
 800b182:	428c      	cmp	r4, r1
 800b184:	684b      	ldr	r3, [r1, #4]
 800b186:	bf16      	itet	ne
 800b188:	6063      	strne	r3, [r4, #4]
 800b18a:	6013      	streq	r3, [r2, #0]
 800b18c:	460c      	movne	r4, r1
 800b18e:	e7eb      	b.n	800b168 <_malloc_r+0x64>
 800b190:	460c      	mov	r4, r1
 800b192:	6849      	ldr	r1, [r1, #4]
 800b194:	e7cc      	b.n	800b130 <_malloc_r+0x2c>
 800b196:	1cc4      	adds	r4, r0, #3
 800b198:	f024 0403 	bic.w	r4, r4, #3
 800b19c:	42a0      	cmp	r0, r4
 800b19e:	d005      	beq.n	800b1ac <_malloc_r+0xa8>
 800b1a0:	1a21      	subs	r1, r4, r0
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 f948 	bl	800b438 <_sbrk_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d0cf      	beq.n	800b14c <_malloc_r+0x48>
 800b1ac:	6025      	str	r5, [r4, #0]
 800b1ae:	e7db      	b.n	800b168 <_malloc_r+0x64>
 800b1b0:	20000200 	.word	0x20000200
 800b1b4:	20000204 	.word	0x20000204

0800b1b8 <__sfputc_r>:
 800b1b8:	6893      	ldr	r3, [r2, #8]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	b410      	push	{r4}
 800b1c0:	6093      	str	r3, [r2, #8]
 800b1c2:	da08      	bge.n	800b1d6 <__sfputc_r+0x1e>
 800b1c4:	6994      	ldr	r4, [r2, #24]
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	db01      	blt.n	800b1ce <__sfputc_r+0x16>
 800b1ca:	290a      	cmp	r1, #10
 800b1cc:	d103      	bne.n	800b1d6 <__sfputc_r+0x1e>
 800b1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1d2:	f7fe bb5b 	b.w	800988c <__swbuf_r>
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	1c58      	adds	r0, r3, #1
 800b1da:	6010      	str	r0, [r2, #0]
 800b1dc:	7019      	strb	r1, [r3, #0]
 800b1de:	4608      	mov	r0, r1
 800b1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <__sfputs_r>:
 800b1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	460f      	mov	r7, r1
 800b1ec:	4614      	mov	r4, r2
 800b1ee:	18d5      	adds	r5, r2, r3
 800b1f0:	42ac      	cmp	r4, r5
 800b1f2:	d101      	bne.n	800b1f8 <__sfputs_r+0x12>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e007      	b.n	800b208 <__sfputs_r+0x22>
 800b1f8:	463a      	mov	r2, r7
 800b1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1fe:	4630      	mov	r0, r6
 800b200:	f7ff ffda 	bl	800b1b8 <__sfputc_r>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d1f3      	bne.n	800b1f0 <__sfputs_r+0xa>
 800b208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b20c <_vfiprintf_r>:
 800b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	460c      	mov	r4, r1
 800b212:	b09d      	sub	sp, #116	; 0x74
 800b214:	4617      	mov	r7, r2
 800b216:	461d      	mov	r5, r3
 800b218:	4606      	mov	r6, r0
 800b21a:	b118      	cbz	r0, 800b224 <_vfiprintf_r+0x18>
 800b21c:	6983      	ldr	r3, [r0, #24]
 800b21e:	b90b      	cbnz	r3, 800b224 <_vfiprintf_r+0x18>
 800b220:	f7ff fb2a 	bl	800a878 <__sinit>
 800b224:	4b7c      	ldr	r3, [pc, #496]	; (800b418 <_vfiprintf_r+0x20c>)
 800b226:	429c      	cmp	r4, r3
 800b228:	d158      	bne.n	800b2dc <_vfiprintf_r+0xd0>
 800b22a:	6874      	ldr	r4, [r6, #4]
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	0718      	lsls	r0, r3, #28
 800b230:	d55e      	bpl.n	800b2f0 <_vfiprintf_r+0xe4>
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d05b      	beq.n	800b2f0 <_vfiprintf_r+0xe4>
 800b238:	2300      	movs	r3, #0
 800b23a:	9309      	str	r3, [sp, #36]	; 0x24
 800b23c:	2320      	movs	r3, #32
 800b23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b242:	2330      	movs	r3, #48	; 0x30
 800b244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b248:	9503      	str	r5, [sp, #12]
 800b24a:	f04f 0b01 	mov.w	fp, #1
 800b24e:	46b8      	mov	r8, r7
 800b250:	4645      	mov	r5, r8
 800b252:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b256:	b10b      	cbz	r3, 800b25c <_vfiprintf_r+0x50>
 800b258:	2b25      	cmp	r3, #37	; 0x25
 800b25a:	d154      	bne.n	800b306 <_vfiprintf_r+0xfa>
 800b25c:	ebb8 0a07 	subs.w	sl, r8, r7
 800b260:	d00b      	beq.n	800b27a <_vfiprintf_r+0x6e>
 800b262:	4653      	mov	r3, sl
 800b264:	463a      	mov	r2, r7
 800b266:	4621      	mov	r1, r4
 800b268:	4630      	mov	r0, r6
 800b26a:	f7ff ffbc 	bl	800b1e6 <__sfputs_r>
 800b26e:	3001      	adds	r0, #1
 800b270:	f000 80c2 	beq.w	800b3f8 <_vfiprintf_r+0x1ec>
 800b274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b276:	4453      	add	r3, sl
 800b278:	9309      	str	r3, [sp, #36]	; 0x24
 800b27a:	f898 3000 	ldrb.w	r3, [r8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 80ba 	beq.w	800b3f8 <_vfiprintf_r+0x1ec>
 800b284:	2300      	movs	r3, #0
 800b286:	f04f 32ff 	mov.w	r2, #4294967295
 800b28a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b296:	931a      	str	r3, [sp, #104]	; 0x68
 800b298:	46a8      	mov	r8, r5
 800b29a:	2205      	movs	r2, #5
 800b29c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b2a0:	485e      	ldr	r0, [pc, #376]	; (800b41c <_vfiprintf_r+0x210>)
 800b2a2:	f7f4 ff9d 	bl	80001e0 <memchr>
 800b2a6:	9b04      	ldr	r3, [sp, #16]
 800b2a8:	bb78      	cbnz	r0, 800b30a <_vfiprintf_r+0xfe>
 800b2aa:	06d9      	lsls	r1, r3, #27
 800b2ac:	bf44      	itt	mi
 800b2ae:	2220      	movmi	r2, #32
 800b2b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2b4:	071a      	lsls	r2, r3, #28
 800b2b6:	bf44      	itt	mi
 800b2b8:	222b      	movmi	r2, #43	; 0x2b
 800b2ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2be:	782a      	ldrb	r2, [r5, #0]
 800b2c0:	2a2a      	cmp	r2, #42	; 0x2a
 800b2c2:	d02a      	beq.n	800b31a <_vfiprintf_r+0x10e>
 800b2c4:	9a07      	ldr	r2, [sp, #28]
 800b2c6:	46a8      	mov	r8, r5
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	250a      	movs	r5, #10
 800b2cc:	4641      	mov	r1, r8
 800b2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2d2:	3b30      	subs	r3, #48	; 0x30
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	d969      	bls.n	800b3ac <_vfiprintf_r+0x1a0>
 800b2d8:	b360      	cbz	r0, 800b334 <_vfiprintf_r+0x128>
 800b2da:	e024      	b.n	800b326 <_vfiprintf_r+0x11a>
 800b2dc:	4b50      	ldr	r3, [pc, #320]	; (800b420 <_vfiprintf_r+0x214>)
 800b2de:	429c      	cmp	r4, r3
 800b2e0:	d101      	bne.n	800b2e6 <_vfiprintf_r+0xda>
 800b2e2:	68b4      	ldr	r4, [r6, #8]
 800b2e4:	e7a2      	b.n	800b22c <_vfiprintf_r+0x20>
 800b2e6:	4b4f      	ldr	r3, [pc, #316]	; (800b424 <_vfiprintf_r+0x218>)
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	bf08      	it	eq
 800b2ec:	68f4      	ldreq	r4, [r6, #12]
 800b2ee:	e79d      	b.n	800b22c <_vfiprintf_r+0x20>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f7fe fb1c 	bl	8009930 <__swsetup_r>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d09d      	beq.n	800b238 <_vfiprintf_r+0x2c>
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	b01d      	add	sp, #116	; 0x74
 800b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b306:	46a8      	mov	r8, r5
 800b308:	e7a2      	b.n	800b250 <_vfiprintf_r+0x44>
 800b30a:	4a44      	ldr	r2, [pc, #272]	; (800b41c <_vfiprintf_r+0x210>)
 800b30c:	1a80      	subs	r0, r0, r2
 800b30e:	fa0b f000 	lsl.w	r0, fp, r0
 800b312:	4318      	orrs	r0, r3
 800b314:	9004      	str	r0, [sp, #16]
 800b316:	4645      	mov	r5, r8
 800b318:	e7be      	b.n	800b298 <_vfiprintf_r+0x8c>
 800b31a:	9a03      	ldr	r2, [sp, #12]
 800b31c:	1d11      	adds	r1, r2, #4
 800b31e:	6812      	ldr	r2, [r2, #0]
 800b320:	9103      	str	r1, [sp, #12]
 800b322:	2a00      	cmp	r2, #0
 800b324:	db01      	blt.n	800b32a <_vfiprintf_r+0x11e>
 800b326:	9207      	str	r2, [sp, #28]
 800b328:	e004      	b.n	800b334 <_vfiprintf_r+0x128>
 800b32a:	4252      	negs	r2, r2
 800b32c:	f043 0302 	orr.w	r3, r3, #2
 800b330:	9207      	str	r2, [sp, #28]
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	f898 3000 	ldrb.w	r3, [r8]
 800b338:	2b2e      	cmp	r3, #46	; 0x2e
 800b33a:	d10e      	bne.n	800b35a <_vfiprintf_r+0x14e>
 800b33c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b340:	2b2a      	cmp	r3, #42	; 0x2a
 800b342:	d138      	bne.n	800b3b6 <_vfiprintf_r+0x1aa>
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	1d1a      	adds	r2, r3, #4
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	9203      	str	r2, [sp, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bfb8      	it	lt
 800b350:	f04f 33ff 	movlt.w	r3, #4294967295
 800b354:	f108 0802 	add.w	r8, r8, #2
 800b358:	9305      	str	r3, [sp, #20]
 800b35a:	4d33      	ldr	r5, [pc, #204]	; (800b428 <_vfiprintf_r+0x21c>)
 800b35c:	f898 1000 	ldrb.w	r1, [r8]
 800b360:	2203      	movs	r2, #3
 800b362:	4628      	mov	r0, r5
 800b364:	f7f4 ff3c 	bl	80001e0 <memchr>
 800b368:	b140      	cbz	r0, 800b37c <_vfiprintf_r+0x170>
 800b36a:	2340      	movs	r3, #64	; 0x40
 800b36c:	1b40      	subs	r0, r0, r5
 800b36e:	fa03 f000 	lsl.w	r0, r3, r0
 800b372:	9b04      	ldr	r3, [sp, #16]
 800b374:	4303      	orrs	r3, r0
 800b376:	f108 0801 	add.w	r8, r8, #1
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	f898 1000 	ldrb.w	r1, [r8]
 800b380:	482a      	ldr	r0, [pc, #168]	; (800b42c <_vfiprintf_r+0x220>)
 800b382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b386:	2206      	movs	r2, #6
 800b388:	f108 0701 	add.w	r7, r8, #1
 800b38c:	f7f4 ff28 	bl	80001e0 <memchr>
 800b390:	2800      	cmp	r0, #0
 800b392:	d037      	beq.n	800b404 <_vfiprintf_r+0x1f8>
 800b394:	4b26      	ldr	r3, [pc, #152]	; (800b430 <_vfiprintf_r+0x224>)
 800b396:	bb1b      	cbnz	r3, 800b3e0 <_vfiprintf_r+0x1d4>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	3307      	adds	r3, #7
 800b39c:	f023 0307 	bic.w	r3, r3, #7
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	9303      	str	r3, [sp, #12]
 800b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a6:	444b      	add	r3, r9
 800b3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3aa:	e750      	b.n	800b24e <_vfiprintf_r+0x42>
 800b3ac:	fb05 3202 	mla	r2, r5, r2, r3
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	e78a      	b.n	800b2cc <_vfiprintf_r+0xc0>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f108 0801 	add.w	r8, r8, #1
 800b3bc:	9305      	str	r3, [sp, #20]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	250a      	movs	r5, #10
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3c8:	3a30      	subs	r2, #48	; 0x30
 800b3ca:	2a09      	cmp	r2, #9
 800b3cc:	d903      	bls.n	800b3d6 <_vfiprintf_r+0x1ca>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0c3      	beq.n	800b35a <_vfiprintf_r+0x14e>
 800b3d2:	9105      	str	r1, [sp, #20]
 800b3d4:	e7c1      	b.n	800b35a <_vfiprintf_r+0x14e>
 800b3d6:	fb05 2101 	mla	r1, r5, r1, r2
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4680      	mov	r8, r0
 800b3de:	e7f0      	b.n	800b3c2 <_vfiprintf_r+0x1b6>
 800b3e0:	ab03      	add	r3, sp, #12
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	4b13      	ldr	r3, [pc, #76]	; (800b434 <_vfiprintf_r+0x228>)
 800b3e8:	a904      	add	r1, sp, #16
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7fd fd54 	bl	8008e98 <_printf_float>
 800b3f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b3f4:	4681      	mov	r9, r0
 800b3f6:	d1d5      	bne.n	800b3a4 <_vfiprintf_r+0x198>
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	065b      	lsls	r3, r3, #25
 800b3fc:	f53f af7e 	bmi.w	800b2fc <_vfiprintf_r+0xf0>
 800b400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b402:	e77d      	b.n	800b300 <_vfiprintf_r+0xf4>
 800b404:	ab03      	add	r3, sp, #12
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	4622      	mov	r2, r4
 800b40a:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <_vfiprintf_r+0x228>)
 800b40c:	a904      	add	r1, sp, #16
 800b40e:	4630      	mov	r0, r6
 800b410:	f7fd fff8 	bl	8009404 <_printf_i>
 800b414:	e7ec      	b.n	800b3f0 <_vfiprintf_r+0x1e4>
 800b416:	bf00      	nop
 800b418:	0800b838 	.word	0x0800b838
 800b41c:	0800b974 	.word	0x0800b974
 800b420:	0800b858 	.word	0x0800b858
 800b424:	0800b818 	.word	0x0800b818
 800b428:	0800b97a 	.word	0x0800b97a
 800b42c:	0800b97e 	.word	0x0800b97e
 800b430:	08008e99 	.word	0x08008e99
 800b434:	0800b1e7 	.word	0x0800b1e7

0800b438 <_sbrk_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4c06      	ldr	r4, [pc, #24]	; (800b454 <_sbrk_r+0x1c>)
 800b43c:	2300      	movs	r3, #0
 800b43e:	4605      	mov	r5, r0
 800b440:	4608      	mov	r0, r1
 800b442:	6023      	str	r3, [r4, #0]
 800b444:	f7fc fed6 	bl	80081f4 <_sbrk>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_sbrk_r+0x1a>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_sbrk_r+0x1a>
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20000974 	.word	0x20000974

0800b458 <__sread>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b460:	f000 f8a8 	bl	800b5b4 <_read_r>
 800b464:	2800      	cmp	r0, #0
 800b466:	bfab      	itete	ge
 800b468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b46a:	89a3      	ldrhlt	r3, [r4, #12]
 800b46c:	181b      	addge	r3, r3, r0
 800b46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b472:	bfac      	ite	ge
 800b474:	6563      	strge	r3, [r4, #84]	; 0x54
 800b476:	81a3      	strhlt	r3, [r4, #12]
 800b478:	bd10      	pop	{r4, pc}

0800b47a <__swrite>:
 800b47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47e:	461f      	mov	r7, r3
 800b480:	898b      	ldrh	r3, [r1, #12]
 800b482:	05db      	lsls	r3, r3, #23
 800b484:	4605      	mov	r5, r0
 800b486:	460c      	mov	r4, r1
 800b488:	4616      	mov	r6, r2
 800b48a:	d505      	bpl.n	800b498 <__swrite+0x1e>
 800b48c:	2302      	movs	r3, #2
 800b48e:	2200      	movs	r2, #0
 800b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b494:	f000 f868 	bl	800b568 <_lseek_r>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	f000 b817 	b.w	800b4e0 <_write_r>

0800b4b2 <__sseek>:
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ba:	f000 f855 	bl	800b568 <_lseek_r>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	bf15      	itete	ne
 800b4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4ce:	81a3      	strheq	r3, [r4, #12]
 800b4d0:	bf18      	it	ne
 800b4d2:	81a3      	strhne	r3, [r4, #12]
 800b4d4:	bd10      	pop	{r4, pc}

0800b4d6 <__sclose>:
 800b4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4da:	f000 b813 	b.w	800b504 <_close_r>
	...

0800b4e0 <_write_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4c07      	ldr	r4, [pc, #28]	; (800b500 <_write_r+0x20>)
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	6022      	str	r2, [r4, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7fc fe2f 	bl	8008152 <_write>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_write_r+0x1e>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_write_r+0x1e>
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20000974 	.word	0x20000974

0800b504 <_close_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4c06      	ldr	r4, [pc, #24]	; (800b520 <_close_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4605      	mov	r5, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	6023      	str	r3, [r4, #0]
 800b510:	f7fc fe3b 	bl	800818a <_close>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_close_r+0x1a>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_close_r+0x1a>
 800b51c:	602b      	str	r3, [r5, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20000974 	.word	0x20000974

0800b524 <_fstat_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4c07      	ldr	r4, [pc, #28]	; (800b544 <_fstat_r+0x20>)
 800b528:	2300      	movs	r3, #0
 800b52a:	4605      	mov	r5, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	4611      	mov	r1, r2
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	f7fc fe36 	bl	80081a2 <_fstat>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	d102      	bne.n	800b540 <_fstat_r+0x1c>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	b103      	cbz	r3, 800b540 <_fstat_r+0x1c>
 800b53e:	602b      	str	r3, [r5, #0]
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop
 800b544:	20000974 	.word	0x20000974

0800b548 <_isatty_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4c06      	ldr	r4, [pc, #24]	; (800b564 <_isatty_r+0x1c>)
 800b54c:	2300      	movs	r3, #0
 800b54e:	4605      	mov	r5, r0
 800b550:	4608      	mov	r0, r1
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	f7fc fe35 	bl	80081c2 <_isatty>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_isatty_r+0x1a>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_isatty_r+0x1a>
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	20000974 	.word	0x20000974

0800b568 <_lseek_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4c07      	ldr	r4, [pc, #28]	; (800b588 <_lseek_r+0x20>)
 800b56c:	4605      	mov	r5, r0
 800b56e:	4608      	mov	r0, r1
 800b570:	4611      	mov	r1, r2
 800b572:	2200      	movs	r2, #0
 800b574:	6022      	str	r2, [r4, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	f7fc fe2e 	bl	80081d8 <_lseek>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	d102      	bne.n	800b586 <_lseek_r+0x1e>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	b103      	cbz	r3, 800b586 <_lseek_r+0x1e>
 800b584:	602b      	str	r3, [r5, #0]
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	20000974 	.word	0x20000974

0800b58c <__ascii_mbtowc>:
 800b58c:	b082      	sub	sp, #8
 800b58e:	b901      	cbnz	r1, 800b592 <__ascii_mbtowc+0x6>
 800b590:	a901      	add	r1, sp, #4
 800b592:	b142      	cbz	r2, 800b5a6 <__ascii_mbtowc+0x1a>
 800b594:	b14b      	cbz	r3, 800b5aa <__ascii_mbtowc+0x1e>
 800b596:	7813      	ldrb	r3, [r2, #0]
 800b598:	600b      	str	r3, [r1, #0]
 800b59a:	7812      	ldrb	r2, [r2, #0]
 800b59c:	1c10      	adds	r0, r2, #0
 800b59e:	bf18      	it	ne
 800b5a0:	2001      	movne	r0, #1
 800b5a2:	b002      	add	sp, #8
 800b5a4:	4770      	bx	lr
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	e7fb      	b.n	800b5a2 <__ascii_mbtowc+0x16>
 800b5aa:	f06f 0001 	mvn.w	r0, #1
 800b5ae:	e7f8      	b.n	800b5a2 <__ascii_mbtowc+0x16>

0800b5b0 <__malloc_lock>:
 800b5b0:	4770      	bx	lr

0800b5b2 <__malloc_unlock>:
 800b5b2:	4770      	bx	lr

0800b5b4 <_read_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4c07      	ldr	r4, [pc, #28]	; (800b5d4 <_read_r+0x20>)
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	4608      	mov	r0, r1
 800b5bc:	4611      	mov	r1, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	6022      	str	r2, [r4, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f7fc fda8 	bl	8008118 <_read>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_read_r+0x1e>
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_read_r+0x1e>
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	20000974 	.word	0x20000974

0800b5d8 <__ascii_wctomb>:
 800b5d8:	b149      	cbz	r1, 800b5ee <__ascii_wctomb+0x16>
 800b5da:	2aff      	cmp	r2, #255	; 0xff
 800b5dc:	bf85      	ittet	hi
 800b5de:	238a      	movhi	r3, #138	; 0x8a
 800b5e0:	6003      	strhi	r3, [r0, #0]
 800b5e2:	700a      	strbls	r2, [r1, #0]
 800b5e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5e8:	bf98      	it	ls
 800b5ea:	2001      	movls	r0, #1
 800b5ec:	4770      	bx	lr
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <_init>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	bf00      	nop
 800b5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fa:	bc08      	pop	{r3}
 800b5fc:	469e      	mov	lr, r3
 800b5fe:	4770      	bx	lr

0800b600 <_fini>:
 800b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b602:	bf00      	nop
 800b604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b606:	bc08      	pop	{r3}
 800b608:	469e      	mov	lr, r3
 800b60a:	4770      	bx	lr
